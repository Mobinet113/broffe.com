"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function o(u,a,c){function s(n,t){if(!a[n]){if(!u[n]){var e="function"==typeof require&&require;if(!t&&e)return e(n,!0);if(f)return f(n,!0);var r=new Error("Cannot find module '"+n+"'");throw r.code="MODULE_NOT_FOUND",r}var i=a[n]={exports:{}};u[n][0].call(i.exports,function(t){var e=u[n][1][t];return s(e||t)},i,i.exports,o,u,a,c)}return a[n].exports}for(var f="function"==typeof require&&require,t=0;t<c.length;t++)s(c[t]);return s}({1:[function(n,t,e){(function(t){if(n(327),n(328),n(2),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;function e(t,e,n){t[e]||Object.defineProperty(t,e,{writable:!0,configurable:!0,value:n})}e(String.prototype,"padLeft","".padStart),e(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&e(Array,t,Function.call.bind([][t]))})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2,327:327,328:328}],2:[function(t,e,n){t(130),e.exports=t(23).RegExp.escape},{130:130,23:23}],3:[function(t,e,n){e.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},{}],4:[function(t,e,n){var r=t(18);e.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},{18:18}],5:[function(t,e,n){var r=t(128)("unscopables"),i=Array.prototype;null==i[r]&&t(42)(i,r,{}),e.exports=function(t){i[r][t]=!0}},{128:128,42:42}],6:[function(t,e,n){e.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},{}],7:[function(t,e,n){var r=t(51);e.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},{51:51}],8:[function(t,e,n){var s=t(119),f=t(114),l=t(118);e.exports=[].copyWithin||function(t,e){var n=s(this),r=l(n.length),i=f(t,r),o=f(e,r),u=2<arguments.length?arguments[2]:void 0,a=Math.min((void 0===u?r:f(u,r))-o,r-i),c=1;for(o<i&&i<o+a&&(c=-1,o+=a-1,i+=a-1);0<a--;)o in n?n[i]=n[o]:delete n[i],i+=c,o+=c;return n}},{114:114,118:118,119:119}],9:[function(t,e,n){var a=t(119),c=t(114),s=t(118);e.exports=function(t){for(var e=a(this),n=s(e.length),r=arguments.length,i=c(1<r?arguments[1]:void 0,n),o=2<r?arguments[2]:void 0,u=void 0===o?n:c(o,n);i<u;)e[i++]=t;return e}},{114:114,118:118,119:119}],10:[function(t,e,n){var r=t(39);e.exports=function(t,e){var n=[];return r(t,!1,n.push,n,e),n}},{39:39}],11:[function(t,e,n){var c=t(117),s=t(118),f=t(114);e.exports=function(a){return function(t,e,n){var r,i=c(t),o=s(i.length),u=f(n,o);if(a&&e!=e){for(;u<o;)if((r=i[u++])!=r)return!0}else for(;u<o;u++)if((a||u in i)&&i[u]===e)return a||u||0;return!a&&-1}}},{114:114,117:117,118:118}],12:[function(t,e,n){var x=t(25),b=t(47),w=t(119),S=t(118),r=t(15);e.exports=function(l,t){var p=1==l,h=2==l,d=3==l,v=4==l,g=6==l,y=5==l||g,m=t||r;return function(t,e,n){for(var r,i,o=w(t),u=b(o),a=x(e,n,3),c=S(u.length),s=0,f=p?m(t,c):h?m(t,0):void 0;s<c;s++)if((y||s in u)&&(i=a(r=u[s],s,o),l))if(p)f[s]=i;else if(i)switch(l){case 3:return!0;case 5:return r;case 6:return s;case 2:f.push(r)}else if(v)return!1;return g?-1:d||v?v:f}}},{118:118,119:119,15:15,25:25,47:47}],13:[function(t,e,n){var f=t(3),l=t(119),p=t(47),h=t(118);e.exports=function(t,e,n,r,i){f(e);var o=l(t),u=p(o),a=h(o.length),c=i?a-1:0,s=i?-1:1;if(n<2)for(;;){if(c in u){r=u[c],c+=s;break}if(c+=s,i?c<0:a<=c)throw TypeError("Reduce of empty array with no initial value")}for(;i?0<=c:c<a;c+=s)c in u&&(r=e(r,u[c],c,o));return r}},{118:118,119:119,3:3,47:47}],14:[function(t,e,n){var r=t(51),i=t(49),o=t(128)("species");e.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),r(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},{128:128,49:49,51:51}],15:[function(t,e,n){var r=t(14);e.exports=function(t,e){return new(r(t))(e)}},{14:14}],16:[function(t,e,n){var o=t(3),u=t(51),a=t(46),c=[].slice,s={};e.exports=Function.bind||function(n){var r=o(this),i=c.call(arguments,1),t=function t(){var e=i.concat(c.call(arguments));return this instanceof t?function(t,e,n){if(!(e in s)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";s[e]=Function("F,a","return new F("+r.join(",")+")")}return s[e](t,n)}(r,e.length,e):a(r,e,n)};return u(r.prototype)&&(t.prototype=r.prototype),t}},{3:3,46:46,51:51}],17:[function(t,e,n){var i=t(18),o=t(128)("toStringTag"),u="Arguments"==i(function(){return arguments}());e.exports=function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:u?i(e):"Object"==(r=i(e))&&"function"==typeof e.callee?"Arguments":r}},{128:128,18:18}],18:[function(t,e,n){var r={}.toString;e.exports=function(t){return r.call(t).slice(8,-1)}},{}],19:[function(t,e,n){var u=t(72).f,a=t(71),c=t(93),s=t(25),f=t(6),l=t(39),r=t(55),i=t(57),o=t(100),p=t(29),h=t(66).fastKey,d=t(125),v=p?"_s":"size",g=function(t,e){var n,r=h(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};e.exports={getConstructor:function(t,o,n,r){var i=t(function(t,e){f(t,i,o,"_i"),t._t=o,t._i=a(null),t._f=void 0,t._l=void 0,t[v]=0,null!=e&&l(e,n,t[r],t)});return c(i.prototype,{clear:function(){for(var t=d(this,o),e=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete e[n.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=d(this,o),n=g(e,t);if(n){var r=n.n,i=n.p;delete e._i[n.i],n.r=!0,i&&(i.n=r),r&&(r.p=i),e._f==n&&(e._f=r),e._l==n&&(e._l=i),e[v]--}return!!n},forEach:function(t){d(this,o);for(var e,n=s(t,1<arguments.length?arguments[1]:void 0,3);e=e?e.n:this._f;)for(n(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(d(this,o),t)}}),p&&u(i.prototype,"size",{get:function(){return d(this,o)[v]}}),i},def:function(t,e,n){var r,i,o=g(t,e);return o?o.v=n:(t._l=o={i:i=h(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,e){r(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this,e=t._k,n=t._l;n&&n.r;)n=n.p;return t._t&&(t._l=n=n?n.n:t._t._f)?i(0,"keys"==e?n.k:"values"==e?n.v:[n.k,n.v]):(t._t=void 0,i(1))},e?"entries":"values",!e,!0),o(n)}}},{100:100,125:125,25:25,29:29,39:39,55:55,57:57,6:6,66:66,71:71,72:72,93:93}],20:[function(t,e,n){var r=t(17),i=t(10);e.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},{10:10,17:17}],21:[function(t,e,n){var u=t(93),a=t(66).getWeak,i=t(7),c=t(51),s=t(6),f=t(39),r=t(12),l=t(41),p=t(125),o=r(5),h=r(6),d=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,e){return o(t.a,function(t){return t[0]===e})};g.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var n=y(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(e){var t=h(this.a,function(t){return t[0]===e});return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(t,n,r,i){var o=t(function(t,e){s(t,o,n,"_i"),t._t=n,t._i=d++,t._l=void 0,null!=e&&f(e,r,t[i],t)});return u(o.prototype,{delete:function(t){if(!c(t))return!1;var e=a(t);return!0===e?v(p(this,n)).delete(t):e&&l(e,this._i)&&delete e[this._i]},has:function(t){if(!c(t))return!1;var e=a(t);return!0===e?v(p(this,n)).has(t):e&&l(e,this._i)}}),o},def:function(t,e,n){var r=a(i(e),!0);return!0===r?v(t).set(e,n):r[t._i]=n,t},ufstore:v}},{12:12,125:125,39:39,41:41,51:51,6:6,66:66,7:7,93:93}],22:[function(t,e,n){var y=t(40),m=t(33),x=t(94),b=t(93),w=t(66),S=t(39),E=t(6),T=t(51),_=t(35),A=t(56),N=t(101),j=t(45);e.exports=function(r,t,e,n,i,o){var u=y[r],a=u,c=i?"set":"add",s=a&&a.prototype,f={},l=function(t){var n=s[t];x(s,t,"delete"==t?function(t){return!(o&&!T(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(o&&!T(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return o&&!T(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof a&&(o||s.forEach&&!_(function(){(new a).entries().next()}))){var p=new a,h=p[c](o?{}:-0,1)!=p,d=_(function(){p.has(1)}),v=A(function(t){new a(t)}),g=!o&&_(function(){for(var t=new a,e=5;e--;)t[c](e,e);return!t.has(-0)});v||(((a=t(function(t,e){E(t,a,r);var n=j(new u,t,a);return null!=e&&S(e,i,n[c],n),n})).prototype=s).constructor=a),(d||g)&&(l("delete"),l("has"),i&&l("get")),(g||h)&&l(c),o&&s.clear&&delete s.clear}else a=n.getConstructor(t,r,i,c),b(a.prototype,e),w.NEED=!0;return N(a,r),f[r]=a,m(m.G+m.W+m.F*(a!=u),f),o||n.setStrong(a,r,i),a}},{101:101,33:33,35:35,39:39,40:40,45:45,51:51,56:56,6:6,66:66,93:93,94:94}],23:[function(t,e,n){var r=e.exports={version:"2.5.0"};"number"==typeof __e&&(__e=r)},{}],24:[function(t,e,n){var r=t(72),i=t(92);e.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},{72:72,92:92}],25:[function(t,e,n){var o=t(3);e.exports=function(r,i,t){if(o(r),void 0===i)return r;switch(t){case 1:return function(t){return r.call(i,t)};case 2:return function(t,e){return r.call(i,t,e)};case 3:return function(t,e,n){return r.call(i,t,e,n)}}return function(){return r.apply(i,arguments)}}},{3:3}],26:[function(t,e,n){var r=t(35),i=Date.prototype.getTime,o=Date.prototype.toISOString,u=function(t){return 9<t?t:"0"+t};e.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":9999<e?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(99<n?n:"0"+u(n))+"Z"}:o},{35:35}],27:[function(t,e,n){var r=t(7),i=t(120);e.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},{120:120,7:7}],28:[function(t,e,n){e.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},{}],29:[function(t,e,n){e.exports=!t(35)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{35:35}],30:[function(t,e,n){var r=t(51),i=t(40).document,o=r(i)&&r(i.createElement);e.exports=function(t){return o?i.createElement(t):{}}},{40:40,51:51}],31:[function(t,e,n){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],32:[function(t,e,n){var a=t(81),c=t(78),s=t(82);e.exports=function(t){var e=a(t),n=c.f;if(n)for(var r,i=n(t),o=s.f,u=0;i.length>u;)o.call(t,r=i[u++])&&e.push(r);return e}},{78:78,81:81,82:82}],33:[function(t,e,n){var v=t(40),g=t(23),y=t(42),m=t(94),x=t(25),b="prototype",r=function t(e,n,r){var i,o,u,a,c=e&t.F,s=e&t.G,f=e&t.P,l=e&t.B,p=s?v:e&t.S?v[n]||(v[n]={}):(v[n]||{})[b],h=s?g:g[n]||(g[n]={}),d=h[b]||(h[b]={});for(i in s&&(r=n),r)u=((o=!c&&p&&void 0!==p[i])?p:r)[i],a=l&&o?x(u,v):f&&"function"==typeof u?x(Function.call,u):u,p&&m(p,i,u,e&t.U),h[i]!=u&&y(h,i,a),f&&d[i]!=u&&(d[i]=u)};v.core=g,r.F=1,r.G=2,r.S=4,r.P=8,r.B=16,r.W=32,r.U=64,r.R=128,e.exports=r},{23:23,25:25,40:40,42:42,94:94}],34:[function(t,e,n){var r=t(128)("match");e.exports=function(e){var n=/./;try{"/./"[e](n)}catch(t){try{return n[r]=!1,!"/./"[e](n)}catch(t){}}return!0}},{128:128}],35:[function(t,e,n){e.exports=function(t){try{return!!t()}catch(t){return!0}}},{}],36:[function(t,e,n){var a=t(42),c=t(94),s=t(35),f=t(28),l=t(128);e.exports=function(e,t,n){var r=l(e),i=n(f,r,""[e]),o=i[0],u=i[1];s(function(){var t={};return t[r]=function(){return 7},7!=""[e](t)})&&(c(String.prototype,e,o),a(RegExp.prototype,r,2==t?function(t,e){return u.call(t,this,e)}:function(t){return u.call(t,this)}))}},{128:128,28:28,35:35,42:42,94:94}],37:[function(t,e,n){var r=t(7);e.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},{7:7}],38:[function(t,e,n){var d=t(49),v=t(51),g=t(118),y=t(25),m=t(128)("isConcatSpreadable");e.exports=function t(e,n,r,i,o,u,a,c){for(var s,f,l=o,p=0,h=!!a&&y(a,c,3);p<i;){if(p in r){if(s=h?h(r[p],p,n):r[p],f=!1,v(s)&&(f=void 0!==(f=s[m])?!!f:d(s)),f&&0<u)l=t(e,n,s,g(s.length),l,u-1)-1;else{if(9007199254740991<=l)throw TypeError();e[l]=s}l++}p++}return l}},{118:118,128:128,25:25,49:49,51:51}],39:[function(t,e,n){var p=t(25),h=t(53),d=t(48),v=t(7),g=t(118),y=t(129),m={},x={};(n=e.exports=function(t,e,n,r,i){var o,u,a,c,s=i?function(){return t}:y(t),f=p(n,r,e?2:1),l=0;if("function"!=typeof s)throw TypeError(t+" is not iterable!");if(d(s)){for(o=g(t.length);l<o;l++)if((c=e?f(v(u=t[l])[0],u[1]):f(t[l]))===m||c===x)return c}else for(a=s.call(t);!(u=a.next()).done;)if((c=h(a,f,u.value,e))===m||c===x)return c}).BREAK=m,n.RETURN=x},{118:118,129:129,25:25,48:48,53:53,7:7}],40:[function(t,e,n){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},{}],41:[function(t,e,n){var r={}.hasOwnProperty;e.exports=function(t,e){return r.call(t,e)}},{}],42:[function(t,e,n){var r=t(72),i=t(92);e.exports=t(29)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},{29:29,72:72,92:92}],43:[function(t,e,n){var r=t(40).document;e.exports=r&&r.documentElement},{40:40}],44:[function(t,e,n){e.exports=!t(29)&&!t(35)(function(){return 7!=Object.defineProperty(t(30)("div"),"a",{get:function(){return 7}}).a})},{29:29,30:30,35:35}],45:[function(t,e,n){var o=t(51),u=t(99).set;e.exports=function(t,e,n){var r,i=e.constructor;return i!==n&&"function"==typeof i&&(r=i.prototype)!==n.prototype&&o(r)&&u&&u(t,r),t}},{51:51,99:99}],46:[function(t,e,n){e.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},{}],47:[function(t,e,n){var r=t(18);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},{18:18}],48:[function(t,e,n){var r=t(58),i=t(128)("iterator"),o=Array.prototype;e.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},{128:128,58:58}],49:[function(t,e,n){var r=t(18);e.exports=Array.isArray||function(t){return"Array"==r(t)}},{18:18}],50:[function(t,e,n){var r=t(51),i=Math.floor;e.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},{51:51}],51:[function(t,e,n){e.exports=function(t){return"object"===_typeof(t)?null!==t:"function"==typeof t}},{}],52:[function(t,e,n){var r=t(51),i=t(18),o=t(128)("match");e.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},{128:128,18:18,51:51}],53:[function(t,e,n){var o=t(7);e.exports=function(e,t,n,r){try{return r?t(o(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&o(i.call(e)),t}}},{7:7}],54:[function(t,e,n){var r=t(71),i=t(92),o=t(101),u={};t(42)(u,t(128)("iterator"),function(){return this}),e.exports=function(t,e,n){t.prototype=r(u,{next:i(1,n)}),o(t,e+" Iterator")}},{101:101,128:128,42:42,71:71,92:92}],55:[function(t,e,n){var x=t(60),b=t(33),w=t(94),S=t(42),E=t(41),T=t(58),_=t(54),A=t(101),N=t(79),j=t(128)("iterator"),C=!([].keys&&"next"in[].keys()),O="values",k=function(){return this};e.exports=function(t,e,n,r,i,o,u){_(n,e,r);var a,c,s,f=function(t){if(!C&&t in d)return d[t];switch(t){case"keys":case O:return function(){return new n(this,t)}}return function(){return new n(this,t)}},l=e+" Iterator",p=i==O,h=!1,d=t.prototype,v=d[j]||d["@@iterator"]||i&&d[i],g=v||f(i),y=i?p?f("entries"):g:void 0,m="Array"==e&&d.entries||v;if(m&&(s=N(m.call(new t)))!==Object.prototype&&s.next&&(A(s,l,!0),x||E(s,j)||S(s,j,k)),p&&v&&v.name!==O&&(h=!0,g=function(){return v.call(this)}),x&&!u||!C&&!h&&d[j]||S(d,j,g),T[e]=g,T[l]=k,i)if(a={values:p?g:f(O),keys:o?g:f("keys"),entries:y},u)for(c in a)c in d||w(d,c,a[c]);else b(b.P+b.F*(C||h),e,a);return a}},{101:101,128:128,33:33,41:41,42:42,54:54,58:58,60:60,79:79,94:94}],56:[function(t,e,n){var o=t(128)("iterator"),u=!1;try{var r=[7][o]();r.return=function(){u=!0},Array.from(r,function(){throw 2})}catch(t){}e.exports=function(t,e){if(!e&&!u)return!1;var n=!1;try{var r=[7],i=r[o]();i.next=function(){return{done:n=!0}},r[o]=function(){return i},t(r)}catch(t){}return n}},{128:128}],57:[function(t,e,n){e.exports=function(t,e){return{value:e,done:!!t}}},{}],58:[function(t,e,n){e.exports={}},{}],59:[function(t,e,n){var a=t(81),c=t(117);e.exports=function(t,e){for(var n,r=c(t),i=a(r),o=i.length,u=0;u<o;)if(r[n=i[u++]]===e)return n}},{117:117,81:81}],60:[function(t,e,n){e.exports=!1},{}],61:[function(t,e,n){var r=Math.expm1;e.exports=!r||22025.465794806718<r(10)||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:-1e-6<t&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},{}],62:[function(t,e,n){var o=t(65),r=Math.pow,u=r(2,-52),a=r(2,-23),c=r(2,127)*(2-a),s=r(2,-126);e.exports=Math.fround||function(t){var e,n,r=Math.abs(t),i=o(t);return r<s?i*(r/s/a+1/u-1/u)*s*a:c<(n=(e=(1+a/u)*r)-(e-r))||n!=n?i*(1/0):i*n}},{65:65}],63:[function(t,e,n){e.exports=Math.log1p||function(t){return-1e-8<(t=+t)&&t<1e-8?t-t*t/2:Math.log(1+t)}},{}],64:[function(t,e,n){e.exports=Math.scale||function(t,e,n,r,i){return 0===arguments.length||t!=t||e!=e||n!=n||r!=r||i!=i?NaN:t===1/0||t===-1/0?t:(t-e)*(i-r)/(n-e)+r}},{}],65:[function(t,e,n){e.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},{}],66:[function(t,e,n){var r=t(124)("meta"),i=t(51),o=t(41),u=t(72).f,a=0,c=Object.isExtensible||function(){return!0},s=!t(35)(function(){return c(Object.preventExtensions({}))}),f=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},l=e.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==_typeof(t)?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!c(t))return"F";if(!e)return"E";f(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!c(t))return!0;if(!e)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&c(t)&&!o(t,r)&&f(t),t}}},{124:124,35:35,41:41,51:51,72:72}],67:[function(t,e,n){var o=t(160),r=t(33),i=t(103)("metadata"),u=i.store||(i.store=new(t(266))),a=function(t,e,n){var r=u.get(t);if(!r){if(!n)return;u.set(t,r=new o)}var i=r.get(e);if(!i){if(!n)return;r.set(e,i=new o)}return i};e.exports={store:u,map:a,has:function(t,e,n){var r=a(e,n,!1);return void 0!==r&&r.has(t)},get:function(t,e,n){var r=a(e,n,!1);return void 0===r?void 0:r.get(t)},set:function(t,e,n,r){a(n,r,!0).set(t,e)},keys:function(t,e){var n=a(t,e,!1),r=[];return n&&n.forEach(function(t,e){r.push(e)}),r},key:function(t){return void 0===t||"symbol"==_typeof(t)?t:String(t)},exp:function(t){r(r.S,"Reflect",t)}}},{103:103,160:160,266:266,33:33}],68:[function(t,e,n){var a=t(40),c=t(113).set,s=a.MutationObserver||a.WebKitMutationObserver,f=a.process,l=a.Promise,p="process"==t(18)(f);e.exports=function(){var n,r,i,t=function(){var t,e;for(p&&(t=f.domain)&&t.exit();n;){e=n.fn,n=n.next;try{e()}catch(t){throw n?i():r=void 0,t}}r=void 0,t&&t.enter()};if(p)i=function(){f.nextTick(t)};else if(s){var e=!0,o=document.createTextNode("");new s(t).observe(o,{characterData:!0}),i=function(){o.data=e=!e}}else if(l&&l.resolve){var u=l.resolve();i=function(){u.then(t)}}else i=function(){c.call(a,t)};return function(t){var e={fn:t,next:void 0};r&&(r.next=e),n||(n=e,i()),r=e}}},{113:113,18:18,40:40}],69:[function(t,e,n){var i=t(3);function r(t){var n,r;this.promise=new t(function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e}),this.resolve=i(n),this.reject=i(r)}e.exports.f=function(t){return new r(t)}},{3:3}],70:[function(t,e,n){var p=t(81),h=t(78),d=t(82),v=t(119),g=t(47),i=Object.assign;e.exports=!i||t(35)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=i({},t)[n]||Object.keys(i({},e)).join("")!=r})?function(t,e){for(var n=v(t),r=arguments.length,i=1,o=h.f,u=d.f;i<r;)for(var a,c=g(arguments[i++]),s=o?p(c).concat(o(c)):p(c),f=s.length,l=0;l<f;)u.call(c,a=s[l++])&&(n[a]=c[a]);return n}:i},{119:119,35:35,47:47,78:78,81:81,82:82}],71:[function(r,t,e){var i=r(7),o=r(73),u=r(31),a=r(102)("IE_PROTO"),c=function(){},s="prototype",f=function(){var t,e=r(30)("iframe"),n=u.length;for(e.style.display="none",r(43).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),f=t.F;n--;)delete f[s][u[n]];return f()};t.exports=Object.create||function(t,e){var n;return null!==t?(c[s]=i(t),n=new c,c[s]=null,n[a]=t):n=f(),void 0===e?n:o(n,e)}},{102:102,30:30,31:31,43:43,7:7,73:73}],72:[function(t,e,n){var r=t(7),i=t(44),o=t(120),u=Object.defineProperty;n.f=t(29)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return u(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},{120:120,29:29,44:44,7:7}],73:[function(t,e,n){var u=t(72),a=t(7),c=t(81);e.exports=t(29)?Object.defineProperties:function(t,e){a(t);for(var n,r=c(e),i=r.length,o=0;o<i;)u.f(t,n=r[o++],e[n]);return t}},{29:29,7:7,72:72,81:81}],74:[function(e,t,n){t.exports=e(60)||!e(35)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete e(40)[t]})},{35:35,40:40,60:60}],75:[function(t,e,n){var r=t(82),i=t(92),o=t(117),u=t(120),a=t(41),c=t(44),s=Object.getOwnPropertyDescriptor;n.f=t(29)?s:function(t,e){if(t=o(t),e=u(e,!0),c)try{return s(t,e)}catch(t){}if(a(t,e))return i(!r.f.call(t,e),t[e])}},{117:117,120:120,29:29,41:41,44:44,82:82,92:92}],76:[function(t,e,n){var r=t(117),i=t(77).f,o={}.toString,u="object"==("undefined"==typeof window?"undefined":_typeof(window))&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(r(t))}},{117:117,77:77}],77:[function(t,e,n){var r=t(80),i=t(31).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},{31:31,80:80}],78:[function(t,e,n){n.f=Object.getOwnPropertySymbols},{}],79:[function(t,e,n){var r=t(41),i=t(119),o=t(102)("IE_PROTO"),u=Object.prototype;e.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},{102:102,119:119,41:41}],80:[function(t,e,n){var u=t(41),a=t(117),c=t(11)(!1),s=t(102)("IE_PROTO");e.exports=function(t,e){var n,r=a(t),i=0,o=[];for(n in r)n!=s&&u(r,n)&&o.push(n);for(;e.length>i;)u(r,n=e[i++])&&(~c(o,n)||o.push(n));return o}},{102:102,11:11,117:117,41:41}],81:[function(t,e,n){var r=t(80),i=t(31);e.exports=Object.keys||function(t){return r(t,i)}},{31:31,80:80}],82:[function(t,e,n){n.f={}.propertyIsEnumerable},{}],83:[function(t,e,n){var i=t(33),o=t(23),u=t(35);e.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],r={};r[t]=e(n),i(i.S+i.F*u(function(){n(1)}),"Object",r)}},{23:23,33:33,35:35}],84:[function(t,e,n){var c=t(81),s=t(117),f=t(82).f;e.exports=function(a){return function(t){for(var e,n=s(t),r=c(n),i=r.length,o=0,u=[];o<i;)f.call(n,e=r[o++])&&u.push(a?[e,n[e]]:n[e]);return u}}},{117:117,81:81,82:82}],85:[function(t,e,n){var r=t(77),i=t(78),o=t(7),u=t(40).Reflect;e.exports=u&&u.ownKeys||function(t){var e=r.f(o(t)),n=i.f;return n?e.concat(n(t)):e}},{40:40,7:7,77:77,78:78}],86:[function(t,e,n){var r=t(40).parseFloat,i=t(111).trim;e.exports=1/r(t(112)+"-0")!=-1/0?function(t){var e=i(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},{111:111,112:112,40:40}],87:[function(t,e,n){var r=t(40).parseInt,i=t(111).trim,o=t(112),u=/^[-+]?0[xX]/;e.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,e){var n=i(String(t),3);return r(n,e>>>0||(u.test(n)?16:10))}:r},{111:111,112:112,40:40}],88:[function(t,e,n){var r=t(89),s=t(46),f=t(3);e.exports=function(){for(var i=f(this),o=arguments.length,u=Array(o),t=0,a=r._,c=!1;t<o;)(u[t]=arguments[t++])===a&&(c=!0);return function(){var t,e=arguments.length,n=0,r=0;if(!c&&!e)return s(i,u,this);if(t=u.slice(),c)for(;n<o;n++)t[n]===a&&(t[n]=arguments[r++]);for(;r<e;)t.push(arguments[r++]);return s(i,t,this)}}},{3:3,46:46,89:89}],89:[function(t,e,n){e.exports=t(40)},{40:40}],90:[function(t,e,n){e.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},{}],91:[function(t,e,n){var r=t(69);e.exports=function(t,e){var n=r.f(t);return(0,n.resolve)(e),n.promise}},{69:69}],92:[function(t,e,n){e.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},{}],93:[function(t,e,n){var i=t(94);e.exports=function(t,e,n){for(var r in e)i(t,r,e[r],n);return t}},{94:94}],94:[function(t,e,n){var o=t(40),u=t(42),a=t(41),c=t(124)("src"),r="toString",i=Function[r],s=(""+i).split(r);t(23).inspectSource=function(t){return i.call(t)},(e.exports=function(t,e,n,r){var i="function"==typeof n;i&&(a(n,"name")||u(n,"name",e)),t[e]!==n&&(i&&(a(n,c)||u(n,c,t[e]?""+t[e]:s.join(String(e)))),t===o?t[e]=n:r?t[e]?t[e]=n:u(t,e,n):(delete t[e],u(t,e,n)))})(Function.prototype,r,function(){return"function"==typeof this&&this[c]||i.call(this)})},{124:124,23:23,40:40,41:41,42:42}],95:[function(t,e,n){e.exports=function(e,n){var r=n===Object(n)?function(t){return n[t]}:n;return function(t){return String(t).replace(e,r)}}},{}],96:[function(t,e,n){e.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},{}],97:[function(t,e,n){var r=t(33),u=t(3),a=t(25),c=t(39);e.exports=function(t){r(r.S,t,{from:function(t){var e,n,r,i,o=arguments[1];return u(this),(e=void 0!==o)&&u(o),null==t?new this:(n=[],e?(r=0,i=a(o,arguments[2],2),c(t,!1,function(t){n.push(i(t,r++))})):c(t,!1,n.push,n),new this(n))}})}},{25:25,3:3,33:33,39:39}],98:[function(t,e,n){var r=t(33);e.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,e=Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},{33:33}],99:[function(e,t,n){var r=e(51),i=e(7),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(25)(Function.call,e(75).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},{25:25,51:51,7:7,75:75}],100:[function(t,e,n){var r=t(40),i=t(72),o=t(29),u=t(128)("species");e.exports=function(t){var e=r[t];o&&e&&!e[u]&&i.f(e,u,{configurable:!0,get:function(){return this}})}},{128:128,29:29,40:40,72:72}],101:[function(t,e,n){var r=t(72).f,i=t(41),o=t(128)("toStringTag");e.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},{128:128,41:41,72:72}],102:[function(t,e,n){var r=t(103)("keys"),i=t(124);e.exports=function(t){return r[t]||(r[t]=i(t))}},{103:103,124:124}],103:[function(t,e,n){var r=t(40),i="__core-js_shared__",o=r[i]||(r[i]={});e.exports=function(t){return o[t]||(o[t]={})}},{40:40}],104:[function(t,e,n){var i=t(7),o=t(3),u=t(128)("species");e.exports=function(t,e){var n,r=i(t).constructor;return void 0===r||null==(n=i(r)[u])?e:o(n)}},{128:128,3:3,7:7}],105:[function(t,e,n){var r=t(35);e.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},{35:35}],106:[function(t,e,n){var c=t(116),s=t(28);e.exports=function(a){return function(t,e){var n,r,i=String(s(t)),o=c(e),u=i.length;return o<0||u<=o?a?"":void 0:(n=i.charCodeAt(o))<55296||56319<n||o+1===u||(r=i.charCodeAt(o+1))<56320||57343<r?a?i.charAt(o):n:a?i.slice(o,o+2):r-56320+(n-55296<<10)+65536}}},{116:116,28:28}],107:[function(t,e,n){var r=t(52),i=t(28);e.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(t))}},{28:28,52:52}],108:[function(t,e,n){var r=t(33),i=t(35),u=t(28),a=/"/g,o=function(t,e,n,r){var i=String(u(t)),o="<"+e;return""!==n&&(o+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),o+">"+i+"</"+e+">"};e.exports=function(e,t){var n={};n[e]=t(o),r(r.P+r.F*i(function(){var t=""[e]('"');return t!==t.toLowerCase()||3<t.split('"').length}),"String",n)}},{28:28,33:33,35:35}],109:[function(t,e,n){var f=t(118),l=t(110),p=t(28);e.exports=function(t,e,n,r){var i=String(p(t)),o=i.length,u=void 0===n?" ":String(n),a=f(e);if(a<=o||""==u)return i;var c=a-o,s=l.call(u,Math.ceil(c/u.length));return s.length>c&&(s=s.slice(0,c)),r?s+i:i+s}},{110:110,118:118,28:28}],110:[function(t,e,n){var i=t(116),o=t(28);e.exports=function(t){var e=String(o(this)),n="",r=i(t);if(r<0||r==1/0)throw RangeError("Count can't be negative");for(;0<r;(r>>>=1)&&(e+=e))1&r&&(n+=e);return n}},{116:116,28:28}],111:[function(t,e,n){var u=t(33),r=t(28),a=t(35),c=t(112),i="["+c+"]",o=RegExp("^"+i+i+"*"),s=RegExp(i+i+"*$"),f=function(t,e,n){var r={},i=a(function(){return!!c[t]()||"​"!="​"[t]()}),o=r[t]=i?e(l):c[t];n&&(r[n]=o),u(u.P+u.F*i,"String",r)},l=f.trim=function(t,e){return t=String(r(t)),1&e&&(t=t.replace(o,"")),2&e&&(t=t.replace(s,"")),t};e.exports=f},{112:112,28:28,33:33,35:35}],112:[function(t,e,n){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],113:[function(t,e,n){var r,i,o,u=t(25),a=t(46),c=t(43),s=t(30),f=t(40),l=f.process,p=f.setImmediate,h=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,g=0,y={},m="onreadystatechange",x=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){x.call(t.data)};p&&h||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return y[++g]=function(){a("function"==typeof t?t:Function(t),e)},r(g),g},h=function(t){delete y[t]},"process"==t(18)(l)?r=function(t){l.nextTick(u(x,t,1))}:v&&v.now?r=function(t){v.now(u(x,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=b,r=u(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):r=m in s("script")?function(t){c.appendChild(s("script"))[m]=function(){c.removeChild(this),x.call(t)}}:function(t){setTimeout(u(x,t,1),0)}),e.exports={set:p,clear:h}},{18:18,25:25,30:30,40:40,43:43,46:46}],114:[function(t,e,n){var r=t(116),i=Math.max,o=Math.min;e.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},{116:116}],115:[function(t,e,n){var r=t(116),i=t(118);e.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length!");return n}},{116:116,118:118}],116:[function(t,e,n){var r=Math.ceil,i=Math.floor;e.exports=function(t){return isNaN(t=+t)?0:(0<t?i:r)(t)}},{}],117:[function(t,e,n){var r=t(47),i=t(28);e.exports=function(t){return r(i(t))}},{28:28,47:47}],118:[function(t,e,n){var r=t(116),i=Math.min;e.exports=function(t){return 0<t?i(r(t),9007199254740991):0}},{116:116}],119:[function(t,e,n){var r=t(28);e.exports=function(t){return Object(r(t))}},{28:28}],120:[function(t,e,n){var i=t(51);e.exports=function(t,e){if(!i(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!i(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!i(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!i(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},{51:51}],121:[function(t,e,n){if(t(29)){var y=t(60),m=t(40),x=t(35),b=t(33),w=t(123),r=t(122),p=t(25),S=t(6),i=t(92),E=t(42),o=t(93),u=t(116),T=t(118),_=t(115),a=t(114),c=t(120),s=t(41),A=t(17),N=t(51),h=t(119),d=t(48),j=t(71),C=t(79),O=t(77).f,v=t(129),f=t(124),l=t(128),g=t(12),k=t(11),M=t(104),P=t(141),L=t(58),D=t(56),F=t(100),I=t(9),R=t(8),q=t(72),H=t(75),W=q.f,B=H.f,U=m.RangeError,$=m.TypeError,G=m.Uint8Array,V="ArrayBuffer",z="Shared"+V,X="BYTES_PER_ELEMENT",Y="prototype",J=Array[Y],K=r.ArrayBuffer,Q=r.DataView,Z=g(0),tt=g(2),et=g(3),nt=g(4),rt=g(5),it=g(6),ot=k(!0),ut=k(!1),at=P.values,ct=P.keys,st=P.entries,ft=J.lastIndexOf,lt=J.reduce,pt=J.reduceRight,ht=J.join,dt=J.sort,vt=J.slice,gt=J.toString,yt=J.toLocaleString,mt=l("iterator"),xt=l("toStringTag"),bt=f("typed_constructor"),wt=f("def_constructor"),St=w.CONSTR,Et=w.TYPED,Tt=w.VIEW,_t="Wrong length!",At=g(1,function(t,e){return kt(M(t,t[wt]),e)}),Nt=x(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),jt=!!G&&!!G[Y].set&&x(function(){new G(1).set({})}),Ct=function(t,e){var n=u(t);if(n<0||n%e)throw U("Wrong offset!");return n},Ot=function(t){if(N(t)&&Et in t)return t;throw $(t+" is not a typed array!")},kt=function(t,e){if(!(N(t)&&bt in t))throw $("It is not a typed array constructor!");return new t(e)},Mt=function(t,e){return Pt(M(t,t[wt]),e)},Pt=function(t,e){for(var n=0,r=e.length,i=kt(t,r);n<r;)i[n]=e[n++];return i},Lt=function(t,e,n){W(t,e,{get:function(){return this._d[n]}})},Dt=function(t){var e,n,r,i,o,u,a=h(t),c=arguments.length,s=1<c?arguments[1]:void 0,f=void 0!==s,l=v(a);if(null!=l&&!d(l)){for(u=l.call(a),r=[],e=0;!(o=u.next()).done;e++)r.push(o.value);a=r}for(f&&2<c&&(s=p(s,arguments[2],2)),e=0,n=T(a.length),i=kt(this,n);e<n;e++)i[e]=f?s(a[e],e):a[e];return i},Ft=function(){for(var t=0,e=arguments.length,n=kt(this,e);t<e;)n[t]=arguments[t++];return n},It=!!G&&x(function(){yt.call(new G(1))}),Rt=function(){return yt.apply(It?vt.call(Ot(this)):Ot(this),arguments)},qt={copyWithin:function(t,e){return R.call(Ot(this),t,e,2<arguments.length?arguments[2]:void 0)},every:function(t){return nt(Ot(this),t,1<arguments.length?arguments[1]:void 0)},fill:function(t){return I.apply(Ot(this),arguments)},filter:function(t){return Mt(this,tt(Ot(this),t,1<arguments.length?arguments[1]:void 0))},find:function(t){return rt(Ot(this),t,1<arguments.length?arguments[1]:void 0)},findIndex:function(t){return it(Ot(this),t,1<arguments.length?arguments[1]:void 0)},forEach:function(t){Z(Ot(this),t,1<arguments.length?arguments[1]:void 0)},indexOf:function(t){return ut(Ot(this),t,1<arguments.length?arguments[1]:void 0)},includes:function(t){return ot(Ot(this),t,1<arguments.length?arguments[1]:void 0)},join:function(t){return ht.apply(Ot(this),arguments)},lastIndexOf:function(t){return ft.apply(Ot(this),arguments)},map:function(t){return At(Ot(this),t,1<arguments.length?arguments[1]:void 0)},reduce:function(t){return lt.apply(Ot(this),arguments)},reduceRight:function(t){return pt.apply(Ot(this),arguments)},reverse:function(){for(var t,e=this,n=Ot(e).length,r=Math.floor(n/2),i=0;i<r;)t=e[i],e[i++]=e[--n],e[n]=t;return e},some:function(t){return et(Ot(this),t,1<arguments.length?arguments[1]:void 0)},sort:function(t){return dt.call(Ot(this),t)},subarray:function(t,e){var n=Ot(this),r=n.length,i=a(t,r);return new(M(n,n[wt]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,T((void 0===e?r:a(e,r))-i))}},Ht=function(t,e){return Mt(this,vt.call(Ot(this),t,e))},Wt=function(t){Ot(this);var e=Ct(arguments[1],1),n=this.length,r=h(t),i=T(r.length),o=0;if(n<i+e)throw U(_t);for(;o<i;)this[e+o]=r[o++]},Bt={entries:function(){return st.call(Ot(this))},keys:function(){return ct.call(Ot(this))},values:function(){return at.call(Ot(this))}},Ut=function(t,e){return N(t)&&t[Et]&&"symbol"!=_typeof(e)&&e in t&&String(+e)==String(e)},$t=function(t,e){return Ut(t,e=c(e,!0))?i(2,t[e]):B(t,e)},Gt=function(t,e,n){return!(Ut(t,e=c(e,!0))&&N(n)&&s(n,"value"))||s(n,"get")||s(n,"set")||n.configurable||s(n,"writable")&&!n.writable||s(n,"enumerable")&&!n.enumerable?W(t,e,n):(t[e]=n.value,t)};St||(H.f=$t,q.f=Gt),b(b.S+b.F*!St,"Object",{getOwnPropertyDescriptor:$t,defineProperty:Gt}),x(function(){gt.call({})})&&(gt=yt=function(){return ht.call(this)});var Vt=o({},qt);o(Vt,Bt),E(Vt,mt,Bt.values),o(Vt,{slice:Ht,set:Wt,constructor:function(){},toString:gt,toLocaleString:Rt}),Lt(Vt,"buffer","b"),Lt(Vt,"byteOffset","o"),Lt(Vt,"byteLength","l"),Lt(Vt,"length","e"),W(Vt,xt,{get:function(){return this[Et]}}),e.exports=function(t,l,e,o){var p=t+((o=!!o)?"Clamped":"")+"Array",n="get"+t,u="set"+t,h=m[p],a=h||{},r=h&&C(h),i=!h||!w.ABV,c={},s=h&&h[Y],d=function(t,i){W(t,i,{get:function(){return t=i,(e=this._d).v[n](t*l+e.o,Nt);var t,e},set:function(t){return e=i,n=t,r=this._d,o&&(n=(n=Math.round(n))<0?0:255<n?255:255&n),void r.v[u](e*l+r.o,n,Nt);var e,n,r},enumerable:!0})};i?(h=e(function(t,e,n,r){S(t,h,p,"_d");var i,o,u,a,c=0,s=0;if(N(e)){if(!(e instanceof K||(a=A(e))==V||a==z))return Et in e?Pt(h,e):Dt.call(h,e);i=e,s=Ct(n,l);var f=e.byteLength;if(void 0===r){if(f%l)throw U(_t);if((o=f-s)<0)throw U(_t)}else if(f<(o=T(r)*l)+s)throw U(_t);u=o/l}else u=_(e),i=new K(o=u*l);for(E(t,"_d",{b:i,o:s,l:o,e:u,v:new Q(i)});c<u;)d(t,c++)}),s=h[Y]=j(Vt),E(s,"constructor",h)):x(function(){h(1)})&&x(function(){new h(-1)})&&D(function(t){new h,new h(null),new h(1.5),new h(t)},!0)||(h=e(function(t,e,n,r){var i;return S(t,h,p),N(e)?e instanceof K||(i=A(e))==V||i==z?void 0!==r?new a(e,Ct(n,l),r):void 0!==n?new a(e,Ct(n,l)):new a(e):Et in e?Pt(h,e):Dt.call(h,e):new a(_(e))}),Z(r!==Function.prototype?O(a).concat(O(r)):O(a),function(t){t in h||E(h,t,a[t])}),h[Y]=s,y||(s.constructor=h));var f=s[mt],v=!!f&&("values"==f.name||null==f.name),g=Bt.values;E(h,bt,!0),E(s,Et,p),E(s,Tt,!0),E(s,wt,h),(o?new h(1)[xt]==p:xt in s)||W(s,xt,{get:function(){return p}}),c[p]=h,b(b.G+b.W+b.F*(h!=a),c),b(b.S,p,{BYTES_PER_ELEMENT:l}),b(b.S+b.F*x(function(){a.of.call(h,1)}),p,{from:Dt,of:Ft}),X in s||E(s,X,l),b(b.P,p,qt),F(p),b(b.P+b.F*jt,p,{set:Wt}),b(b.P+b.F*!v,p,Bt),y||s.toString==gt||(s.toString=gt),b(b.P+b.F*x(function(){new h(1).slice()}),p,{slice:Ht}),b(b.P+b.F*(x(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!x(function(){s.toLocaleString.call([1,2])})),p,{toLocaleString:Rt}),L[p]=v?f:g,y||v||E(s,mt,g)}}else e.exports=function(){}},{100:100,104:104,11:11,114:114,115:115,116:116,118:118,119:119,12:12,120:120,122:122,123:123,124:124,128:128,129:129,141:141,17:17,25:25,29:29,33:33,35:35,40:40,41:41,42:42,48:48,51:51,56:56,58:58,6:6,60:60,71:71,72:72,75:75,77:77,79:79,8:8,9:9,92:92,93:93}],122:[function(t,e,n){var r=t(40),i=t(29),o=t(60),u=t(123),a=t(42),c=t(93),s=t(35),f=t(6),l=t(116),p=t(118),h=t(115),d=t(77).f,v=t(72).f,g=t(9),y=t(101),m="ArrayBuffer",x="DataView",b="prototype",w="Wrong index!",S=r[m],E=r[x],T=r.Math,_=r.RangeError,A=r.Infinity,N=S,j=T.abs,C=T.pow,O=T.floor,k=T.log,M=T.LN2,P="byteLength",L="byteOffset",D=i?"_b":"buffer",F=i?"_l":P,I=i?"_o":L;function R(t,e,n){var r,i,o,u=Array(n),a=8*n-e-1,c=(1<<a)-1,s=c>>1,f=23===e?C(2,-24)-C(2,-77):0,l=0,p=t<0||0===t&&1/t<0?1:0;for((t=j(t))!=t||t===A?(i=t!=t?1:0,r=c):(r=O(k(t)/M),t*(o=C(2,-r))<1&&(r--,o*=2),2<=(t+=1<=r+s?f/o:f*C(2,1-s))*o&&(r++,o/=2),c<=r+s?(i=0,r=c):1<=r+s?(i=(t*o-1)*C(2,e),r+=s):(i=t*C(2,s-1)*C(2,e),r=0));8<=e;u[l++]=255&i,i/=256,e-=8);for(r=r<<e|i,a+=e;0<a;u[l++]=255&r,r/=256,a-=8);return u[--l]|=128*p,u}function q(t,e,n){var r,i=8*n-e-1,o=(1<<i)-1,u=o>>1,a=i-7,c=n-1,s=t[c--],f=127&s;for(s>>=7;0<a;f=256*f+t[c],c--,a-=8);for(r=f&(1<<-a)-1,f>>=-a,a+=e;0<a;r=256*r+t[c],c--,a-=8);if(0===f)f=1-u;else{if(f===o)return r?NaN:s?-A:A;r+=C(2,e),f-=u}return(s?-1:1)*r*C(2,f-e)}function H(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function W(t){return[255&t]}function B(t){return[255&t,t>>8&255]}function U(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function $(t){return R(t,52,8)}function G(t){return R(t,23,4)}function V(t,e,n){v(t[b],e,{get:function(){return this[n]}})}function z(t,e,n,r){var i=h(+n);if(i+e>t[F])throw _(w);var o=t[D]._b,u=i+t[I],a=o.slice(u,u+e);return r?a:a.reverse()}function X(t,e,n,r,i,o){var u=h(+n);if(u+e>t[F])throw _(w);for(var a=t[D]._b,c=u+t[I],s=r(+i),f=0;f<e;f++)a[c+f]=s[o?f:e-f-1]}if(u.ABV){if(!s(function(){S(1)})||!s(function(){new S(-1)})||s(function(){return new S,new S(1.5),new S(NaN),S.name!=m})){for(var Y,J=(S=function(t){return f(this,S),new N(h(t))})[b]=N[b],K=d(N),Q=0;K.length>Q;)(Y=K[Q++])in S||a(S,Y,N[Y]);o||(J.constructor=S)}var Z=new E(new S(2)),tt=E[b].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||c(E[b],{setInt8:function(t,e){tt.call(this,t,e<<24>>24)},setUint8:function(t,e){tt.call(this,t,e<<24>>24)}},!0)}else S=function(t){f(this,S,m);var e=h(t);this._b=g.call(Array(e),0),this[F]=e},E=function(t,e,n){f(this,E,x),f(t,S,x);var r=t[F],i=l(e);if(i<0||r<i)throw _("Wrong offset!");if(r<i+(n=void 0===n?r-i:p(n)))throw _("Wrong length!");this[D]=t,this[I]=i,this[F]=n},i&&(V(S,P,"_l"),V(E,"buffer","_b"),V(E,P,"_l"),V(E,L,"_o")),c(E[b],{getInt8:function(t){return z(this,1,t)[0]<<24>>24},getUint8:function(t){return z(this,1,t)[0]},getInt16:function(t){var e=z(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=z(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return H(z(this,4,t,arguments[1]))},getUint32:function(t){return H(z(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return q(z(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return q(z(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){X(this,1,t,W,e)},setUint8:function(t,e){X(this,1,t,W,e)},setInt16:function(t,e){X(this,2,t,B,e,arguments[2])},setUint16:function(t,e){X(this,2,t,B,e,arguments[2])},setInt32:function(t,e){X(this,4,t,U,e,arguments[2])},setUint32:function(t,e){X(this,4,t,U,e,arguments[2])},setFloat32:function(t,e){X(this,4,t,G,e,arguments[2])},setFloat64:function(t,e){X(this,8,t,$,e,arguments[2])}});y(S,m),y(E,x),a(E[b],u.VIEW,!0),n[m]=S,n[x]=E},{101:101,115:115,116:116,118:118,123:123,29:29,35:35,40:40,42:42,6:6,60:60,72:72,77:77,9:9,93:93}],123:[function(t,e,n){for(var r,i=t(40),o=t(42),u=t(124),a=u("typed_array"),c=u("view"),s=!(!i.ArrayBuffer||!i.DataView),f=s,l=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=i[p[l++]])?(o(r.prototype,a,!0),o(r.prototype,c,!0)):f=!1;e.exports={ABV:s,CONSTR:f,TYPED:a,VIEW:c}},{124:124,40:40,42:42}],124:[function(t,e,n){var r=0,i=Math.random();e.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+i).toString(36))}},{}],125:[function(t,e,n){var r=t(51);e.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},{51:51}],126:[function(t,e,n){var r=t(40),i=t(23),o=t(60),u=t(127),a=t(72).f;e.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:u.f(t)})}},{127:127,23:23,40:40,60:60,72:72}],127:[function(t,e,n){n.f=t(128)},{128:128}],128:[function(t,e,n){var r=t(103)("wks"),i=t(124),o=t(40).Symbol,u="function"==typeof o;(e.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},{103:103,124:124,40:40}],129:[function(t,e,n){var r=t(17),i=t(128)("iterator"),o=t(58);e.exports=t(23).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},{128:128,17:17,23:23,58:58}],130:[function(t,e,n){var r=t(33),i=t(95)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return i(t)}})},{33:33,95:95}],131:[function(t,e,n){var r=t(33);r(r.P,"Array",{copyWithin:t(8)}),t(5)("copyWithin")},{33:33,5:5,8:8}],132:[function(t,e,n){var r=t(33),i=t(12)(4);r(r.P+r.F*!t(105)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],133:[function(t,e,n){var r=t(33);r(r.P,"Array",{fill:t(9)}),t(5)("fill")},{33:33,5:5,9:9}],134:[function(t,e,n){var r=t(33),i=t(12)(2);r(r.P+r.F*!t(105)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],135:[function(t,e,n){var r=t(33),i=t(12)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{findIndex:function(t){return i(this,t,1<arguments.length?arguments[1]:void 0)}}),t(5)(o)},{12:12,33:33,5:5}],136:[function(t,e,n){var r=t(33),i=t(12)(5),o="find",u=!0;o in[]&&Array(1)[o](function(){u=!1}),r(r.P+r.F*u,"Array",{find:function(t){return i(this,t,1<arguments.length?arguments[1]:void 0)}}),t(5)(o)},{12:12,33:33,5:5}],137:[function(t,e,n){var r=t(33),i=t(12)(0),o=t(105)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],138:[function(t,e,n){var p=t(25),r=t(33),h=t(119),d=t(53),v=t(48),g=t(118),y=t(24),m=t(129);r(r.S+r.F*!t(56)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,r,i,o=h(t),u="function"==typeof this?this:Array,a=arguments.length,c=1<a?arguments[1]:void 0,s=void 0!==c,f=0,l=m(o);if(s&&(c=p(c,2<a?arguments[2]:void 0,2)),null==l||u==Array&&v(l))for(n=new u(e=g(o.length));f<e;f++)y(n,f,s?c(o[f],f):o[f]);else for(i=l.call(o),n=new u;!(r=i.next()).done;f++)y(n,f,s?d(i,c,[r.value,f],!0):r.value);return n.length=f,n}})},{118:118,119:119,129:129,24:24,25:25,33:33,48:48,53:53,56:56}],139:[function(t,e,n){var r=t(33),i=t(11)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(u||!t(105)(o)),"Array",{indexOf:function(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},{105:105,11:11,33:33}],140:[function(t,e,n){var r=t(33);r(r.S,"Array",{isArray:t(49)})},{33:33,49:49}],141:[function(t,e,n){var r=t(5),i=t(57),o=t(58),u=t(117);e.exports=t(55)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},{117:117,5:5,55:55,57:57,58:58}],142:[function(t,e,n){var r=t(33),i=t(117),o=[].join;r(r.P+r.F*(t(47)!=Object||!t(105)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},{105:105,117:117,33:33,47:47}],143:[function(t,e,n){var r=t(33),i=t(117),o=t(116),u=t(118),a=[].lastIndexOf,c=!!a&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!t(105)(a)),"Array",{lastIndexOf:function(t){if(c)return a.apply(this,arguments)||0;var e=i(this),n=u(e.length),r=n-1;for(1<arguments.length&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=n+r);0<=r;r--)if(r in e&&e[r]===t)return r||0;return-1}})},{105:105,116:116,117:117,118:118,33:33}],144:[function(t,e,n){var r=t(33),i=t(12)(1);r(r.P+r.F*!t(105)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],145:[function(t,e,n){var r=t(33),i=t(24);r(r.S+r.F*t(35)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);t<e;)i(n,t,arguments[t++]);return n.length=e,n}})},{24:24,33:33,35:35}],146:[function(t,e,n){var r=t(33),i=t(13);r(r.P+r.F*!t(105)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},{105:105,13:13,33:33}],147:[function(t,e,n){var r=t(33),i=t(13);r(r.P+r.F*!t(105)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},{105:105,13:13,33:33}],148:[function(t,e,n){var r=t(33),i=t(43),s=t(18),f=t(114),l=t(118),p=[].slice;r(r.P+r.F*t(35)(function(){i&&p.call(i)}),"Array",{slice:function(t,e){var n=l(this.length),r=s(this);if(e=void 0===e?n:e,"Array"==r)return p.call(this,t,e);for(var i=f(t,n),o=f(e,n),u=l(o-i),a=Array(u),c=0;c<u;c++)a[c]="String"==r?this.charAt(i+c):this[i+c];return a}})},{114:114,118:118,18:18,33:33,35:35,43:43}],149:[function(t,e,n){var r=t(33),i=t(12)(3);r(r.P+r.F*!t(105)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],150:[function(t,e,n){var r=t(33),i=t(3),o=t(119),u=t(35),a=[].sort,c=[1,2,3];r(r.P+r.F*(u(function(){c.sort(void 0)})||!u(function(){c.sort(null)})||!t(105)(a)),"Array",{sort:function(t){return void 0===t?a.call(o(this)):a.call(o(this),i(t))}})},{105:105,119:119,3:3,33:33,35:35}],151:[function(t,e,n){t(100)("Array")},{100:100}],152:[function(t,e,n){var r=t(33);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},{33:33}],153:[function(t,e,n){var r=t(33),i=t(26);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},{26:26,33:33}],154:[function(t,e,n){var r=t(33),i=t(119),o=t(120);r(r.P+r.F*t(35)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),n=o(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},{119:119,120:120,33:33,35:35}],155:[function(t,e,n){var r=t(128)("toPrimitive"),i=Date.prototype;r in i||t(42)(i,r,t(27))},{128:128,27:27,42:42}],156:[function(t,e,n){var r=Date.prototype,i="Invalid Date",o="toString",u=r[o],a=r.getTime;new Date(NaN)+""!=i&&t(94)(r,o,function(){var t=a.call(this);return t==t?u.call(this):i})},{94:94}],157:[function(t,e,n){var r=t(33);r(r.P,"Function",{bind:t(16)})},{16:16,33:33}],158:[function(t,e,n){var r=t(51),i=t(79),o=t(128)("hasInstance"),u=Function.prototype;o in u||t(72).f(u,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},{128:128,51:51,72:72,79:79}],159:[function(t,e,n){var r=t(72).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||t(29)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},{29:29,72:72}],160:[function(t,e,n){var r=t(19),i=t(125);e.exports=t(22)("Map",function(t){return function(){return t(this,0<arguments.length?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(i(this,"Map"),0===t?0:t,e)}},r,!0)},{125:125,19:19,22:22}],161:[function(t,e,n){var r=t(33),i=t(63),o=Math.sqrt,u=Math.acosh;r(r.S+r.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:94906265.62425156<t?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},{33:33,63:63}],162:[function(t,e,n){var r=t(33),i=Math.asinh;r(r.S+r.F*!(i&&0<1/i(0)),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},{33:33}],163:[function(t,e,n){var r=t(33),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},{33:33}],164:[function(t,e,n){var r=t(33),i=t(65);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},{33:33,65:65}],165:[function(t,e,n){var r=t(33);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},{33:33}],166:[function(t,e,n){var r=t(33),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},{33:33}],167:[function(t,e,n){var r=t(33),i=t(61);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},{33:33,61:61}],168:[function(t,e,n){var r=t(33);r(r.S,"Math",{fround:t(62)})},{33:33,62:62}],169:[function(t,e,n){var r=t(33),c=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,i=0,o=0,u=arguments.length,a=0;o<u;)a<(n=c(arguments[o++]))?(i=i*(r=a/n)*r+1,a=n):i+=0<n?(r=n/a)*r:n;return a===1/0?1/0:a*Math.sqrt(i)}})},{33:33}],170:[function(t,e,n){var r=t(33),i=Math.imul;r(r.S+r.F*t(35)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var n=65535,r=+t,i=+e,o=n&r,u=n&i;return 0|o*u+((n&r>>>16)*u+o*(n&i>>>16)<<16>>>0)}})},{33:33,35:35}],171:[function(t,e,n){var r=t(33);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},{33:33}],172:[function(t,e,n){var r=t(33);r(r.S,"Math",{log1p:t(63)})},{33:33,63:63}],173:[function(t,e,n){var r=t(33);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},{33:33}],174:[function(t,e,n){var r=t(33);r(r.S,"Math",{sign:t(65)})},{33:33,65:65}],175:[function(t,e,n){var r=t(33),i=t(61),o=Math.exp;r(r.S+r.F*t(35)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},{33:33,35:35,61:61}],176:[function(t,e,n){var r=t(33),i=t(61),o=Math.exp;r(r.S,"Math",{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},{33:33,61:61}],177:[function(t,e,n){var r=t(33);r(r.S,"Math",{trunc:function(t){return(0<t?Math.floor:Math.ceil)(t)}})},{33:33}],178:[function(t,e,n){var r=t(40),i=t(41),o=t(18),u=t(45),f=t(120),a=t(35),c=t(77).f,s=t(75).f,l=t(72).f,p=t(111).trim,h="Number",d=r[h],v=d,g=d.prototype,y=o(t(71)(g))==h,m="trim"in String.prototype,x=function(t){var e=f(t,!1);if("string"==typeof e&&2<e.length){var n,r,i,o=(e=m?e.trim():p(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+e}for(var u,a=e.slice(2),c=0,s=a.length;c<s;c++)if((u=a.charCodeAt(c))<48||i<u)return NaN;return parseInt(a,r)}}return+e};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof d&&(y?a(function(){g.valueOf.call(n)}):o(n)!=h)?u(new v(x(e)),n,d):x(e)};for(var b,w=t(29)?c(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;w.length>S;S++)i(v,b=w[S])&&!i(d,b)&&l(d,b,s(v,b));(d.prototype=g).constructor=d,t(94)(r,h,d)}},{111:111,120:120,18:18,29:29,35:35,40:40,41:41,45:45,71:71,72:72,75:75,77:77,94:94}],179:[function(t,e,n){var r=t(33);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},{33:33}],180:[function(t,e,n){var r=t(33),i=t(40).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},{33:33,40:40}],181:[function(t,e,n){var r=t(33);r(r.S,"Number",{isInteger:t(50)})},{33:33,50:50}],182:[function(t,e,n){var r=t(33);r(r.S,"Number",{isNaN:function(t){return t!=t}})},{33:33}],183:[function(t,e,n){var r=t(33),i=t(50),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},{33:33,50:50}],184:[function(t,e,n){var r=t(33);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},{33:33}],185:[function(t,e,n){var r=t(33);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},{33:33}],186:[function(t,e,n){var r=t(33),i=t(86);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},{33:33,86:86}],187:[function(t,e,n){var r=t(33),i=t(87);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},{33:33,87:87}],188:[function(t,e,n){var r=t(33),s=t(116),f=t(4),l=t(110),i=1..toFixed,o=Math.floor,u=[0,0,0,0,0,0],p="Number.toFixed: incorrect invocation!",h=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*u[n],u[n]=r%1e7,r=o(r/1e7)},d=function(t){for(var e=6,n=0;0<=--e;)n+=u[e],u[e]=o(n/t),n=n%t*1e7},v=function(){for(var t=6,e="";0<=--t;)if(""!==e||0===t||0!==u[t]){var n=String(u[t]);e=""===e?n:e+l.call("0",7-n.length)+n}return e},g=function t(e,n,r){return 0===n?r:n%2==1?t(e,n-1,r*e):t(e*e,n/2,r)};r(r.P+r.F*(!!i&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!t(35)(function(){i.call({})})),"Number",{toFixed:function(t){var e,n,r,i,o=f(this,p),u=s(t),a="",c="0";if(u<0||20<u)throw RangeError(p);if(o!=o)return"NaN";if(o<=-1e21||1e21<=o)return String(o);if(o<0&&(a="-",o=-o),1e-21<o)if(n=(e=function(t){for(var e=0,n=t;4096<=n;)e+=12,n/=4096;for(;2<=n;)e+=1,n/=2;return e}(o*g(2,69,1))-69)<0?o*g(2,-e,1):o/g(2,e,1),n*=4503599627370496,0<(e=52-e)){for(h(0,n),r=u;7<=r;)h(1e7,0),r-=7;for(h(g(10,r,1),0),r=e-1;23<=r;)d(1<<23),r-=23;d(1<<r),h(1,1),d(2),c=v()}else h(0,n),h(1<<-e,0),c=v()+l.call("0",u);return c=0<u?a+((i=c.length)<=u?"0."+l.call("0",u-i)+c:c.slice(0,i-u)+"."+c.slice(i-u)):a+c}})},{110:110,116:116,33:33,35:35,4:4}],189:[function(t,e,n){var r=t(33),i=t(35),o=t(4),u=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(e):u.call(e,t)}})},{33:33,35:35,4:4}],190:[function(t,e,n){var r=t(33);r(r.S+r.F,"Object",{assign:t(70)})},{33:33,70:70}],191:[function(t,e,n){var r=t(33);r(r.S,"Object",{create:t(71)})},{33:33,71:71}],192:[function(t,e,n){var r=t(33);r(r.S+r.F*!t(29),"Object",{defineProperties:t(73)})},{29:29,33:33,73:73}],193:[function(t,e,n){var r=t(33);r(r.S+r.F*!t(29),"Object",{defineProperty:t(72).f})},{29:29,33:33,72:72}],194:[function(t,e,n){var r=t(51),i=t(66).onFreeze;t(83)("freeze",function(e){return function(t){return e&&r(t)?e(i(t)):t}})},{51:51,66:66,83:83}],195:[function(t,e,n){var r=t(117),i=t(75).f;t(83)("getOwnPropertyDescriptor",function(){return function(t,e){return i(r(t),e)}})},{117:117,75:75,83:83}],196:[function(t,e,n){t(83)("getOwnPropertyNames",function(){return t(76).f})},{76:76,83:83}],197:[function(t,e,n){var r=t(119),i=t(79);t(83)("getPrototypeOf",function(){return function(t){return i(r(t))}})},{119:119,79:79,83:83}],198:[function(t,e,n){var r=t(51);t(83)("isExtensible",function(e){return function(t){return!!r(t)&&(!e||e(t))}})},{51:51,83:83}],199:[function(t,e,n){var r=t(51);t(83)("isFrozen",function(e){return function(t){return!r(t)||!!e&&e(t)}})},{51:51,83:83}],200:[function(t,e,n){var r=t(51);t(83)("isSealed",function(e){return function(t){return!r(t)||!!e&&e(t)}})},{51:51,83:83}],201:[function(t,e,n){var r=t(33);r(r.S,"Object",{is:t(96)})},{33:33,96:96}],202:[function(t,e,n){var r=t(119),i=t(81);t(83)("keys",function(){return function(t){return i(r(t))}})},{119:119,81:81,83:83}],203:[function(t,e,n){var r=t(51),i=t(66).onFreeze;t(83)("preventExtensions",function(e){return function(t){return e&&r(t)?e(i(t)):t}})},{51:51,66:66,83:83}],204:[function(t,e,n){var r=t(51),i=t(66).onFreeze;t(83)("seal",function(e){return function(t){return e&&r(t)?e(i(t)):t}})},{51:51,66:66,83:83}],205:[function(t,e,n){var r=t(33);r(r.S,"Object",{setPrototypeOf:t(99).set})},{33:33,99:99}],206:[function(t,e,n){var r=t(17),i={};i[t(128)("toStringTag")]="z",i+""!="[object z]"&&t(94)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},{128:128,17:17,94:94}],207:[function(t,e,n){var r=t(33),i=t(86);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},{33:33,86:86}],208:[function(t,e,n){var r=t(33),i=t(87);r(r.G+r.F*(parseInt!=i),{parseInt:i})},{33:33,87:87}],209:[function(n,t,e){var r,i,o,u,a=n(60),c=n(40),s=n(25),f=n(17),l=n(33),p=n(51),h=n(3),d=n(6),v=n(39),g=n(104),y=n(113).set,m=n(68)(),x=n(69),b=n(90),w=n(91),S="Promise",E=c.TypeError,T=c.process,_=c[S],A="process"==f(T),N=function(){},j=i=x.f,C=!!function(){try{var t=_.resolve(1),e=(t.constructor={})[n(128)("species")]=function(t){t(N,N)};return(A||"function"==typeof PromiseRejectionEvent)&&t.then(N)instanceof e}catch(t){}}(),O=a?function(t,e){return t===e||t===_&&e===u}:function(t,e){return t===e},k=function(t){var e;return!(!p(t)||"function"!=typeof(e=t.then))&&e},M=function(s,n){if(!s._n){s._n=!0;var r=s._c;m(function(){for(var a=s._v,c=1==s._s,t=0,e=function(t){var e,n,r=c?t.ok:t.fail,i=t.resolve,o=t.reject,u=t.domain;try{r?(c||(2==s._h&&D(s),s._h=1),!0===r?e=a:(u&&u.enter(),e=r(a),u&&u.exit()),e===t.promise?o(E("Promise-chain cycle")):(n=k(e))?n.call(e,i,o):i(e)):o(a)}catch(t){o(t)}};r.length>t;)e(r[t++]);s._c=[],s._n=!1,n&&!s._h&&P(s)})}},P=function(o){y.call(c,function(){var t,e,n,r=o._v,i=L(o);if(i&&(t=b(function(){A?T.emit("unhandledRejection",r,o):(e=c.onunhandledrejection)?e({promise:o,reason:r}):(n=c.console)&&n.error&&n.error("Unhandled promise rejection",r)}),o._h=A||L(o)?2:1),o._a=void 0,i&&t.e)throw t.v})},L=function t(e){if(1==e._h)return!1;for(var n,r=e._a||e._c,i=0;r.length>i;)if((n=r[i++]).fail||!t(n.promise))return!1;return!0},D=function(e){y.call(c,function(){var t;A?T.emit("rejectionHandled",e):(t=c.onrejectionhandled)&&t({promise:e,reason:e._v})})},F=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),M(e,!0))},I=function t(n){var r,i=this;if(!i._d){i._d=!0,i=i._w||i;try{if(i===n)throw E("Promise can't be resolved itself");(r=k(n))?m(function(){var e={_w:i,_d:!1};try{r.call(n,s(t,e,1),s(F,e,1))}catch(t){F.call(e,t)}}):(i._v=n,i._s=1,M(i,!1))}catch(t){F.call({_w:i,_d:!1},t)}}};C||(_=function(t){d(this,_,S,"_h"),h(t),r.call(this);try{t(s(I,this,1),s(F,this,1))}catch(t){F.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(93)(_.prototype,{then:function(t,e){var n=j(g(this,_));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=A?T.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&M(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=s(I,t,1),this.reject=s(F,t,1)},x.f=j=function(t){return O(_,t)?new o(t):i(t)}),l(l.G+l.W+l.F*!C,{Promise:_}),n(101)(_,S),n(100)(S),u=n(23)[S],l(l.S+l.F*!C,S,{reject:function(t){var e=j(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(a||!C),S,{resolve:function(t){return t instanceof _&&O(t.constructor,this)?t:w(this,t)}}),l(l.S+l.F*!(C&&n(56)(function(t){_.all(t).catch(N)})),S,{all:function(t){var u=this,e=j(u),a=e.resolve,c=e.reject,n=b(function(){var r=[],i=0,o=1;v(t,!1,function(t){var e=i++,n=!1;r.push(void 0),o++,u.resolve(t).then(function(t){n||(n=!0,r[e]=t,--o||a(r))},c)}),--o||a(r)});return n.e&&c(n.v),e.promise},race:function(t){var e=this,n=j(e),r=n.reject,i=b(function(){v(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return i.e&&r(i.v),n.promise}})},{100:100,101:101,104:104,113:113,128:128,17:17,23:23,25:25,3:3,33:33,39:39,40:40,51:51,56:56,6:6,60:60,68:68,69:69,90:90,91:91,93:93}],210:[function(t,e,n){var r=t(33),o=t(3),u=t(7),a=(t(40).Reflect||{}).apply,c=Function.apply;r(r.S+r.F*!t(35)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=o(t),i=u(n);return a?a(r,e,i):c.call(r,e,i)}})},{3:3,33:33,35:35,40:40,7:7}],211:[function(t,e,n){var r=t(33),a=t(71),c=t(3),s=t(7),f=t(51),i=t(35),l=t(16),p=(t(40).Reflect||{}).construct,h=i(function(){function t(){}return!(p(function(){},[],t)instanceof t)}),d=!i(function(){p(function(){})});r(r.S+r.F*(h||d),"Reflect",{construct:function(t,e){c(t),s(e);var n=arguments.length<3?t:c(arguments[2]);if(d&&!h)return p(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(l.apply(t,r))}var i=n.prototype,o=a(f(i)?i:Object.prototype),u=Function.apply.call(t,o,e);return f(u)?u:o}})},{16:16,3:3,33:33,35:35,40:40,51:51,7:7,71:71}],212:[function(t,e,n){var r=t(72),i=t(33),o=t(7),u=t(120);i(i.S+i.F*t(35)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){o(t),e=u(e,!0),o(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},{120:120,33:33,35:35,7:7,72:72}],213:[function(t,e,n){var r=t(33),i=t(75).f,o=t(7);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=i(o(t),e);return!(n&&!n.configurable)&&delete t[e]}})},{33:33,7:7,75:75}],214:[function(t,e,n){var r=t(33),i=t(7),o=function(t){this._t=i(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};t(54)(o,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},{33:33,54:54,7:7}],215:[function(t,e,n){var r=t(75),i=t(33),o=t(7);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(o(t),e)}})},{33:33,7:7,75:75}],216:[function(t,e,n){var r=t(33),i=t(79),o=t(7);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},{33:33,7:7,79:79}],217:[function(t,e,n){var u=t(75),a=t(79),c=t(41),r=t(33),s=t(51),f=t(7);r(r.S,"Reflect",{get:function t(e,n){var r,i,o=arguments.length<3?e:arguments[2];return f(e)===o?e[n]:(r=u.f(e,n))?c(r,"value")?r.value:void 0!==r.get?r.get.call(o):void 0:s(i=a(e))?t(i,n,o):void 0}})},{33:33,41:41,51:51,7:7,75:75,79:79}],218:[function(t,e,n){var r=t(33);r(r.S,"Reflect",{has:function(t,e){return e in t}})},{33:33}],219:[function(t,e,n){var r=t(33),i=t(7),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},{33:33,7:7}],220:[function(t,e,n){var r=t(33);r(r.S,"Reflect",{ownKeys:t(85)})},{33:33,85:85}],221:[function(t,e,n){var r=t(33),i=t(7),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},{33:33,7:7}],222:[function(t,e,n){var r=t(33),i=t(99);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},{33:33,99:99}],223:[function(t,e,n){var c=t(72),s=t(75),f=t(79),l=t(41),r=t(33),p=t(92),h=t(7),d=t(51);r(r.S,"Reflect",{set:function t(e,n,r){var i,o,u=arguments.length<4?e:arguments[3],a=s.f(h(e),n);if(!a){if(d(o=f(e)))return t(o,n,r,u);a=p(0)}return l(a,"value")?!(!1===a.writable||!d(u)||((i=s.f(u,n)||p(0)).value=r,c.f(u,n,i),0)):void 0!==a.set&&(a.set.call(u,r),!0)}})},{33:33,41:41,51:51,7:7,72:72,75:75,79:79,92:92}],224:[function(t,e,n){var r=t(40),o=t(45),i=t(72).f,u=t(77).f,a=t(52),c=t(37),s=r.RegExp,f=s,l=s.prototype,p=/a/g,h=/a/g,d=new s(p)!==p;if(t(29)&&(!d||t(35)(function(){return h[t(128)("match")]=!1,s(p)!=p||s(h)==h||"/a/i"!=s(p,"i")}))){s=function(t,e){var n=this instanceof s,r=a(t),i=void 0===e;return!n&&r&&t.constructor===s&&i?t:o(d?new f(r&&!i?t.source:t,e):f((r=t instanceof s)?t.source:t,r&&i?c.call(t):e),n?this:l,s)};for(var v=function(e){e in s||i(s,e,{configurable:!0,get:function(){return f[e]},set:function(t){f[e]=t}})},g=u(f),y=0;g.length>y;)v(g[y++]);(l.constructor=s).prototype=l,t(94)(r,"RegExp",s)}t(100)("RegExp")},{100:100,128:128,29:29,35:35,37:37,40:40,45:45,52:52,72:72,77:77,94:94}],225:[function(t,e,n){t(29)&&"g"!=/./g.flags&&t(72).f(RegExp.prototype,"flags",{configurable:!0,get:t(37)})},{29:29,37:37,72:72}],226:[function(t,e,n){t(36)("match",1,function(r,i,t){return[function(t){var e=r(this),n=null==t?void 0:t[i];return void 0!==n?n.call(t,e):new RegExp(t)[i](String(e))},t]})},{36:36}],227:[function(t,e,n){t(36)("replace",2,function(i,o,u){return[function(t,e){var n=i(this),r=null==t?void 0:t[o];return void 0!==r?r.call(t,n,e):u.call(String(n),t,e)},u]})},{36:36}],228:[function(t,e,n){t(36)("search",1,function(r,i,t){return[function(t){var e=r(this),n=null==t?void 0:t[i];return void 0!==n?n.call(t,e):new RegExp(t)[i](String(e))},t]})},{36:36}],229:[function(e,t,n){e(36)("split",2,function(i,o,u){var h=e(52),d=u,v=[].push,t="split",g="length",y="lastIndex";if("c"=="abbc"[t](/(b)*/)[1]||4!="test"[t](/(?:)/,-1)[g]||2!="ab"[t](/(?:ab)*/)[g]||4!="."[t](/(.?)(.?)/)[g]||1<"."[t](/()()/)[g]||""[t](/.?/)[g]){var m=void 0===/()??/.exec("")[1];u=function(t,e){var n=String(this);if(void 0===t&&0===e)return[];if(!h(t))return d.call(n,t,e);var r,i,o,u,a,c=[],s=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),f=0,l=void 0===e?4294967295:e>>>0,p=new RegExp(t.source,s+"g");for(m||(r=new RegExp("^"+p.source+"$(?!\\s)",s));(i=p.exec(n))&&!(f<(o=i.index+i[0][g])&&(c.push(n.slice(f,i.index)),!m&&1<i[g]&&i[0].replace(r,function(){for(a=1;a<arguments[g]-2;a++)void 0===arguments[a]&&(i[a]=void 0)}),1<i[g]&&i.index<n[g]&&v.apply(c,i.slice(1)),u=i[0][g],f=o,c[g]>=l));)p[y]===i.index&&p[y]++;return f===n[g]?!u&&p.test("")||c.push(""):c.push(n.slice(f)),c[g]>l?c.slice(0,l):c}}else"0"[t](void 0,0)[g]&&(u=function(t,e){return void 0===t&&0===e?[]:d.call(this,t,e)});return[function(t,e){var n=i(this),r=null==t?void 0:t[o];return void 0!==r?r.call(t,n,e):u.call(String(n),t,e)},u]})},{36:36,52:52}],230:[function(e,t,n){e(225);var r=e(7),i=e(37),o=e(29),u="toString",a=/./[u],c=function(t){e(94)(RegExp.prototype,u,t,!0)};e(35)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?c(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):a.name!=u&&c(function(){return a.call(this)})},{225:225,29:29,35:35,37:37,7:7,94:94}],231:[function(t,e,n){var r=t(19),i=t(125);e.exports=t(22)("Set",function(t){return function(){return t(this,0<arguments.length?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},{125:125,19:19,22:22}],232:[function(t,e,n){t(108)("anchor",function(e){return function(t){return e(this,"a","name",t)}})},{108:108}],233:[function(t,e,n){t(108)("big",function(t){return function(){return t(this,"big","","")}})},{108:108}],234:[function(t,e,n){t(108)("blink",function(t){return function(){return t(this,"blink","","")}})},{108:108}],235:[function(t,e,n){t(108)("bold",function(t){return function(){return t(this,"b","","")}})},{108:108}],236:[function(t,e,n){var r=t(33),i=t(106)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},{106:106,33:33}],237:[function(t,e,n){var r=t(33),u=t(118),a=t(107),c="endsWith",s=""[c];r(r.P+r.F*t(34)(c),"String",{endsWith:function(t){var e=a(this,t,c),n=1<arguments.length?arguments[1]:void 0,r=u(e.length),i=void 0===n?r:Math.min(u(n),r),o=String(t);return s?s.call(e,o,i):e.slice(i-o.length,i)===o}})},{107:107,118:118,33:33,34:34}],238:[function(t,e,n){t(108)("fixed",function(t){return function(){return t(this,"tt","","")}})},{108:108}],239:[function(t,e,n){t(108)("fontcolor",function(e){return function(t){return e(this,"font","color",t)}})},{108:108}],240:[function(t,e,n){t(108)("fontsize",function(e){return function(t){return e(this,"font","size",t)}})},{108:108}],241:[function(t,e,n){var r=t(33),o=t(114),u=String.fromCharCode,i=String.fromCodePoint;r(r.S+r.F*(!!i&&1!=i.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,i=0;i<r;){if(e=+arguments[i++],o(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?u(e):u(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},{114:114,33:33}],242:[function(t,e,n){var r=t(33),i=t(107),o="includes";r(r.P+r.F*t(34)(o),"String",{includes:function(t){return!!~i(this,t,o).indexOf(t,1<arguments.length?arguments[1]:void 0)}})},{107:107,33:33,34:34}],243:[function(t,e,n){t(108)("italics",function(t){return function(){return t(this,"i","","")}})},{108:108}],244:[function(t,e,n){var r=t(106)(!0);t(55)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},{106:106,55:55}],245:[function(t,e,n){t(108)("link",function(e){return function(t){return e(this,"a","href",t)}})},{108:108}],246:[function(t,e,n){var r=t(33),u=t(117),a=t(118);r(r.S,"String",{raw:function(t){for(var e=u(t.raw),n=a(e.length),r=arguments.length,i=[],o=0;o<n;)i.push(String(e[o++])),o<r&&i.push(String(arguments[o]));return i.join("")}})},{117:117,118:118,33:33}],247:[function(t,e,n){var r=t(33);r(r.P,"String",{repeat:t(110)})},{110:110,33:33}],248:[function(t,e,n){t(108)("small",function(t){return function(){return t(this,"small","","")}})},{108:108}],249:[function(t,e,n){var r=t(33),i=t(118),o=t(107),u="startsWith",a=""[u];r(r.P+r.F*t(34)(u),"String",{startsWith:function(t){var e=o(this,t,u),n=i(Math.min(1<arguments.length?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},{107:107,118:118,33:33,34:34}],250:[function(t,e,n){t(108)("strike",function(t){return function(){return t(this,"strike","","")}})},{108:108}],251:[function(t,e,n){t(108)("sub",function(t){return function(){return t(this,"sub","","")}})},{108:108}],252:[function(t,e,n){t(108)("sup",function(t){return function(){return t(this,"sup","","")}})},{108:108}],253:[function(t,e,n){t(111)("trim",function(t){return function(){return t(this,3)}})},{111:111}],254:[function(t,e,n){var r=t(40),u=t(41),i=t(29),o=t(33),a=t(94),c=t(66).KEY,s=t(35),f=t(103),l=t(101),p=t(124),h=t(128),d=t(127),v=t(126),g=t(59),y=t(32),m=t(49),x=t(7),b=t(117),w=t(120),S=t(92),E=t(71),T=t(76),_=t(75),A=t(72),N=t(81),j=_.f,C=A.f,O=T.f,k=r.Symbol,M=r.JSON,P=M&&M.stringify,L="prototype",D=h("_hidden"),F=h("toPrimitive"),I={}.propertyIsEnumerable,R=f("symbol-registry"),q=f("symbols"),H=f("op-symbols"),W=Object[L],B="function"==typeof k,U=r.QObject,$=!U||!U[L]||!U[L].findChild,G=i&&s(function(){return 7!=E(C({},"a",{get:function(){return C(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=j(W,e);r&&delete W[e],C(t,e,n),r&&t!==W&&C(W,e,r)}:C,V=function(t){var e=q[t]=E(k[L]);return e._k=t,e},z=B&&"symbol"==_typeof(k.iterator)?function(t){return"symbol"==_typeof(t)}:function(t){return t instanceof k},X=function(t,e,n){return t===W&&X(H,e,n),x(t),e=w(e,!0),x(n),u(q,e)?(n.enumerable?(u(t,D)&&t[D][e]&&(t[D][e]=!1),n=E(n,{enumerable:S(0,!1)})):(u(t,D)||C(t,D,S(1,{})),t[D][e]=!0),G(t,e,n)):C(t,e,n)},Y=function(t,e){x(t);for(var n,r=y(e=b(e)),i=0,o=r.length;i<o;)X(t,n=r[i++],e[n]);return t},J=function(t){var e=I.call(this,t=w(t,!0));return!(this===W&&u(q,t)&&!u(H,t))&&(!(e||!u(this,t)||!u(q,t)||u(this,D)&&this[D][t])||e)},K=function(t,e){if(t=b(t),e=w(e,!0),t!==W||!u(q,e)||u(H,e)){var n=j(t,e);return!n||!u(q,e)||u(t,D)&&t[D][e]||(n.enumerable=!0),n}},Q=function(t){for(var e,n=O(b(t)),r=[],i=0;n.length>i;)u(q,e=n[i++])||e==D||e==c||r.push(e);return r},Z=function(t){for(var e,n=t===W,r=O(n?H:b(t)),i=[],o=0;r.length>o;)!u(q,e=r[o++])||n&&!u(W,e)||i.push(q[e]);return i};B||(a((k=function(){if(this instanceof k)throw TypeError("Symbol is not a constructor!");var n=p(0<arguments.length?arguments[0]:void 0);return i&&$&&G(W,n,{configurable:!0,set:function t(e){this===W&&t.call(H,e),u(this,D)&&u(this[D],n)&&(this[D][n]=!1),G(this,n,S(1,e))}}),V(n)})[L],"toString",function(){return this._k}),_.f=K,A.f=X,t(77).f=T.f=Q,t(82).f=J,t(78).f=Z,i&&!t(60)&&a(W,"propertyIsEnumerable",J,!0),d.f=function(t){return V(h(t))}),o(o.G+o.W+o.F*!B,{Symbol:k});for(var tt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),et=0;tt.length>et;)h(tt[et++]);for(var nt=N(h.store),rt=0;nt.length>rt;)v(nt[rt++]);o(o.S+o.F*!B,"Symbol",{for:function(t){return u(R,t+="")?R[t]:R[t]=k(t)},keyFor:function(t){if(z(t))return g(R,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){$=!0},useSimple:function(){$=!1}}),o(o.S+o.F*!B,"Object",{create:function(t,e){return void 0===e?E(t):Y(E(t),e)},defineProperty:X,defineProperties:Y,getOwnPropertyDescriptor:K,getOwnPropertyNames:Q,getOwnPropertySymbols:Z}),M&&o(o.S+o.F*(!B||s(function(){var t=k();return"[null]"!=P([t])||"{}"!=P({a:t})||"{}"!=P(Object(t))})),"JSON",{stringify:function(t){if(void 0!==t&&!z(t)){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);return"function"==typeof(e=r[1])&&(n=e),!n&&m(e)||(e=function(t,e){if(n&&(e=n.call(this,t,e)),!z(e))return e}),r[1]=e,P.apply(M,r)}}}),k[L][F]||t(42)(k[L],F,k[L].valueOf),l(k,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},{101:101,103:103,117:117,120:120,124:124,126:126,127:127,128:128,29:29,32:32,33:33,35:35,40:40,41:41,42:42,49:49,59:59,60:60,66:66,7:7,71:71,72:72,75:75,76:76,77:77,78:78,81:81,82:82,92:92,94:94}],255:[function(t,e,n){var r=t(33),i=t(123),o=t(122),s=t(7),f=t(114),l=t(118),u=t(51),a=t(40).ArrayBuffer,p=t(104),h=o.ArrayBuffer,d=o.DataView,c=i.ABV&&a.isView,v=h.prototype.slice,g=i.VIEW,y="ArrayBuffer";r(r.G+r.W+r.F*(a!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,y,{isView:function(t){return c&&c(t)||u(t)&&g in t}}),r(r.P+r.U+r.F*t(35)(function(){return!new h(2).slice(1,void 0).byteLength}),y,{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(s(this),t);for(var n=s(this).byteLength,r=f(t,n),i=f(void 0===e?n:e,n),o=new(p(this,h))(l(i-r)),u=new d(this),a=new d(o),c=0;r<i;)a.setUint8(c++,u.getUint8(r++));return o}}),t(100)(y)},{100:100,104:104,114:114,118:118,122:122,123:123,33:33,35:35,40:40,51:51,7:7}],256:[function(t,e,n){var r=t(33);r(r.G+r.W+r.F*!t(123).ABV,{DataView:t(122).DataView})},{122:122,123:123,33:33}],257:[function(t,e,n){t(121)("Float32",4,function(r){return function(t,e,n){return r(this,t,e,n)}})},{121:121}],258:[function(t,e,n){t(121)("Float64",8,function(r){return function(t,e,n){return r(this,t,e,n)}})},{121:121}],259:[function(t,e,n){t(121)("Int16",2,function(r){return function(t,e,n){return r(this,t,e,n)}})},{121:121}],260:[function(t,e,n){t(121)("Int32",4,function(r){return function(t,e,n){return r(this,t,e,n)}})},{121:121}],261:[function(t,e,n){t(121)("Int8",1,function(r){return function(t,e,n){return r(this,t,e,n)}})},{121:121}],262:[function(t,e,n){t(121)("Uint16",2,function(r){return function(t,e,n){return r(this,t,e,n)}})},{121:121}],263:[function(t,e,n){t(121)("Uint32",4,function(r){return function(t,e,n){return r(this,t,e,n)}})},{121:121}],264:[function(t,e,n){t(121)("Uint8",1,function(r){return function(t,e,n){return r(this,t,e,n)}})},{121:121}],265:[function(t,e,n){t(121)("Uint8",1,function(r){return function(t,e,n){return r(this,t,e,n)}},!0)},{121:121}],266:[function(t,e,n){var o,r=t(12)(0),u=t(94),i=t(66),a=t(70),c=t(21),s=t(51),f=t(35),l=t(125),p="WeakMap",h=i.getWeak,d=Object.isExtensible,v=c.ufstore,g={},y=function(t){return function(){return t(this,0<arguments.length?arguments[0]:void 0)}},m={get:function(t){if(s(t)){var e=h(t);return!0===e?v(l(this,p)).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(l(this,p),t,e)}},x=e.exports=t(22)(p,y,m,c,!0,!0);f(function(){return 7!=(new x).set((Object.freeze||Object)(g),7).get(g)})&&(a((o=c.getConstructor(y,p)).prototype,m),i.NEED=!0,r(["delete","has","get","set"],function(r){var t=x.prototype,i=t[r];u(t,r,function(t,e){if(!s(t)||d(t))return i.call(this,t,e);this._f||(this._f=new o);var n=this._f[r](t,e);return"set"==r?this:n})}))},{12:12,125:125,21:21,22:22,35:35,51:51,66:66,70:70,94:94}],267:[function(t,e,n){var r=t(21),i=t(125),o="WeakSet";t(22)(o,function(t){return function(){return t(this,0<arguments.length?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,o),t,!0)}},r,!1,!0)},{125:125,21:21,22:22}],268:[function(t,e,n){var r=t(33),i=t(38),o=t(119),u=t(118),a=t(3),c=t(15);r(r.P,"Array",{flatMap:function(t){var e,n,r=o(this);return a(t),e=u(r.length),n=c(r,0),i(n,r,r,e,0,1,t,arguments[1]),n}}),t(5)("flatMap")},{118:118,119:119,15:15,3:3,33:33,38:38,5:5}],269:[function(t,e,n){var r=t(33),i=t(38),o=t(119),u=t(118),a=t(116),c=t(15);r(r.P,"Array",{flatten:function(){var t=arguments[0],e=o(this),n=u(e.length),r=c(e,0);return i(r,e,e,n,0,void 0===t?1:a(t)),r}}),t(5)("flatten")},{116:116,118:118,119:119,15:15,33:33,38:38,5:5}],270:[function(t,e,n){var r=t(33),i=t(11)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,1<arguments.length?arguments[1]:void 0)}}),t(5)("includes")},{11:11,33:33,5:5}],271:[function(t,e,n){var r=t(33),i=t(68)(),o=t(40).process,u="process"==t(18)(o);r(r.G,{asap:function(t){var e=u&&o.domain;i(e?e.bind(t):t)}})},{18:18,33:33,40:40,68:68}],272:[function(t,e,n){var r=t(33),i=t(18);r(r.S,"Error",{isError:function(t){return"Error"===i(t)}})},{18:18,33:33}],273:[function(t,e,n){var r=t(33);r(r.G,{global:t(40)})},{33:33,40:40}],274:[function(t,e,n){t(97)("Map")},{97:97}],275:[function(t,e,n){t(98)("Map")},{98:98}],276:[function(t,e,n){var r=t(33);r(r.P+r.R,"Map",{toJSON:t(20)("Map")})},{20:20,33:33}],277:[function(t,e,n){var r=t(33);r(r.S,"Math",{clamp:function(t,e,n){return Math.min(n,Math.max(e,t))}})},{33:33}],278:[function(t,e,n){var r=t(33);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},{33:33}],279:[function(t,e,n){var r=t(33),i=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*i}})},{33:33}],280:[function(t,e,n){var r=t(33),o=t(64),u=t(62);r(r.S,"Math",{fscale:function(t,e,n,r,i){return u(o(t,e,n,r,i))}})},{33:33,62:62,64:64}],281:[function(t,e,n){var r=t(33);r(r.S,"Math",{iaddh:function(t,e,n,r){var i=t>>>0,o=n>>>0;return(e>>>0)+(r>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},{33:33}],282:[function(t,e,n){var r=t(33);r(r.S,"Math",{imulh:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r,u=n>>16,a=r>>16,c=(u*o>>>0)+(i*o>>>16);return u*a+(c>>16)+((i*a>>>0)+(65535&c)>>16)}})},{33:33}],283:[function(t,e,n){var r=t(33);r(r.S,"Math",{isubh:function(t,e,n,r){var i=t>>>0,o=n>>>0;return(e>>>0)-(r>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},{33:33}],284:[function(t,e,n){var r=t(33);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},{33:33}],285:[function(t,e,n){var r=t(33),i=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*i}})},{33:33}],286:[function(t,e,n){var r=t(33);r(r.S,"Math",{scale:t(64)})},{33:33,64:64}],287:[function(t,e,n){var r=t(33);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:0<t}})},{33:33}],288:[function(t,e,n){var r=t(33);r(r.S,"Math",{umulh:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r,u=n>>>16,a=r>>>16,c=(u*o>>>0)+(i*o>>>16);return u*a+(c>>>16)+((i*a>>>0)+(65535&c)>>>16)}})},{33:33}],289:[function(t,e,n){var r=t(33),i=t(119),o=t(3),u=t(72);t(29)&&r(r.P+t(74),"Object",{__defineGetter__:function(t,e){u.f(i(this),t,{get:o(e),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],290:[function(t,e,n){var r=t(33),i=t(119),o=t(3),u=t(72);t(29)&&r(r.P+t(74),"Object",{__defineSetter__:function(t,e){u.f(i(this),t,{set:o(e),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],291:[function(t,e,n){var r=t(33),i=t(84)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},{33:33,84:84}],292:[function(t,e,n){var r=t(33),c=t(85),s=t(117),f=t(75),l=t(24);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=s(t),i=f.f,o=c(r),u={},a=0;o.length>a;)void 0!==(n=i(r,e=o[a++]))&&l(u,e,n);return u}})},{117:117,24:24,33:33,75:75,85:85}],293:[function(t,e,n){var r=t(33),i=t(119),o=t(120),u=t(79),a=t(75).f;t(29)&&r(r.P+t(74),"Object",{__lookupGetter__:function(t){var e,n=i(this),r=o(t,!0);do{if(e=a(n,r))return e.get}while(n=u(n))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],294:[function(t,e,n){var r=t(33),i=t(119),o=t(120),u=t(79),a=t(75).f;t(29)&&r(r.P+t(74),"Object",{__lookupSetter__:function(t){var e,n=i(this),r=o(t,!0);do{if(e=a(n,r))return e.set}while(n=u(n))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],295:[function(t,e,n){var r=t(33),i=t(84)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},{33:33,84:84}],296:[function(t,e,n){var r=t(33),o=t(40),u=t(23),i=t(68)(),a=t(128)("observable"),c=t(3),s=t(7),f=t(6),l=t(93),p=t(42),h=t(39),d=h.RETURN,v=function(t){return null==t?void 0:c(t)},g=function(t){var e=t._c;e&&(t._c=void 0,e())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,g(t))},x=function(e,t){s(e),this._c=void 0,this._o=e,e=new b(this);try{var n=t(e),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:c(n),this._c=n)}catch(t){return void e.error(t)}y(this)&&g(this)};x.prototype=l({},{unsubscribe:function(){m(this)}});var b=function(t){this._s=t};b.prototype=l({},{next:function(t){var e=this._s;if(!y(e)){var n=e._o;try{var r=v(n.next);if(r)return r.call(n,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(y(e))throw t;var n=e._o;e._o=void 0;try{var r=v(n.error);if(!r)throw t;t=r.call(n,t)}catch(t){try{g(e)}finally{throw t}}return g(e),t},complete:function(t){var e=this._s;if(!y(e)){var n=e._o;e._o=void 0;try{var r=v(n.complete);t=r?r.call(n,t):void 0}catch(t){try{g(e)}finally{throw t}}return g(e),t}}});var w=function(t){f(this,w,"Observable","_f")._f=c(t)};l(w.prototype,{subscribe:function(t){return new x(t,this._f)},forEach:function(r){var i=this;return new(u.Promise||o.Promise)(function(t,e){c(r);var n=i.subscribe({next:function(t){try{return r(t)}catch(t){e(t),n.unsubscribe()}},error:e,complete:t})})}}),l(w,{from:function(t){var e="function"==typeof this?this:w,n=v(s(t)[a]);if(n){var r=s(n.call(t));return r.constructor===e?r:new e(function(t){return r.subscribe(t)})}return new e(function(e){var n=!1;return i(function(){if(!n){try{if(h(t,!1,function(t){if(e.next(t),n)return d})===d)return}catch(t){if(n)throw t;return void e.error(t)}e.complete()}}),function(){n=!0}})},of:function(){for(var t=0,e=arguments.length,r=Array(e);t<e;)r[t]=arguments[t++];return new("function"==typeof this?this:w)(function(e){var n=!1;return i(function(){if(!n){for(var t=0;t<r.length;++t)if(e.next(r[t]),n)return;e.complete()}}),function(){n=!0}})}}),p(w.prototype,a,function(){return this}),r(r.G,{Observable:w}),t(100)("Observable")},{100:100,128:128,23:23,3:3,33:33,39:39,40:40,42:42,6:6,68:68,7:7,93:93}],297:[function(t,e,n){var r=t(33),i=t(23),o=t(40),u=t(104),a=t(91);r(r.P+r.R,"Promise",{finally:function(e){var n=u(this,i.Promise||o.Promise),t="function"==typeof e;return this.then(t?function(t){return a(n,e()).then(function(){return t})}:e,t?function(t){return a(n,e()).then(function(){throw t})}:e)}})},{104:104,23:23,33:33,40:40,91:91}],298:[function(t,e,n){var r=t(33),i=t(69),o=t(90);r(r.S,"Promise",{try:function(t){var e=i.f(this),n=o(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},{33:33,69:69,90:90}],299:[function(t,e,n){var r=t(67),i=t(7),o=r.key,u=r.set;r.exp({defineMetadata:function(t,e,n,r){u(t,e,i(n),o(r))}})},{67:67,7:7}],300:[function(t,e,n){var r=t(67),o=t(7),u=r.key,a=r.map,c=r.store;r.exp({deleteMetadata:function(t,e){var n=arguments.length<3?void 0:u(arguments[2]),r=a(o(e),n,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var i=c.get(e);return i.delete(n),!!i.size||c.delete(e)}})},{67:67,7:7}],301:[function(t,e,n){var u=t(231),a=t(10),r=t(67),i=t(7),c=t(79),s=r.keys,o=r.key;r.exp({getMetadataKeys:function(t){return function t(e,n){var r=s(e,n),i=c(e);if(null===i)return r;var o=t(i,n);return o.length?r.length?a(new u(r.concat(o))):o:r}(i(t),arguments.length<2?void 0:o(arguments[1]))}})},{10:10,231:231,67:67,7:7,79:79}],302:[function(t,e,n){var r=t(67),i=t(7),o=t(79),u=r.has,a=r.get,c=r.key;r.exp({getMetadata:function(t,e){return function t(e,n,r){if(u(e,n,r))return a(e,n,r);var i=o(n);return null!==i?t(e,i,r):void 0}(t,i(e),arguments.length<3?void 0:c(arguments[2]))}})},{67:67,7:7,79:79}],303:[function(t,e,n){var r=t(67),i=t(7),o=r.keys,u=r.key;r.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},{67:67,7:7}],304:[function(t,e,n){var r=t(67),i=t(7),o=r.get,u=r.key;r.exp({getOwnMetadata:function(t,e){return o(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],305:[function(t,e,n){var r=t(67),i=t(7),o=t(79),u=r.has,a=r.key;r.exp({hasMetadata:function(t,e){return function t(e,n,r){if(u(e,n,r))return!0;var i=o(n);return null!==i&&t(e,i,r)}(t,i(e),arguments.length<3?void 0:a(arguments[2]))}})},{67:67,7:7,79:79}],306:[function(t,e,n){var r=t(67),i=t(7),o=r.has,u=r.key;r.exp({hasOwnMetadata:function(t,e){return o(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],307:[function(t,e,n){var r=t(67),i=t(7),o=t(3),u=r.key,a=r.set;r.exp({metadata:function(n,r){return function(t,e){a(n,r,(void 0!==e?i:o)(t),u(e))}}})},{3:3,67:67,7:7}],308:[function(t,e,n){t(97)("Set")},{97:97}],309:[function(t,e,n){t(98)("Set")},{98:98}],310:[function(t,e,n){var r=t(33);r(r.P+r.R,"Set",{toJSON:t(20)("Set")})},{20:20,33:33}],311:[function(t,e,n){var r=t(33),i=t(106)(!0);r(r.P,"String",{at:function(t){return i(this,t)}})},{106:106,33:33}],312:[function(t,e,n){var r=t(33),i=t(28),o=t(118),u=t(52),a=t(37),c=RegExp.prototype,s=function(t,e){this._r=t,this._s=e};t(54)(s,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var e=String(this),n="flags"in c?String(t.flags):a.call(t),r=new RegExp(t.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=o(t.lastIndex),new s(r,e)}})},{118:118,28:28,33:33,37:37,52:52,54:54}],313:[function(t,e,n){var r=t(33),i=t(109);r(r.P,"String",{padEnd:function(t){return i(this,t,1<arguments.length?arguments[1]:void 0,!1)}})},{109:109,33:33}],314:[function(t,e,n){var r=t(33),i=t(109);r(r.P,"String",{padStart:function(t){return i(this,t,1<arguments.length?arguments[1]:void 0,!0)}})},{109:109,33:33}],315:[function(t,e,n){t(111)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},{111:111}],316:[function(t,e,n){t(111)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},{111:111}],317:[function(t,e,n){t(126)("asyncIterator")},{126:126}],318:[function(t,e,n){t(126)("observable")},{126:126}],319:[function(t,e,n){var r=t(33);r(r.S,"System",{global:t(40)})},{33:33,40:40}],320:[function(t,e,n){t(97)("WeakMap")},{97:97}],321:[function(t,e,n){t(98)("WeakMap")},{98:98}],322:[function(t,e,n){t(97)("WeakSet")},{97:97}],323:[function(t,e,n){t(98)("WeakSet")},{98:98}],324:[function(t,e,n){for(var r=t(141),i=t(81),o=t(94),u=t(40),a=t(42),c=t(58),s=t(128),f=s("iterator"),l=s("toStringTag"),p=c.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(h),v=0;v<d.length;v++){var g,y=d[v],m=h[y],x=u[y],b=x&&x.prototype;if(b&&(b[f]||a(b,f,p),b[l]||a(b,l,y),c[y]=p,m))for(g in r)b[g]||o(b,g,r[g],!0)}},{128:128,141:141,40:40,42:42,58:58,81:81,94:94}],325:[function(t,e,n){var r=t(33),i=t(113);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},{113:113,33:33}],326:[function(t,e,n){var r=t(40),i=t(33),o=t(46),u=t(88),a=r.navigator,c=!!a&&/MSIE .\./.test(a.userAgent),s=function(n){return c?function(t,e){return n(o(u,[].slice.call(arguments,2),"function"==typeof t?t:Function(t)),e)}:n};i(i.G+i.B+i.F*c,{setTimeout:s(r.setTimeout),setInterval:s(r.setInterval)})},{33:33,40:40,46:46,88:88}],327:[function(t,e,n){t(254),t(191),t(193),t(192),t(195),t(197),t(202),t(196),t(194),t(204),t(203),t(199),t(200),t(198),t(190),t(201),t(205),t(206),t(157),t(159),t(158),t(208),t(207),t(178),t(188),t(189),t(179),t(180),t(181),t(182),t(183),t(184),t(185),t(186),t(187),t(161),t(162),t(163),t(164),t(165),t(166),t(167),t(168),t(169),t(170),t(171),t(172),t(173),t(174),t(175),t(176),t(177),t(241),t(246),t(253),t(244),t(236),t(237),t(242),t(247),t(249),t(232),t(233),t(234),t(235),t(238),t(239),t(240),t(243),t(245),t(248),t(250),t(251),t(252),t(152),t(154),t(153),t(156),t(155),t(140),t(138),t(145),t(142),t(148),t(150),t(137),t(144),t(134),t(149),t(132),t(147),t(146),t(139),t(143),t(131),t(133),t(136),t(135),t(151),t(141),t(224),t(230),t(225),t(226),t(227),t(228),t(229),t(209),t(160),t(231),t(266),t(267),t(255),t(256),t(261),t(264),t(265),t(259),t(262),t(260),t(263),t(257),t(258),t(210),t(211),t(212),t(213),t(214),t(217),t(215),t(216),t(218),t(219),t(220),t(221),t(223),t(222),t(270),t(268),t(269),t(311),t(314),t(313),t(315),t(316),t(312),t(317),t(318),t(292),t(295),t(291),t(289),t(290),t(293),t(294),t(276),t(310),t(275),t(309),t(321),t(323),t(274),t(308),t(320),t(322),t(273),t(319),t(272),t(277),t(278),t(279),t(280),t(281),t(283),t(282),t(284),t(285),t(286),t(288),t(287),t(297),t(298),t(299),t(300),t(302),t(301),t(304),t(303),t(305),t(306),t(307),t(271),t(296),t(326),t(325),t(324),e.exports=t(23)},{131:131,132:132,133:133,134:134,135:135,136:136,137:137,138:138,139:139,140:140,141:141,142:142,143:143,144:144,145:145,146:146,147:147,148:148,149:149,150:150,151:151,152:152,153:153,154:154,155:155,156:156,157:157,158:158,159:159,160:160,161:161,162:162,163:163,164:164,165:165,166:166,167:167,168:168,169:169,170:170,171:171,172:172,173:173,174:174,175:175,176:176,177:177,178:178,179:179,180:180,181:181,182:182,183:183,184:184,185:185,186:186,187:187,188:188,189:189,190:190,191:191,192:192,193:193,194:194,195:195,196:196,197:197,198:198,199:199,200:200,201:201,202:202,203:203,204:204,205:205,206:206,207:207,208:208,209:209,210:210,211:211,212:212,213:213,214:214,215:215,216:216,217:217,218:218,219:219,220:220,221:221,222:222,223:223,224:224,225:225,226:226,227:227,228:228,229:229,23:23,230:230,231:231,232:232,233:233,234:234,235:235,236:236,237:237,238:238,239:239,240:240,241:241,242:242,243:243,244:244,245:245,246:246,247:247,248:248,249:249,250:250,251:251,252:252,253:253,254:254,255:255,256:256,257:257,258:258,259:259,260:260,261:261,262:262,263:263,264:264,265:265,266:266,267:267,268:268,269:269,270:270,271:271,272:272,273:273,274:274,275:275,276:276,277:277,278:278,279:279,280:280,281:281,282:282,283:283,284:284,285:285,286:286,287:287,288:288,289:289,290:290,291:291,292:292,293:293,294:294,295:295,296:296,297:297,298:298,299:299,300:300,301:301,302:302,303:303,304:304,305:305,306:306,307:307,308:308,309:309,310:310,311:311,312:312,313:313,314:314,315:315,316:316,317:317,318:318,319:319,320:320,321:321,322:322,323:323,324:324,325:325,326:326}],328:[function(t,M,e){(function(t){!function(t){var c,e=Object.prototype,s=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},i=n.iterator||"@@iterator",r=n.asyncIterator||"@@asyncIterator",o=n.toStringTag||"@@toStringTag",u="object"===_typeof(M),a=t.regeneratorRuntime;if(a)u&&(M.exports=a);else{(a=t.regeneratorRuntime=u?M.exports:{}).wrap=x;var l="suspendedStart",p="suspendedYield",h="executing",d="completed",v={},f={};f[i]=function(){return this};var g=Object.getPrototypeOf,y=g&&g(g(O([])));y&&y!==e&&s.call(y,i)&&(f=y);var m=E.prototype=w.prototype=Object.create(f);S.prototype=m.constructor=E,E.constructor=S,E[o]=S.displayName="GeneratorFunction",a.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===S||"GeneratorFunction"===(e.displayName||e.name))},a.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,o in t||(t[o]="GeneratorFunction")),t.prototype=Object.create(m),t},a.awrap=function(t){return{__await:t}},T(_.prototype),_.prototype[r]=function(){return this},a.AsyncIterator=_,a.async=function(t,e,n,r){var i=new _(x(t,e,n,r));return a.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},T(m),m[o]="Generator",m[i]=function(){return this},m.toString=function(){return"[object Generator]"},a.keys=function(n){var r=[];for(var t in n)r.push(t);return r.reverse(),function t(){for(;r.length;){var e=r.pop();if(e in n)return t.value=e,t.done=!1,t}return t.done=!0,t}},a.values=O,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&s.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=c)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var r=this;function t(t,e){return o.type="throw",o.arg=n,r.next=t,e&&(r.method="next",r.arg=c),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var i=this.tryEntries[e],o=i.completion;if("root"===i.tryLoc)return t("end");if(i.tryLoc<=this.prev){var u=s.call(i,"catchLoc"),a=s.call(i,"finallyLoc");if(u&&a){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;0<=n;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&s.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=t,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),j(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;j(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:O(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=c),v}}}function x(t,e,n,r){var o,u,a,c,i=e&&e.prototype instanceof w?e:w,s=Object.create(i.prototype),f=new C(r||[]);return s._invoke=(o=t,u=n,a=f,c=l,function(t,e){if(c===h)throw new Error("Generator is already running");if(c===d){if("throw"===t)throw e;return k()}for(a.method=t,a.arg=e;;){var n=a.delegate;if(n){var r=A(n,a);if(r){if(r===v)continue;return r}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(c===l)throw c=d,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);c=h;var i=b(o,u,a);if("normal"===i.type){if(c=a.done?d:p,i.arg===v)continue;return{value:i.arg,done:a.done}}"throw"===i.type&&(c=d,a.method="throw",a.arg=i.arg)}}),s}function b(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function w(){}function S(){}function E(){}function T(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function _(a){function c(t,e,n,r){var i=b(a[t],a,e);if("throw"!==i.type){var o=i.arg,u=o.value;return u&&"object"===_typeof(u)&&s.call(u,"__await")?Promise.resolve(u.__await).then(function(t){c("next",t,n,r)},function(t){c("throw",t,n,r)}):Promise.resolve(u).then(function(t){o.value=t,n(o)},r)}r(i.arg)}var e;"object"===_typeof(t.process)&&t.process.domain&&(c=t.process.domain.bind(c)),this._invoke=function(n,r){function t(){return new Promise(function(t,e){c(n,r,t,e)})}return e=e?e.then(t,t):t()}}function A(t,e){var n=t.iterator[e.method];if(n===c){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=c,A(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var r=b(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,v;var i=r.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=c),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function N(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(N,this),this.reset(!0)}function O(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,r=function t(){for(;++n<e.length;)if(s.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=c,t.done=!0,t};return r.next=r}}return{next:k}}function k(){return{value:c,done:!0}}}("object"===_typeof(t)?t:"object"===("undefined"==typeof window?"undefined":_typeof(window))?window:"object"===("undefined"==typeof self?"undefined":_typeof(self))?self:this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1]),function(t,e){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:void 0,function(E,t){var e=[],T=E.document,r=Object.getPrototypeOf,a=e.slice,v=e.concat,c=e.push,i=e.indexOf,n={},o=n.toString,g=n.hasOwnProperty,u=g.toString,s=u.call(Object),y={},m=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},x=function(t){return null!=t&&t===t.window},f={type:!0,src:!0,noModule:!0};function b(t,e,n){var r,i=(e=e||T).createElement("script");if(i.text=t,n)for(r in f)n[r]&&(i[r]=n[r]);e.head.appendChild(i).parentNode.removeChild(i)}function w(t){return null==t?t+"":"object"===_typeof(t)||"function"==typeof t?n[o.call(t)]||"object":_typeof(t)}var _=function t(e,n){return new t.fn.init(e,n)},l=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function p(t){var e=!!t&&"length"in t&&t.length,n=w(t);return!m(t)&&!x(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}_.fn=_.prototype={jquery:"3.3.1",constructor:_,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=_.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return _.each(this,t)},map:function(n){return this.pushStack(_.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(0<=n&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:e.sort,splice:e.splice},_.extend=_.fn.extend=function(){var t,e,n,r,i,o,u=arguments[0]||{},a=1,c=arguments.length,s=!1;for("boolean"==typeof u&&(s=u,u=arguments[a]||{},a++),"object"===_typeof(u)||m(u)||(u={}),a===c&&(u=this,a--);a<c;a++)if(null!=(t=arguments[a]))for(e in t)n=u[e],u!==(r=t[e])&&(s&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(o=i?(i=!1,n&&Array.isArray(n)?n:[]):n&&_.isPlainObject(n)?n:{},u[e]=_.extend(s,o,r)):void 0!==r&&(u[e]=r));return u},_.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==o.call(t))&&(!(e=r(t))||"function"==typeof(n=g.call(e,"constructor")&&e.constructor)&&u.call(n)===s)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){b(t)},each:function(t,e){var n,r=0;if(p(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(l,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(p(Object(t))?_.merge(n,"string"==typeof t?[t]:t):c.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:i.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,u=!n;i<o;i++)!e(t[i],i)!==u&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,u=[];if(p(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&u.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&u.push(i);return v.apply([],u)},guid:1,support:y}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=e[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){n["[object "+e+"]"]=e.toLowerCase()});var h=function(n){var t,h,b,o,i,d,l,v,w,c,s,S,E,u,T,g,a,f,y,_="sizzle"+1*new Date,m=n.document,A=0,r=0,p=ut(),x=ut(),N=ut(),j=function(t,e){return t===e&&(s=!0),0},C={}.hasOwnProperty,e=[],O=e.pop,k=e.push,M=e.push,P=e.slice,L=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},D="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+F+"*("+I+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+F+"*\\]",q=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",H=new RegExp(F+"+","g"),W=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),B=new RegExp("^"+F+"*,"+F+"*"),U=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),$=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),G=new RegExp(q),V=new RegExp("^"+I+"$"),z={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+D+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),tt=function(t,e,n){var r="0x"+e-65536;return r!=r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){S()},it=mt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{M.apply(e=P.call(m.childNodes),m.childNodes),e[m.childNodes.length].nodeType}catch(t){M={apply:e.length?function(t,e){k.apply(t,P.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function ot(t,e,n,r){var i,o,u,a,c,s,f,l=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&((e?e.ownerDocument||e:m)!==E&&S(e),e=e||E,T)){if(11!==p&&(c=K.exec(t)))if(i=c[1]){if(9===p){if(!(u=e.getElementById(i)))return n;if(u.id===i)return n.push(u),n}else if(l&&(u=l.getElementById(i))&&y(e,u)&&u.id===i)return n.push(u),n}else{if(c[2])return M.apply(n,e.getElementsByTagName(t)),n;if((i=c[3])&&h.getElementsByClassName&&e.getElementsByClassName)return M.apply(n,e.getElementsByClassName(i)),n}if(h.qsa&&!N[t+" "]&&(!g||!g.test(t))){if(1!==p)l=e,f=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(et,nt):e.setAttribute("id",a=_),o=(s=d(t)).length;o--;)s[o]="#"+a+" "+yt(s[o]);f=s.join(","),l=Q.test(t)&&vt(e.parentNode)||e}if(f)try{return M.apply(n,l.querySelectorAll(f)),n}catch(t){}finally{a===_&&e.removeAttribute("id")}}}return v(t.replace(W,"$1"),e,n,r)}function ut(){var r=[];return function t(e,n){return r.push(e+" ")>b.cacheLength&&delete t[r.shift()],t[e+" "]=n}}function at(t){return t[_]=!0,t}function ct(t){var e=E.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function st(t,e){for(var n=t.split("|"),r=n.length;r--;)b.attrHandle[n[r]]=e}function ft(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function lt(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pt(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}function ht(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&it(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function dt(u){return at(function(o){return o=+o,at(function(t,e){for(var n,r=u([],t.length,o),i=r.length;i--;)t[n=r[i]]&&(t[n]=!(e[n]=t[n]))})})}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in h=ot.support={},i=ot.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},S=ot.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:m;return r!==E&&9===r.nodeType&&r.documentElement&&(u=(E=r).documentElement,T=!i(E),m!==E&&(n=E.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",rt,!1):n.attachEvent&&n.attachEvent("onunload",rt)),h.attributes=ct(function(t){return t.className="i",!t.getAttribute("className")}),h.getElementsByTagName=ct(function(t){return t.appendChild(E.createComment("")),!t.getElementsByTagName("*").length}),h.getElementsByClassName=J.test(E.getElementsByClassName),h.getById=ct(function(t){return u.appendChild(t).id=_,!E.getElementsByName||!E.getElementsByName(_).length}),h.getById?(b.filter.ID=function(t){var e=t.replace(Z,tt);return function(t){return t.getAttribute("id")===e}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n=e.getElementById(t);return n?[n]:[]}}):(b.filter.ID=function(t){var n=t.replace(Z,tt);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===n}},b.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),b.find.TAG=h.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):h.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"!==t)return o;for(;n=o[i++];)1===n.nodeType&&r.push(n);return r},b.find.CLASS=h.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},a=[],g=[],(h.qsa=J.test(E.querySelectorAll))&&(ct(function(t){u.appendChild(t).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+F+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+F+"*(?:value|"+D+")"),t.querySelectorAll("[id~="+_+"-]").length||g.push("~="),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]")}),ct(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=E.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+F+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),u.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")})),(h.matchesSelector=J.test(f=u.matches||u.webkitMatchesSelector||u.mozMatchesSelector||u.oMatchesSelector||u.msMatchesSelector))&&ct(function(t){h.disconnectedMatch=f.call(t,"*"),f.call(t,"[s!='']:x"),a.push("!=",q)}),g=g.length&&new RegExp(g.join("|")),a=a.length&&new RegExp(a.join("|")),e=J.test(u.compareDocumentPosition),y=e||J.test(u.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},j=e?function(t,e){if(t===e)return s=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!h.sortDetached&&e.compareDocumentPosition(t)===n?t===E||t.ownerDocument===m&&y(m,t)?-1:e===E||e.ownerDocument===m&&y(m,e)?1:c?L(c,t)-L(c,e):0:4&n?-1:1)}:function(t,e){if(t===e)return s=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,u=[t],a=[e];if(!i||!o)return t===E?-1:e===E?1:i?-1:o?1:c?L(c,t)-L(c,e):0;if(i===o)return ft(t,e);for(n=t;n=n.parentNode;)u.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;u[r]===a[r];)r++;return r?ft(u[r],a[r]):u[r]===m?-1:a[r]===m?1:0}),E},ot.matches=function(t,e){return ot(t,null,null,e)},ot.matchesSelector=function(t,e){if((t.ownerDocument||t)!==E&&S(t),e=e.replace($,"='$1']"),h.matchesSelector&&T&&!N[e+" "]&&(!a||!a.test(e))&&(!g||!g.test(e)))try{var n=f.call(t,e);if(n||h.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return 0<ot(e,E,null,[t]).length},ot.contains=function(t,e){return(t.ownerDocument||t)!==E&&S(t),y(t,e)},ot.attr=function(t,e){(t.ownerDocument||t)!==E&&S(t);var n=b.attrHandle[e.toLowerCase()],r=n&&C.call(b.attrHandle,e.toLowerCase())?n(t,e,!T):void 0;return void 0!==r?r:h.attributes||!T?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},ot.escape=function(t){return(t+"").replace(et,nt)},ot.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ot.uniqueSort=function(t){var e,n=[],r=0,i=0;if(s=!h.detectDuplicates,c=!h.sortStable&&t.slice(0),t.sort(j),s){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return c=null,t},o=ot.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=o(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=o(e);return n},(b=ot.selectors={cacheLength:50,createPseudo:at,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Z,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(Z,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ot.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ot.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return z.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&G.test(n)&&(e=d(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Z,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=p[t+" "];return e||(e=new RegExp("(^|"+F+")"+t+"("+F+"|$)"))&&p(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(t){var e=ot.attr(t,n);return null==e?"!="===r:!r||(e+="","="===r?e===i:"!="===r?e!==i:"^="===r?i&&0===e.indexOf(i):"*="===r?i&&-1<e.indexOf(i):"$="===r?i&&e.slice(-i.length)===i:"~="===r?-1<(" "+e.replace(H," ")+" ").indexOf(i):"|="===r&&(e===i||e.slice(0,i.length+1)===i+"-"))}},CHILD:function(d,t,e,v,g){var y="nth"!==d.slice(0,3),m="last"!==d.slice(-4),x="of-type"===t;return 1===v&&0===g?function(t){return!!t.parentNode}:function(t,e,n){var r,i,o,u,a,c,s=y!==m?"nextSibling":"previousSibling",f=t.parentNode,l=x&&t.nodeName.toLowerCase(),p=!n&&!x,h=!1;if(f){if(y){for(;s;){for(u=t;u=u[s];)if(x?u.nodeName.toLowerCase()===l:1===u.nodeType)return!1;c=s="only"===d&&!c&&"nextSibling"}return!0}if(c=[m?f.firstChild:f.lastChild],m&&p){for(h=(a=(r=(i=(o=(u=f)[_]||(u[_]={}))[u.uniqueID]||(o[u.uniqueID]={}))[d]||[])[0]===A&&r[1])&&r[2],u=a&&f.childNodes[a];u=++a&&u&&u[s]||(h=a=0)||c.pop();)if(1===u.nodeType&&++h&&u===t){i[d]=[A,a,h];break}}else if(p&&(h=a=(r=(i=(o=(u=t)[_]||(u[_]={}))[u.uniqueID]||(o[u.uniqueID]={}))[d]||[])[0]===A&&r[1]),!1===h)for(;(u=++a&&u&&u[s]||(h=a=0)||c.pop())&&((x?u.nodeName.toLowerCase()!==l:1!==u.nodeType)||!++h||(p&&((i=(o=u[_]||(u[_]={}))[u.uniqueID]||(o[u.uniqueID]={}))[d]=[A,h]),u!==t)););return(h-=g)===v||h%v==0&&0<=h/v}}},PSEUDO:function(t,o){var e,u=b.pseudos[t]||b.setFilters[t.toLowerCase()]||ot.error("unsupported pseudo: "+t);return u[_]?u(o):1<u.length?(e=[t,t,"",o],b.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,e){for(var n,r=u(t,o),i=r.length;i--;)t[n=L(t,r[i])]=!(e[n]=r[i])}):function(t){return u(t,0,e)}):u}},pseudos:{not:at(function(t){var r=[],i=[],a=l(t.replace(W,"$1"));return a[_]?at(function(t,e,n,r){for(var i,o=a(t,null,r,[]),u=t.length;u--;)(i=o[u])&&(t[u]=!(e[u]=i))}):function(t,e,n){return r[0]=t,a(r,null,n,i),r[0]=null,!i.pop()}}),has:at(function(e){return function(t){return 0<ot(e,t).length}}),contains:at(function(e){return e=e.replace(Z,tt),function(t){return-1<(t.textContent||t.innerText||o(t)).indexOf(e)}}),lang:at(function(n){return V.test(n||"")||ot.error("unsupported lang: "+n),n=n.replace(Z,tt).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===u},focus:function(t){return t===E.activeElement&&(!E.hasFocus||E.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:ht(!1),disabled:ht(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!b.pseudos.empty(t)},header:function(t){return Y.test(t.nodeName)},input:function(t){return X.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:dt(function(){return[0]}),last:dt(function(t,e){return[e-1]}),eq:dt(function(t,e,n){return[n<0?n+e:n]}),even:dt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:dt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:dt(function(t,e,n){for(var r=n<0?n+e:n;0<=--r;)t.push(r);return t}),gt:dt(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[t]=lt(t);for(t in{submit:!0,reset:!0})b.pseudos[t]=pt(t);function gt(){}function yt(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function mt(a,t,e){var c=t.dir,s=t.next,f=s||c,l=e&&"parentNode"===f,p=r++;return t.first?function(t,e,n){for(;t=t[c];)if(1===t.nodeType||l)return a(t,e,n);return!1}:function(t,e,n){var r,i,o,u=[A,p];if(n){for(;t=t[c];)if((1===t.nodeType||l)&&a(t,e,n))return!0}else for(;t=t[c];)if(1===t.nodeType||l)if(i=(o=t[_]||(t[_]={}))[t.uniqueID]||(o[t.uniqueID]={}),s&&s===t.nodeName.toLowerCase())t=t[c]||t;else{if((r=i[f])&&r[0]===A&&r[1]===p)return u[2]=r[2];if((i[f]=u)[2]=a(t,e,n))return!0}return!1}}function xt(i){return 1<i.length?function(t,e,n){for(var r=i.length;r--;)if(!i[r](t,e,n))return!1;return!0}:i[0]}function bt(t,e,n,r,i){for(var o,u=[],a=0,c=t.length,s=null!=e;a<c;a++)(o=t[a])&&(n&&!n(o,r,i)||(u.push(o),s&&e.push(a)));return u}function wt(h,d,v,g,y,t){return g&&!g[_]&&(g=wt(g)),y&&!y[_]&&(y=wt(y,t)),at(function(t,e,n,r){var i,o,u,a=[],c=[],s=e.length,f=t||function(t,e,n){for(var r=0,i=e.length;r<i;r++)ot(t,e[r],n);return n}(d||"*",n.nodeType?[n]:n,[]),l=!h||!t&&d?f:bt(f,a,h,n,r),p=v?y||(t?h:s||g)?[]:e:l;if(v&&v(l,p,n,r),g)for(i=bt(p,c),g(i,[],n,r),o=i.length;o--;)(u=i[o])&&(p[c[o]]=!(l[c[o]]=u));if(t){if(y||h){if(y){for(i=[],o=p.length;o--;)(u=p[o])&&i.push(l[o]=u);y(null,p=[],i,r)}for(o=p.length;o--;)(u=p[o])&&-1<(i=y?L(t,u):a[o])&&(t[i]=!(e[i]=u))}}else p=bt(p===e?p.splice(s,p.length):p),y?y(null,e,p,r):M.apply(e,p)})}function St(t){for(var i,e,n,r=t.length,o=b.relative[t[0].type],u=o||b.relative[" "],a=o?1:0,c=mt(function(t){return t===i},u,!0),s=mt(function(t){return-1<L(i,t)},u,!0),f=[function(t,e,n){var r=!o&&(n||e!==w)||((i=e).nodeType?c(t,e,n):s(t,e,n));return i=null,r}];a<r;a++)if(e=b.relative[t[a].type])f=[mt(xt(f),e)];else{if((e=b.filter[t[a].type].apply(null,t[a].matches))[_]){for(n=++a;n<r&&!b.relative[t[n].type];n++);return wt(1<a&&xt(f),1<a&&yt(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(W,"$1"),e,a<n&&St(t.slice(a,n)),n<r&&St(t=t.slice(n)),n<r&&yt(t))}f.push(e)}return xt(f)}return gt.prototype=b.filters=b.pseudos,b.setFilters=new gt,d=ot.tokenize=function(t,e){var n,r,i,o,u,a,c,s=x[t+" "];if(s)return e?0:s.slice(0);for(u=t,a=[],c=b.preFilter;u;){for(o in n&&!(r=B.exec(u))||(r&&(u=u.slice(r[0].length)||u),a.push(i=[])),n=!1,(r=U.exec(u))&&(n=r.shift(),i.push({value:n,type:r[0].replace(W," ")}),u=u.slice(n.length)),b.filter)!(r=z[o].exec(u))||c[o]&&!(r=c[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),u=u.slice(n.length));if(!n)break}return e?u.length:u?ot.error(t):x(t,a).slice(0)},l=ot.compile=function(t,e){var n,g,y,m,x,r,i=[],o=[],u=N[t+" "];if(!u){for(e||(e=d(t)),n=e.length;n--;)(u=St(e[n]))[_]?i.push(u):o.push(u);(u=N(t,(g=o,m=0<(y=i).length,x=0<g.length,r=function(t,e,n,r,i){var o,u,a,c=0,s="0",f=t&&[],l=[],p=w,h=t||x&&b.find.TAG("*",i),d=A+=null==p?1:Math.random()||.1,v=h.length;for(i&&(w=e===E||e||i);s!==v&&null!=(o=h[s]);s++){if(x&&o){for(u=0,e||o.ownerDocument===E||(S(o),n=!T);a=g[u++];)if(a(o,e||E,n)){r.push(o);break}i&&(A=d)}m&&((o=!a&&o)&&c--,t&&f.push(o))}if(c+=s,m&&s!==c){for(u=0;a=y[u++];)a(f,l,e,n);if(t){if(0<c)for(;s--;)f[s]||l[s]||(l[s]=O.call(r));l=bt(l)}M.apply(r,l),i&&!t&&0<l.length&&1<c+y.length&&ot.uniqueSort(r)}return i&&(A=d,w=p),f},m?at(r):r))).selector=t}return u},v=ot.select=function(t,e,n,r){var i,o,u,a,c,s="function"==typeof t&&t,f=!r&&d(t=s.selector||t);if(n=n||[],1===f.length){if(2<(o=f[0]=f[0].slice(0)).length&&"ID"===(u=o[0]).type&&9===e.nodeType&&T&&b.relative[o[1].type]){if(!(e=(b.find.ID(u.matches[0].replace(Z,tt),e)||[])[0]))return n;s&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=z.needsContext.test(t)?0:o.length;i--&&(u=o[i],!b.relative[a=u.type]);)if((c=b.find[a])&&(r=c(u.matches[0].replace(Z,tt),Q.test(o[0].type)&&vt(e.parentNode)||e))){if(o.splice(i,1),!(t=r.length&&yt(o)))return M.apply(n,r),n;break}}return(s||l(t,f))(r,e,!T,n,!e||Q.test(t)&&vt(e.parentNode)||e),n},h.sortStable=_.split("").sort(j).join("")===_,h.detectDuplicates=!!s,S(),h.sortDetached=ct(function(t){return 1&t.compareDocumentPosition(E.createElement("fieldset"))}),ct(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||st("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),h.attributes&&ct(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||st("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ct(function(t){return null==t.getAttribute("disabled")})||st(D,function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),ot}(E);_.find=h,_.expr=h.selectors,_.expr[":"]=_.expr.pseudos,_.uniqueSort=_.unique=h.uniqueSort,_.text=h.getText,_.isXMLDoc=h.isXML,_.contains=h.contains,_.escapeSelector=h.escape;var d=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&_(t).is(n))break;r.push(t)}return r},S=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},A=_.expr.match.needsContext;function N(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function C(t,n,r){return m(n)?_.grep(t,function(t,e){return!!n.call(t,e,t)!==r}):n.nodeType?_.grep(t,function(t){return t===n!==r}):"string"!=typeof n?_.grep(t,function(t){return-1<i.call(n,t)!==r}):_.filter(n,t,r)}_.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?_.find.matchesSelector(r,t)?[r]:[]:_.find.matches(t,_.grep(e,function(t){return 1===t.nodeType}))},_.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(_(t).filter(function(){for(e=0;e<r;e++)if(_.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)_.find(t,i[e],n);return 1<r?_.uniqueSort(n):n},filter:function(t){return this.pushStack(C(this,t||[],!1))},not:function(t){return this.pushStack(C(this,t||[],!0))},is:function(t){return!!C(this,"string"==typeof t&&A.test(t)?_(t):t||[],!1).length}});var O,k=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(_.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||O,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):m(t)?void 0!==n.ready?n.ready(t):t(_):_.makeArray(t,this);if(!(r="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:k.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof _?e[0]:e,_.merge(this,_.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:T,!0)),j.test(r[1])&&_.isPlainObject(e))for(r in e)m(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=T.getElementById(r[2]))&&(this[0]=i,this.length=1),this}).prototype=_.fn,O=_(T);var M=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function L(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}_.fn.extend({has:function(t){var e=_(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(_.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],u="string"!=typeof t&&_(t);if(!A.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(u?-1<u.index(n):1===n.nodeType&&_.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(1<o.length?_.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?i.call(_(t),this[0]):i.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),_.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return d(t,"parentNode")},parentsUntil:function(t,e,n){return d(t,"parentNode",n)},next:function(t){return L(t,"nextSibling")},prev:function(t){return L(t,"previousSibling")},nextAll:function(t){return d(t,"nextSibling")},prevAll:function(t){return d(t,"previousSibling")},nextUntil:function(t,e,n){return d(t,"nextSibling",n)},prevUntil:function(t,e,n){return d(t,"previousSibling",n)},siblings:function(t){return S((t.parentNode||{}).firstChild,t)},children:function(t){return S(t.firstChild)},contents:function(t){return N(t,"iframe")?t.contentDocument:(N(t,"template")&&(t=t.content||t),_.merge([],t.childNodes))}},function(r,i){_.fn[r]=function(t,e){var n=_.map(this,i,t);return"Until"!==r.slice(-5)&&(e=t),e&&"string"==typeof e&&(n=_.filter(e,n)),1<this.length&&(P[r]||_.uniqueSort(n),M.test(r)&&n.reverse()),this.pushStack(n)}});var D=/[^\x20\t\r\n\f]+/g;function F(t){return t}function I(t){throw t}function R(t,e,n,r){var i;try{t&&m(i=t.promise)?i.call(t).done(e).fail(n):t&&m(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}_.Callbacks=function(r){var t,n;r="string"==typeof r?(t=r,n={},_.each(t.match(D)||[],function(t,e){n[e]=!0}),n):_.extend({},r);var i,e,o,u,a=[],c=[],s=-1,f=function(){for(u=u||r.once,o=i=!0;c.length;s=-1)for(e=c.shift();++s<a.length;)!1===a[s].apply(e[0],e[1])&&r.stopOnFalse&&(s=a.length,e=!1);r.memory||(e=!1),i=!1,u&&(a=e?[]:"")},l={add:function(){return a&&(e&&!i&&(s=a.length-1,c.push(e)),function n(t){_.each(t,function(t,e){m(e)?r.unique&&l.has(e)||a.push(e):e&&e.length&&"string"!==w(e)&&n(e)})}(arguments),e&&!i&&f()),this},remove:function(){return _.each(arguments,function(t,e){for(var n;-1<(n=_.inArray(e,a,n));)a.splice(n,1),n<=s&&s--}),this},has:function(t){return t?-1<_.inArray(t,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return u=c=[],a=e="",this},disabled:function(){return!a},lock:function(){return u=c=[],e||i||(a=e=""),this},locked:function(){return!!u},fireWith:function(t,e){return u||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),i||f()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!o}};return l},_.extend({Deferred:function(t){var o=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],i="pending",u={state:function(){return i},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return u.then(null,t)},pipe:function(){var i=arguments;return _.Deferred(function(r){_.each(o,function(t,e){var n=m(i[e[4]])&&i[e[4]];a[e[1]](function(){var t=n&&n.apply(this,arguments);t&&m(t.promise)?t.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[e[0]+"With"](this,n?[t]:arguments)})}),i=null}).promise()},then:function(e,n,r){var c=0;function s(i,o,u,a){return function(){var n=this,r=arguments,t=function(){var t,e;if(!(i<c)){if((t=u.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"===_typeof(t)||"function"==typeof t)&&t.then,m(e)?a?e.call(t,s(c,o,F,a),s(c,o,I,a)):(c++,e.call(t,s(c,o,F,a),s(c,o,I,a),s(c,o,F,o.notifyWith))):(u!==F&&(n=void 0,r=[t]),(a||o.resolveWith)(n,r))}},e=a?t:function(){try{t()}catch(t){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(t,e.stackTrace),c<=i+1&&(u!==I&&(n=void 0,r=[t]),o.rejectWith(n,r))}};i?e():(_.Deferred.getStackHook&&(e.stackTrace=_.Deferred.getStackHook()),E.setTimeout(e))}}return _.Deferred(function(t){o[0][3].add(s(0,t,m(r)?r:F,t.notifyWith)),o[1][3].add(s(0,t,m(e)?e:F)),o[2][3].add(s(0,t,m(n)?n:I))}).promise()},promise:function(t){return null!=t?_.extend(t,u):u}},a={};return _.each(o,function(t,e){var n=e[2],r=e[5];u[e[1]]=n.add,r&&n.add(function(){i=r},o[3-t][2].disable,o[3-t][3].disable,o[0][2].lock,o[0][3].lock),n.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=n.fireWith}),u.promise(a),t&&t.call(a,a),a},when:function(t){var n=arguments.length,e=n,r=Array(e),i=a.call(arguments),o=_.Deferred(),u=function(e){return function(t){r[e]=this,i[e]=1<arguments.length?a.call(arguments):t,--n||o.resolveWith(r,i)}};if(n<=1&&(R(t,o.done(u(e)).resolve,o.reject,!n),"pending"===o.state()||m(i[e]&&i[e].then)))return o.then();for(;e--;)R(i[e],u(e),o.reject);return o.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(t,e){E.console&&E.console.warn&&t&&q.test(t.name)&&E.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},_.readyException=function(t){E.setTimeout(function(){throw t})};var H=_.Deferred();function W(){T.removeEventListener("DOMContentLoaded",W),E.removeEventListener("load",W),_.ready()}_.fn.ready=function(t){return H.then(t).catch(function(t){_.readyException(t)}),this},_.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--_.readyWait:_.isReady)||(_.isReady=!0)!==t&&0<--_.readyWait||H.resolveWith(T,[_])}}),_.ready.then=H.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?E.setTimeout(_.ready):(T.addEventListener("DOMContentLoaded",W),E.addEventListener("load",W));var B=function t(e,n,r,i,o,u,a){var c=0,s=e.length,f=null==r;if("object"===w(r))for(c in o=!0,r)t(e,n,c,r[c],!0,u,a);else if(void 0!==i&&(o=!0,m(i)||(a=!0),f&&(n=a?(n.call(e,i),null):(f=n,function(t,e,n){return f.call(_(t),n)})),n))for(;c<s;c++)n(e[c],r,a?i:i.call(e[c],c,n(e[c],r)));return o?e:f?n.call(e):s?n(e[0],r):u},U=/^-ms-/,$=/-([a-z])/g;function G(t,e){return e.toUpperCase()}function V(t){return t.replace(U,"ms-").replace($,G)}var z=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function X(){this.expando=_.expando+X.uid++}X.uid=1,X.prototype={cache:function(t){var e=t[this.expando];return e||(e={},z(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[V(e)]=n;else for(r in e)i[V(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][V(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(V):(e=V(e))in r?[e]:e.match(D)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||_.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!_.isEmptyObject(e)}};var Y=new X,J=new X,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function Z(t,e,n){var r,i;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(Q,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:K.test(i)?JSON.parse(i):i)}catch(t){}J.set(t,e,n)}else n=void 0;return n}_.extend({hasData:function(t){return J.hasData(t)||Y.hasData(t)},data:function(t,e,n){return J.access(t,e,n)},removeData:function(t,e){J.remove(t,e)},_data:function(t,e,n){return Y.access(t,e,n)},_removeData:function(t,e){Y.remove(t,e)}}),_.fn.extend({data:function(n,t){var e,r,i,o=this[0],u=o&&o.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){J.set(this,n)}):B(this,function(t){var e;if(o&&void 0===t)return void 0!==(e=J.get(o,n))?e:void 0!==(e=Z(o,n))?e:void 0;this.each(function(){J.set(this,n,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(i=J.get(o),1===o.nodeType&&!Y.get(o,"hasDataAttrs"))){for(e=u.length;e--;)u[e]&&0===(r=u[e].name).indexOf("data-")&&(r=V(r.slice(5)),Z(o,r,i[r]));Y.set(o,"hasDataAttrs",!0)}return i},removeData:function(t){return this.each(function(){J.remove(this,t)})}}),_.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=Y.get(t,e),n&&(!r||Array.isArray(n)?r=Y.access(t,e,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=_.queue(t,e),r=n.length,i=n.shift(),o=_._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,function(){_.dequeue(t,e)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Y.get(t,n)||Y.access(t,n,{empty:_.Callbacks("once memory").add(function(){Y.remove(t,[e+"queue",n])})})}}),_.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?_.queue(this[0],e):void 0===n?this:this.each(function(){var t=_.queue(this,e,n);_._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&_.dequeue(this,e)})},dequeue:function(t){return this.each(function(){_.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=_.Deferred(),o=this,u=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";u--;)(n=Y.get(o[u],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(e)}});var tt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,et=new RegExp("^(?:([+-])=|)("+tt+")([a-z%]*)$","i"),nt=["Top","Right","Bottom","Left"],rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&_.contains(t.ownerDocument,t)&&"none"===_.css(t,"display")},it=function(t,e,n,r){var i,o,u={};for(o in e)u[o]=t.style[o],t.style[o]=e[o];for(o in i=n.apply(t,r||[]),e)t.style[o]=u[o];return i};function ot(t,e,n,r){var i,o,u=20,a=r?function(){return r.cur()}:function(){return _.css(t,e,"")},c=a(),s=n&&n[3]||(_.cssNumber[e]?"":"px"),f=(_.cssNumber[e]||"px"!==s&&+c)&&et.exec(_.css(t,e));if(f&&f[3]!==s){for(c/=2,s=s||f[3],f=+c||1;u--;)_.style(t,e,f+s),(1-o)*(1-(o=a()/c||.5))<=0&&(u=0),f/=o;f*=2,_.style(t,e,f+s),n=n||[]}return n&&(f=+f||+c||0,i=n[1]?f+(n[1]+1)*n[2]:+n[2],r&&(r.unit=s,r.start=f,r.end=i)),i}var ut={};function at(t,e){for(var n,r,i,o,u,a,c,s=[],f=0,l=t.length;f<l;f++)(r=t[f]).style&&(n=r.style.display,e?("none"===n&&(s[f]=Y.get(r,"display")||null,s[f]||(r.style.display="")),""===r.style.display&&rt(r)&&(s[f]=(c=u=o=void 0,u=(i=r).ownerDocument,a=i.nodeName,(c=ut[a])||(o=u.body.appendChild(u.createElement(a)),c=_.css(o,"display"),o.parentNode.removeChild(o),"none"===c&&(c="block"),ut[a]=c)))):"none"!==n&&(s[f]="none",Y.set(r,"display",n)));for(f=0;f<l;f++)null!=s[f]&&(t[f].style.display=s[f]);return t}_.fn.extend({show:function(){return at(this,!0)},hide:function(){return at(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?_(this).show():_(this).hide()})}});var ct=/^(?:checkbox|radio)$/i,st=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ft=/^$|^module$|\/(?:java|ecma)script/i,lt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function pt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&N(t,e)?_.merge([t],n):n}function ht(t,e){for(var n=0,r=t.length;n<r;n++)Y.set(t[n],"globalEval",!e||Y.get(e[n],"globalEval"))}lt.optgroup=lt.option,lt.tbody=lt.tfoot=lt.colgroup=lt.caption=lt.thead,lt.th=lt.td;var dt,vt,gt=/<|&#?\w+;/;function yt(t,e,n,r,i){for(var o,u,a,c,s,f,l=e.createDocumentFragment(),p=[],h=0,d=t.length;h<d;h++)if((o=t[h])||0===o)if("object"===w(o))_.merge(p,o.nodeType?[o]:o);else if(gt.test(o)){for(u=u||l.appendChild(e.createElement("div")),a=(st.exec(o)||["",""])[1].toLowerCase(),c=lt[a]||lt._default,u.innerHTML=c[1]+_.htmlPrefilter(o)+c[2],f=c[0];f--;)u=u.lastChild;_.merge(p,u.childNodes),(u=l.firstChild).textContent=""}else p.push(e.createTextNode(o));for(l.textContent="",h=0;o=p[h++];)if(r&&-1<_.inArray(o,r))i&&i.push(o);else if(s=_.contains(o.ownerDocument,o),u=pt(l.appendChild(o),"script"),s&&ht(u),n)for(f=0;o=u[f++];)ft.test(o.type||"")&&n.push(o);return l}dt=T.createDocumentFragment().appendChild(T.createElement("div")),(vt=T.createElement("input")).setAttribute("type","radio"),vt.setAttribute("checked","checked"),vt.setAttribute("name","t"),dt.appendChild(vt),y.checkClone=dt.cloneNode(!0).cloneNode(!0).lastChild.checked,dt.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!dt.cloneNode(!0).lastChild.defaultValue;var mt=T.documentElement,xt=/^key/,bt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,wt=/^([^.]*)(?:\.(.+)|)/;function St(){return!0}function Et(){return!1}function Tt(){try{return T.activeElement}catch(t){}}function _t(t,e,n,r,i,o){var u,a;if("object"===_typeof(e)){for(a in"string"!=typeof n&&(r=r||n,n=void 0),e)_t(t,a,n,r,e[a],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Et;else if(!i)return t;return 1===o&&(u=i,(i=function(t){return _().off(t),u.apply(this,arguments)}).guid=u.guid||(u.guid=_.guid++)),t.each(function(){_.event.add(this,e,i,r,n)})}_.event={global:{},add:function(e,t,n,r,i){var o,u,a,c,s,f,l,p,h,d,v,g=Y.get(e);if(g)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&_.find.matchesSelector(mt,i),n.guid||(n.guid=_.guid++),(c=g.events)||(c=g.events={}),(u=g.handle)||(u=g.handle=function(t){return void 0!==_&&_.event.triggered!==t.type?_.event.dispatch.apply(e,arguments):void 0}),s=(t=(t||"").match(D)||[""]).length;s--;)h=v=(a=wt.exec(t[s])||[])[1],d=(a[2]||"").split(".").sort(),h&&(l=_.event.special[h]||{},h=(i?l.delegateType:l.bindType)||h,l=_.event.special[h]||{},f=_.extend({type:h,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:d.join(".")},o),(p=c[h])||((p=c[h]=[]).delegateCount=0,l.setup&&!1!==l.setup.call(e,r,d,u)||e.addEventListener&&e.addEventListener(h,u)),l.add&&(l.add.call(e,f),f.handler.guid||(f.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,f):p.push(f),_.event.global[h]=!0)},remove:function(t,e,n,r,i){var o,u,a,c,s,f,l,p,h,d,v,g=Y.hasData(t)&&Y.get(t);if(g&&(c=g.events)){for(s=(e=(e||"").match(D)||[""]).length;s--;)if(h=v=(a=wt.exec(e[s])||[])[1],d=(a[2]||"").split(".").sort(),h){for(l=_.event.special[h]||{},p=c[h=(r?l.delegateType:l.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=o=p.length;o--;)f=p[o],!i&&v!==f.origType||n&&n.guid!==f.guid||a&&!a.test(f.namespace)||r&&r!==f.selector&&("**"!==r||!f.selector)||(p.splice(o,1),f.selector&&p.delegateCount--,l.remove&&l.remove.call(t,f));u&&!p.length&&(l.teardown&&!1!==l.teardown.call(t,d,g.handle)||_.removeEvent(t,h,g.handle),delete c[h])}else for(h in c)_.event.remove(t,h+e[s],n,r,!0);_.isEmptyObject(c)&&Y.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,u,a=_.event.fix(t),c=new Array(arguments.length),s=(Y.get(this,"events")||{})[a.type]||[],f=_.event.special[a.type]||{};for(c[0]=a,e=1;e<arguments.length;e++)c[e]=arguments[e];if(a.delegateTarget=this,!f.preDispatch||!1!==f.preDispatch.call(this,a)){for(u=_.event.handlers.call(this,a,s),e=0;(i=u[e++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((_.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,c))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return f.postDispatch&&f.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,r,i,o,u,a=[],c=e.delegateCount,s=t.target;if(c&&s.nodeType&&!("click"===t.type&&1<=t.button))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==t.type||!0!==s.disabled)){for(o=[],u={},n=0;n<c;n++)void 0===u[i=(r=e[n]).selector+" "]&&(u[i]=r.needsContext?-1<_(i,this).index(s):_.find(i,this,null,[s]).length),u[i]&&o.push(r);o.length&&a.push({elem:s,handlers:o})}return s=this,c<e.length&&a.push({elem:s,handlers:e.slice(c)}),a},addProp:function(e,t){Object.defineProperty(_.Event.prototype,e,{enumerable:!0,configurable:!0,get:m(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[_.expando]?t:new _.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Tt()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Tt()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(t){return N(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},_.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},_.Event=function(t,e){if(!(this instanceof _.Event))return new _.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?St:Et,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&_.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:Et,isPropagationStopped:Et,isImmediatePropagationStopped:Et,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=St,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=St,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=St,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&xt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&bt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},_.event.addProp),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,i){_.event.special[t]={delegateType:i,bindType:i,handle:function(t){var e,n=t.relatedTarget,r=t.handleObj;return n&&(n===this||_.contains(this,n))||(t.type=r.origType,e=r.handler.apply(this,arguments),t.type=i),e}}}),_.fn.extend({on:function(t,e,n,r){return _t(this,t,e,n,r)},one:function(t,e,n,r){return _t(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,_(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!==_typeof(t))return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Et),this.each(function(){_.event.remove(this,t,n,e)});for(i in t)this.off(i,e,t[i]);return this}});var At=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Nt=/<script|<style|<link/i,jt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ct=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ot(t,e){return N(t,"table")&&N(11!==e.nodeType?e:e.firstChild,"tr")&&_(t).children("tbody")[0]||t}function kt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Mt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Pt(t,e){var n,r,i,o,u,a,c,s;if(1===e.nodeType){if(Y.hasData(t)&&(o=Y.access(t),u=Y.set(e,o),s=o.events))for(i in delete u.handle,u.events={},s)for(n=0,r=s[i].length;n<r;n++)_.event.add(e,i,s[i][n]);J.hasData(t)&&(a=J.access(t),c=_.extend({},a),J.set(e,c))}}function Lt(n,r,i,o){r=v.apply([],r);var t,e,u,a,c,s,f=0,l=n.length,p=l-1,h=r[0],d=m(h);if(d||1<l&&"string"==typeof h&&!y.checkClone&&jt.test(h))return n.each(function(t){var e=n.eq(t);d&&(r[0]=h.call(this,t,e.html())),Lt(e,r,i,o)});if(l&&(e=(t=yt(r,n[0].ownerDocument,!1,n,o)).firstChild,1===t.childNodes.length&&(t=e),e||o)){for(a=(u=_.map(pt(t,"script"),kt)).length;f<l;f++)c=t,f!==p&&(c=_.clone(c,!0,!0),a&&_.merge(u,pt(c,"script"))),i.call(n[f],c,f);if(a)for(s=u[u.length-1].ownerDocument,_.map(u,Mt),f=0;f<a;f++)c=u[f],ft.test(c.type||"")&&!Y.access(c,"globalEval")&&_.contains(s,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?_._evalUrl&&_._evalUrl(c.src):b(c.textContent.replace(Ct,""),s,c))}return n}function Dt(t,e,n){for(var r,i=e?_.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||_.cleanData(pt(r)),r.parentNode&&(n&&_.contains(r.ownerDocument,r)&&ht(pt(r,"script")),r.parentNode.removeChild(r));return t}_.extend({htmlPrefilter:function(t){return t.replace(At,"<$1></$2>")},clone:function(t,e,n){var r,i,o,u,a,c,s,f=t.cloneNode(!0),l=_.contains(t.ownerDocument,t);if(!(y.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||_.isXMLDoc(t)))for(u=pt(f),r=0,i=(o=pt(t)).length;r<i;r++)a=o[r],c=u[r],void 0,"input"===(s=c.nodeName.toLowerCase())&&ct.test(a.type)?c.checked=a.checked:"input"!==s&&"textarea"!==s||(c.defaultValue=a.defaultValue);if(e)if(n)for(o=o||pt(t),u=u||pt(f),r=0,i=o.length;r<i;r++)Pt(o[r],u[r]);else Pt(t,f);return 0<(u=pt(f,"script")).length&&ht(u,!l&&pt(t,"script")),f},cleanData:function(t){for(var e,n,r,i=_.event.special,o=0;void 0!==(n=t[o]);o++)if(z(n)){if(e=n[Y.expando]){if(e.events)for(r in e.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,e.handle);n[Y.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),_.fn.extend({detach:function(t){return Dt(this,t,!0)},remove:function(t){return Dt(this,t)},text:function(t){return B(this,function(t){return void 0===t?_.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Lt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ot(this,t).appendChild(t)})},prepend:function(){return Lt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ot(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(_.cleanData(pt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return _.clone(this,t,e)})},html:function(t){return B(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Nt.test(t)&&!lt[(st.exec(t)||["",""])[1].toLowerCase()]){t=_.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(_.cleanData(pt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return Lt(this,arguments,function(t){var e=this.parentNode;_.inArray(this,n)<0&&(_.cleanData(pt(this)),e&&e.replaceChild(t,this))},n)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,u){_.fn[t]=function(t){for(var e,n=[],r=_(t),i=r.length-1,o=0;o<=i;o++)e=o===i?this:this.clone(!0),_(r[o])[u](e),c.apply(n,e.get());return this.pushStack(n)}});var Ft=new RegExp("^("+tt+")(?!px)[a-z%]+$","i"),It=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=E),e.getComputedStyle(t)},Rt=new RegExp(nt.join("|"),"i");function qt(t,e,n){var r,i,o,u,a=t.style;return(n=n||It(t))&&(""!==(u=n.getPropertyValue(e)||n[e])||_.contains(t.ownerDocument,t)||(u=_.style(t,e)),!y.pixelBoxStyles()&&Ft.test(u)&&Rt.test(e)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=u,u=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==u?u+"":u}function Ht(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",mt.appendChild(a).appendChild(c);var t=E.getComputedStyle(c);n="1%"!==t.top,u=12===e(t.marginLeft),c.style.right="60%",o=36===e(t.right),r=36===e(t.width),c.style.position="absolute",i=36===c.offsetWidth||"absolute",mt.removeChild(a),c=null}}function e(t){return Math.round(parseFloat(t))}var n,r,i,o,u,a=T.createElement("div"),c=T.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===c.style.backgroundClip,_.extend(y,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),o},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),i}}))}();var Wt=/^(none|table(?!-c[ea]).+)/,Bt=/^--/,Ut={position:"absolute",visibility:"hidden",display:"block"},$t={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","Moz","ms"],Vt=T.createElement("div").style;function zt(t){var e=_.cssProps[t];return e||(e=_.cssProps[t]=function(t){if(t in Vt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Gt.length;n--;)if((t=Gt[n]+e)in Vt)return t}(t)||t),e}function Xt(t,e,n){var r=et.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function Yt(t,e,n,r,i,o){var u="width"===e?1:0,a=0,c=0;if(n===(r?"border":"content"))return 0;for(;u<4;u+=2)"margin"===n&&(c+=_.css(t,n+nt[u],!0,i)),r?("content"===n&&(c-=_.css(t,"padding"+nt[u],!0,i)),"margin"!==n&&(c-=_.css(t,"border"+nt[u]+"Width",!0,i))):(c+=_.css(t,"padding"+nt[u],!0,i),"padding"!==n?c+=_.css(t,"border"+nt[u]+"Width",!0,i):a+=_.css(t,"border"+nt[u]+"Width",!0,i));return!r&&0<=o&&(c+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-c-a-.5))),c}function Jt(t,e,n){var r=It(t),i=qt(t,e,r),o="border-box"===_.css(t,"boxSizing",!1,r),u=o;if(Ft.test(i)){if(!n)return i;i="auto"}return u=u&&(y.boxSizingReliable()||i===t.style[e]),("auto"===i||!parseFloat(i)&&"inline"===_.css(t,"display",!1,r))&&(i=t["offset"+e[0].toUpperCase()+e.slice(1)],u=!0),(i=parseFloat(i)||0)+Yt(t,e,n||(o?"border":"content"),u,r,i)+"px"}function Kt(t,e,n,r,i){return new Kt.prototype.init(t,e,n,r,i)}_.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=qt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,u,a=V(e),c=Bt.test(e),s=t.style;if(c||(e=zt(a)),u=_.cssHooks[e]||_.cssHooks[a],void 0===n)return u&&"get"in u&&void 0!==(i=u.get(t,!1,r))?i:s[e];"string"===(o=_typeof(n))&&(i=et.exec(n))&&i[1]&&(n=ot(t,e,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(_.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==n||0!==e.indexOf("background")||(s[e]="inherit"),u&&"set"in u&&void 0===(n=u.set(t,n,r))||(c?s.setProperty(e,n):s[e]=n))}},css:function(t,e,n,r){var i,o,u,a=V(e);return Bt.test(e)||(e=zt(a)),(u=_.cssHooks[e]||_.cssHooks[a])&&"get"in u&&(i=u.get(t,!0,n)),void 0===i&&(i=qt(t,e,r)),"normal"===i&&e in $t&&(i=$t[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),_.each(["height","width"],function(t,a){_.cssHooks[a]={get:function(t,e,n){if(e)return!Wt.test(_.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?Jt(t,a,n):it(t,Ut,function(){return Jt(t,a,n)})},set:function(t,e,n){var r,i=It(t),o="border-box"===_.css(t,"boxSizing",!1,i),u=n&&Yt(t,a,n,o,i);return o&&y.scrollboxSize()===i.position&&(u-=Math.ceil(t["offset"+a[0].toUpperCase()+a.slice(1)]-parseFloat(i[a])-Yt(t,a,"border",!1,i)-.5)),u&&(r=et.exec(e))&&"px"!==(r[3]||"px")&&(t.style[a]=e,e=_.css(t,a)),Xt(0,e,u)}}}),_.cssHooks.marginLeft=Ht(y.reliableMarginLeft,function(t,e){if(e)return(parseFloat(qt(t,"marginLeft"))||t.getBoundingClientRect().left-it(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),_.each({margin:"",padding:"",border:"Width"},function(i,o){_.cssHooks[i+o]={expand:function(t){for(var e=0,n={},r="string"==typeof t?t.split(" "):[t];e<4;e++)n[i+nt[e]+o]=r[e]||r[e-2]||r[0];return n}},"margin"!==i&&(_.cssHooks[i+o].set=Xt)}),_.fn.extend({css:function(t,e){return B(this,function(t,e,n){var r,i,o={},u=0;if(Array.isArray(e)){for(r=It(t),i=e.length;u<i;u++)o[e[u]]=_.css(t,e[u],!1,r);return o}return void 0!==n?_.style(t,e,n):_.css(t,e)},t,e,1<arguments.length)}}),((_.Tween=Kt).prototype={constructor:Kt,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||_.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(_.cssNumber[n]?"":"px")},cur:function(){var t=Kt.propHooks[this.prop];return t&&t.get?t.get(this):Kt.propHooks._default.get(this)},run:function(t){var e,n=Kt.propHooks[this.prop];return this.options.duration?this.pos=e=_.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Kt.propHooks._default.set(this),this}}).init.prototype=Kt.prototype,(Kt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=_.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){_.fx.step[t.prop]?_.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[_.cssProps[t.prop]]&&!_.cssHooks[t.prop]?t.elem[t.prop]=t.now:_.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=Kt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},_.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},_.fx=Kt.prototype.init,_.fx.step={};var Qt,Zt,te,ee,ne=/^(?:toggle|show|hide)$/,re=/queueHooks$/;function ie(){Zt&&(!1===T.hidden&&E.requestAnimationFrame?E.requestAnimationFrame(ie):E.setTimeout(ie,_.fx.interval),_.fx.tick())}function oe(){return E.setTimeout(function(){Qt=void 0}),Qt=Date.now()}function ue(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=nt[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function ae(t,e,n){for(var r,i=(ce.tweeners[e]||[]).concat(ce.tweeners["*"]),o=0,u=i.length;o<u;o++)if(r=i[o].call(n,e,t))return r}function ce(o,t,e){var n,u,r=0,i=ce.prefilters.length,a=_.Deferred().always(function(){delete c.elem}),c=function(){if(u)return!1;for(var t=Qt||oe(),e=Math.max(0,s.startTime+s.duration-t),n=1-(e/s.duration||0),r=0,i=s.tweens.length;r<i;r++)s.tweens[r].run(n);return a.notifyWith(o,[s,n,e]),n<1&&i?e:(i||a.notifyWith(o,[s,1,0]),a.resolveWith(o,[s]),!1)},s=a.promise({elem:o,props:_.extend({},t),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},e),originalProperties:t,originalOptions:e,startTime:Qt||oe(),duration:e.duration,tweens:[],createTween:function(t,e){var n=_.Tween(o,s.opts,t,e,s.opts.specialEasing[t]||s.opts.easing);return s.tweens.push(n),n},stop:function(t){var e=0,n=t?s.tweens.length:0;if(u)return this;for(u=!0;e<n;e++)s.tweens[e].run(1);return t?(a.notifyWith(o,[s,1,0]),a.resolveWith(o,[s,t])):a.rejectWith(o,[s,t]),this}}),f=s.props;for(!function(t,e){var n,r,i,o,u;for(n in t)if(i=e[r=V(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(u=_.cssHooks[r])&&"expand"in u)for(n in o=u.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(f,s.opts.specialEasing);r<i;r++)if(n=ce.prefilters[r].call(s,o,f,s.opts))return m(n.stop)&&(_._queueHooks(s.elem,s.opts.queue).stop=n.stop.bind(n)),n;return _.map(f,ae,s),m(s.opts.start)&&s.opts.start.call(o,s),s.progress(s.opts.progress).done(s.opts.done,s.opts.complete).fail(s.opts.fail).always(s.opts.always),_.fx.timer(_.extend(c,{elem:o,anim:s,queue:s.opts.queue})),s}_.Animation=_.extend(ce,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ot(n.elem,t,et.exec(e),n),n}]},tweener:function(t,e){for(var n,r=0,i=(t=m(t)?(e=t,["*"]):t.match(D)).length;r<i;r++)n=t[r],ce.tweeners[n]=ce.tweeners[n]||[],ce.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,u,a,c,s,f,l="width"in e||"height"in e,p=this,h={},d=t.style,v=t.nodeType&&rt(t),g=Y.get(t,"fxshow");for(r in n.queue||(null==(u=_._queueHooks(t,"fx")).unqueued&&(u.unqueued=0,a=u.empty.fire,u.empty.fire=function(){u.unqueued||a()}),u.unqueued++,p.always(function(){p.always(function(){u.unqueued--,_.queue(t,"fx").length||u.empty.fire()})})),e)if(i=e[r],ne.test(i)){if(delete e[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;v=!0}h[r]=g&&g[r]||_.style(t,r)}if((c=!_.isEmptyObject(e))||!_.isEmptyObject(h))for(r in l&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(s=g&&g.display)&&(s=Y.get(t,"display")),"none"===(f=_.css(t,"display"))&&(s?f=s:(at([t],!0),s=t.style.display||s,f=_.css(t,"display"),at([t]))),("inline"===f||"inline-block"===f&&null!=s)&&"none"===_.css(t,"float")&&(c||(p.done(function(){d.display=s}),null==s&&(f=d.display,s="none"===f?"":f)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",p.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),c=!1,h)c||(g?"hidden"in g&&(v=g.hidden):g=Y.access(t,"fxshow",{display:s}),o&&(g.hidden=!v),v&&at([t],!0),p.done(function(){for(r in v||at([t]),Y.remove(t,"fxshow"),h)_.style(t,r,h[r])})),c=ae(v?g[r]:0,r,p),r in g||(g[r]=c.start,v&&(c.end=c.start,c.start=0))}],prefilter:function(t,e){e?ce.prefilters.unshift(t):ce.prefilters.push(t)}}),_.speed=function(t,e,n){var r=t&&"object"===_typeof(t)?_.extend({},t):{complete:n||!n&&e||m(t)&&t,duration:t,easing:n&&e||e&&!m(e)&&e};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(t,e,n,r){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(e,t,n,r){var i=_.isEmptyObject(e),o=_.speed(t,n,r),u=function(){var t=ce(this,_.extend({},e),o);(i||Y.get(this,"finish"))&&t.stop(!0)};return u.finish=u,i||!1===o.queue?this.each(u):this.queue(o.queue,u)},stop:function(i,t,o){var u=function(t){var e=t.stop;delete t.stop,e(o)};return"string"!=typeof i&&(o=t,t=i,i=void 0),t&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var t=!0,e=null!=i&&i+"queueHooks",n=_.timers,r=Y.get(this);if(e)r[e]&&r[e].stop&&u(r[e]);else for(e in r)r[e]&&r[e].stop&&re.test(e)&&u(r[e]);for(e=n.length;e--;)n[e].elem!==this||null!=i&&n[e].queue!==i||(n[e].anim.stop(o),t=!1,n.splice(e,1));!t&&o||_.dequeue(this,i)})},finish:function(u){return!1!==u&&(u=u||"fx"),this.each(function(){var t,e=Y.get(this),n=e[u+"queue"],r=e[u+"queueHooks"],i=_.timers,o=n?n.length:0;for(e.finish=!0,_.queue(this,u,[]),r&&r.stop&&r.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===u&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<o;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),_.each(["toggle","show","hide"],function(t,r){var i=_.fn[r];_.fn[r]=function(t,e,n){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(ue(r,!0),t,e,n)}}),_.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,r){_.fn[t]=function(t,e,n){return this.animate(r,t,e,n)}}),_.timers=[],_.fx.tick=function(){var t,e=0,n=_.timers;for(Qt=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||_.fx.stop(),Qt=void 0},_.fx.timer=function(t){_.timers.push(t),_.fx.start()},_.fx.interval=13,_.fx.start=function(){Zt||(Zt=!0,ie())},_.fx.stop=function(){Zt=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(r,t){return r=_.fx&&_.fx.speeds[r]||r,t=t||"fx",this.queue(t,function(t,e){var n=E.setTimeout(t,r);e.stop=function(){E.clearTimeout(n)}})},te=T.createElement("input"),ee=T.createElement("select").appendChild(T.createElement("option")),te.type="checkbox",y.checkOn=""!==te.value,y.optSelected=ee.selected,(te=T.createElement("input")).value="t",te.type="radio",y.radioValue="t"===te.value;var se,fe=_.expr.attrHandle;_.fn.extend({attr:function(t,e){return B(this,_.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){_.removeAttr(this,t)})}}),_.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?_.prop(t,e,n):(1===o&&_.isXMLDoc(t)||(i=_.attrHooks[e.toLowerCase()]||(_.expr.match.bool.test(e)?se:void 0)),void 0!==n?null===n?void _.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=_.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!y.radioValue&&"radio"===e&&N(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(D);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),se={set:function(t,e,n){return!1===e?_.removeAttr(t,n):t.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),function(t,e){var u=fe[e]||_.find.attr;fe[e]=function(t,e,n){var r,i,o=e.toLowerCase();return n||(i=fe[o],fe[o]=r,r=null!=u(t,e,n)?o:null,fe[o]=i),r}});var le=/^(?:input|select|textarea|button)$/i,pe=/^(?:a|area)$/i;function he(t){return(t.match(D)||[]).join(" ")}function de(t){return t.getAttribute&&t.getAttribute("class")||""}function ve(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(D)||[]}_.fn.extend({prop:function(t,e){return B(this,_.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[_.propFix[t]||t]})}}),_.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&_.isXMLDoc(t)||(e=_.propFix[e]||e,i=_.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=_.find.attr(t,"tabindex");return e?parseInt(e,10):le.test(t.nodeName)||pe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(_.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){_.propFix[this.toLowerCase()]=this}),_.fn.extend({addClass:function(e){var t,n,r,i,o,u,a,c=0;if(m(e))return this.each(function(t){_(this).addClass(e.call(this,t,de(this)))});if((t=ve(e)).length)for(;n=this[c++];)if(i=de(n),r=1===n.nodeType&&" "+he(i)+" "){for(u=0;o=t[u++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=he(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,u,a,c=0;if(m(e))return this.each(function(t){_(this).removeClass(e.call(this,t,de(this)))});if(!arguments.length)return this.attr("class","");if((t=ve(e)).length)for(;n=this[c++];)if(i=de(n),r=1===n.nodeType&&" "+he(i)+" "){for(u=0;o=t[u++];)for(;-1<r.indexOf(" "+o+" ");)r=r.replace(" "+o+" "," ");i!==(a=he(r))&&n.setAttribute("class",a)}return this},toggleClass:function(i,e){var o=_typeof(i),u="string"===o||Array.isArray(i);return"boolean"==typeof e&&u?e?this.addClass(i):this.removeClass(i):m(i)?this.each(function(t){_(this).toggleClass(i.call(this,t,de(this),e),e)}):this.each(function(){var t,e,n,r;if(u)for(e=0,n=_(this),r=ve(i);t=r[e++];)n.hasClass(t)?n.removeClass(t):n.addClass(t);else void 0!==i&&"boolean"!==o||((t=de(this))&&Y.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===i?"":Y.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+he(de(n))+" ").indexOf(e))return!0;return!1}});var ge=/\r/g;_.fn.extend({val:function(n){var r,t,i,e=this[0];return arguments.length?(i=m(n),this.each(function(t){var e;1===this.nodeType&&(null==(e=i?n.call(this,t,_(this).val()):n)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=_.map(e,function(t){return null==t?"":t+""})),(r=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,e,"value")||(this.value=e))})):e?(r=_.valHooks[e.type]||_.valHooks[e.nodeName.toLowerCase()])&&"get"in r&&void 0!==(t=r.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(ge,""):null==t?"":t:void 0}}),_.extend({valHooks:{option:{get:function(t){var e=_.find.attr(t,"value");return null!=e?e:he(_.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,u="select-one"===t.type,a=u?null:[],c=u?o+1:i.length;for(r=o<0?c:u?o:0;r<c;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(e=_(n).val(),u)return e;a.push(e)}return a},set:function(t,e){for(var n,r,i=t.options,o=_.makeArray(e),u=i.length;u--;)((r=i[u]).selected=-1<_.inArray(_.valHooks.option.get(r),o))&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),_.each(["radio","checkbox"],function(){_.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<_.inArray(_(t).val(),e)}},y.checkOn||(_.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),y.focusin="onfocusin"in E;var ye=/^(?:focusinfocus|focusoutblur)$/,me=function(t){t.stopPropagation()};_.extend(_.event,{trigger:function(t,e,n,r){var i,o,u,a,c,s,f,l,p=[n||T],h=g.call(t,"type")?t.type:t,d=g.call(t,"namespace")?t.namespace.split("."):[];if(o=l=u=n=n||T,3!==n.nodeType&&8!==n.nodeType&&!ye.test(h+_.event.triggered)&&(-1<h.indexOf(".")&&(h=(d=h.split(".")).shift(),d.sort()),c=h.indexOf(":")<0&&"on"+h,(t=t[_.expando]?t:new _.Event(h,"object"===_typeof(t)&&t)).isTrigger=r?2:3,t.namespace=d.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:_.makeArray(e,[t]),f=_.event.special[h]||{},r||!f.trigger||!1!==f.trigger.apply(n,e))){if(!r&&!f.noBubble&&!x(n)){for(a=f.delegateType||h,ye.test(a+h)||(o=o.parentNode);o;o=o.parentNode)p.push(o),u=o;u===(n.ownerDocument||T)&&p.push(u.defaultView||u.parentWindow||E)}for(i=0;(o=p[i++])&&!t.isPropagationStopped();)l=o,t.type=1<i?a:f.bindType||h,(s=(Y.get(o,"events")||{})[t.type]&&Y.get(o,"handle"))&&s.apply(o,e),(s=c&&o[c])&&s.apply&&z(o)&&(t.result=s.apply(o,e),!1===t.result&&t.preventDefault());return t.type=h,r||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(p.pop(),e)||!z(n)||c&&m(n[h])&&!x(n)&&((u=n[c])&&(n[c]=null),_.event.triggered=h,t.isPropagationStopped()&&l.addEventListener(h,me),n[h](),t.isPropagationStopped()&&l.removeEventListener(h,me),_.event.triggered=void 0,u&&(n[c]=u)),t.result}},simulate:function(t,e,n){var r=_.extend(new _.Event,n,{type:t,isSimulated:!0});_.event.trigger(r,null,e)}}),_.fn.extend({trigger:function(t,e){return this.each(function(){_.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return _.event.trigger(t,e,n,!0)}}),y.focusin||_.each({focus:"focusin",blur:"focusout"},function(n,r){var i=function(t){_.event.simulate(r,t.target,_.event.fix(t))};_.event.special[r]={setup:function(){var t=this.ownerDocument||this,e=Y.access(t,r);e||t.addEventListener(n,i,!0),Y.access(t,r,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this,e=Y.access(t,r)-1;e?Y.access(t,r,e):(t.removeEventListener(n,i,!0),Y.remove(t,r))}}});var xe=E.location,be=Date.now(),we=/\?/;_.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new E.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||_.error("Invalid XML: "+t),e};var Se=/\[\]$/,Ee=/\r?\n/g,Te=/^(?:submit|button|image|reset|file)$/i,_e=/^(?:input|select|textarea|keygen)/i;function Ae(n,t,r,i){var e;if(Array.isArray(t))_.each(t,function(t,e){r||Se.test(n)?i(n,e):Ae(n+"["+("object"===_typeof(e)&&null!=e?t:"")+"]",e,r,i)});else if(r||"object"!==w(t))i(n,t);else for(e in t)Ae(n+"["+e+"]",t[e],r,i)}_.param=function(t,e){var n,r=[],i=function(t,e){var n=m(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!_.isPlainObject(t))_.each(t,function(){i(this.name,this.value)});else for(n in t)Ae(n,t[n],e,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=_.prop(this,"elements");return t?_.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!_(this).is(":disabled")&&_e.test(this.nodeName)&&!Te.test(t)&&(this.checked||!ct.test(t))}).map(function(t,e){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,function(t){return{name:e.name,value:t.replace(Ee,"\r\n")}}):{name:e.name,value:n.replace(Ee,"\r\n")}}).get()}});var Ne=/%20/g,je=/#.*$/,Ce=/([?&])_=[^&]*/,Oe=/^(.*?):[ \t]*([^\r\n]*)$/gm,ke=/^(?:GET|HEAD)$/,Me=/^\/\//,Pe={},Le={},De="*/".concat("*"),Fe=T.createElement("a");function Ie(o){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,r=0,i=t.toLowerCase().match(D)||[];if(m(e))for(;n=i[r++];)"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(e)):(o[n]=o[n]||[]).push(e)}}function Re(e,i,o,u){var a={},c=e===Le;function s(t){var r;return a[t]=!0,_.each(e[t]||[],function(t,e){var n=e(i,o,u);return"string"!=typeof n||c||a[n]?c?!(r=n):void 0:(i.dataTypes.unshift(n),s(n),!1)}),r}return s(i.dataTypes[0])||!a["*"]&&s("*")}function qe(t,e){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&_.extend(!0,t,r),t}Fe.href=xe.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":De,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?qe(qe(t,_.ajaxSettings),e):qe(_.ajaxSettings,t)},ajaxPrefilter:Ie(Pe),ajaxTransport:Ie(Le),ajax:function(t,e){"object"===_typeof(t)&&(e=t,t=void 0),e=e||{};var f,l,p,n,h,r,d,v,i,o,g=_.ajaxSetup({},e),y=g.context||g,m=g.context&&(y.nodeType||y.jquery)?_(y):_.event,x=_.Deferred(),b=_.Callbacks("once memory"),w=g.statusCode||{},u={},a={},c="canceled",S={readyState:0,getResponseHeader:function(t){var e;if(d){if(!n)for(n={};e=Oe.exec(p);)n[e[1].toLowerCase()]=e[2];e=n[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return d?p:null},setRequestHeader:function(t,e){return null==d&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,u[t]=e),this},overrideMimeType:function(t){return null==d&&(g.mimeType=t),this},statusCode:function(t){var e;if(t)if(d)S.always(t[S.status]);else for(e in t)w[e]=[w[e],t[e]];return this},abort:function(t){var e=t||c;return f&&f.abort(e),s(0,e),this}};if(x.promise(S),g.url=((t||g.url||xe.href)+"").replace(Me,xe.protocol+"//"),g.type=e.method||e.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(D)||[""],null==g.crossDomain){r=T.createElement("a");try{r.href=g.url,r.href=r.href,g.crossDomain=Fe.protocol+"//"+Fe.host!=r.protocol+"//"+r.host}catch(t){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=_.param(g.data,g.traditional)),Re(Pe,g,e,S),d)return S;for(i in(v=_.event&&g.global)&&0==_.active++&&_.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!ke.test(g.type),l=g.url.replace(je,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Ne,"+")):(o=g.url.slice(l.length),g.data&&(g.processData||"string"==typeof g.data)&&(l+=(we.test(l)?"&":"?")+g.data,delete g.data),!1===g.cache&&(l=l.replace(Ce,"$1"),o=(we.test(l)?"&":"?")+"_="+be+++o),g.url=l+o),g.ifModified&&(_.lastModified[l]&&S.setRequestHeader("If-Modified-Since",_.lastModified[l]),_.etag[l]&&S.setRequestHeader("If-None-Match",_.etag[l])),(g.data&&g.hasContent&&!1!==g.contentType||e.contentType)&&S.setRequestHeader("Content-Type",g.contentType),S.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+De+"; q=0.01":""):g.accepts["*"]),g.headers)S.setRequestHeader(i,g.headers[i]);if(g.beforeSend&&(!1===g.beforeSend.call(y,S,g)||d))return S.abort();if(c="abort",b.add(g.complete),S.done(g.success),S.fail(g.error),f=Re(Le,g,e,S)){if(S.readyState=1,v&&m.trigger("ajaxSend",[S,g]),d)return S;g.async&&0<g.timeout&&(h=E.setTimeout(function(){S.abort("timeout")},g.timeout));try{d=!1,f.send(u,s)}catch(t){if(d)throw t;s(-1,t)}}else s(-1,"No Transport");function s(t,e,n,r){var i,o,u,a,c,s=e;d||(d=!0,h&&E.clearTimeout(h),f=void 0,p=r||"",S.readyState=0<t?4:0,i=200<=t&&t<300||304===t,n&&(a=function(t,e,n){for(var r,i,o,u,a=t.contents,c=t.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){c.unshift(i);break}if(c[0]in n)o=c[0];else{for(i in n){if(!c[0]||t.converters[i+" "+c[0]]){o=i;break}u||(u=i)}o=o||u}if(o)return o!==c[0]&&c.unshift(o),n[o]}(g,S,n)),a=function(t,e,n,r){var i,o,u,a,c,s={},f=t.dataTypes.slice();if(f[1])for(u in t.converters)s[u.toLowerCase()]=t.converters[u];for(o=f.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!c&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),c=o,o=f.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(!(u=s[c+" "+o]||s["* "+o]))for(i in s)if((a=i.split(" "))[1]===o&&(u=s[c+" "+a[0]]||s["* "+a[0]])){!0===u?u=s[i]:!0!==s[i]&&(o=a[0],f.unshift(a[1]));break}if(!0!==u)if(u&&t.throws)e=u(e);else try{e=u(e)}catch(t){return{state:"parsererror",error:u?t:"No conversion from "+c+" to "+o}}}return{state:"success",data:e}}(g,a,S,i),i?(g.ifModified&&((c=S.getResponseHeader("Last-Modified"))&&(_.lastModified[l]=c),(c=S.getResponseHeader("etag"))&&(_.etag[l]=c)),204===t||"HEAD"===g.type?s="nocontent":304===t?s="notmodified":(s=a.state,o=a.data,i=!(u=a.error))):(u=s,!t&&s||(s="error",t<0&&(t=0))),S.status=t,S.statusText=(e||s)+"",i?x.resolveWith(y,[o,s,S]):x.rejectWith(y,[S,s,u]),S.statusCode(w),w=void 0,v&&m.trigger(i?"ajaxSuccess":"ajaxError",[S,g,i?o:u]),b.fireWith(y,[S,s]),v&&(m.trigger("ajaxComplete",[S,g]),--_.active||_.event.trigger("ajaxStop")))}return S},getJSON:function(t,e,n){return _.get(t,e,n,"json")},getScript:function(t,e){return _.get(t,void 0,e,"script")}}),_.each(["get","post"],function(t,i){_[i]=function(t,e,n,r){return m(e)&&(r=r||n,n=e,e=void 0),_.ajax(_.extend({url:t,type:i,dataType:r,data:e,success:n},_.isPlainObject(t)&&t))}}),_._evalUrl=function(t){return _.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},_.fn.extend({wrapAll:function(t){var e;return this[0]&&(m(t)&&(t=t.call(this[0])),e=_(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(t){_(this).wrapInner(n.call(this,t))}):this.each(function(){var t=_(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=m(e);return this.each(function(t){_(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){_(this).replaceWith(this.childNodes)}),this}}),_.expr.pseudos.hidden=function(t){return!_.expr.pseudos.visible(t)},_.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new E.XMLHttpRequest}catch(t){}};var He={0:200,1223:204},We=_.ajaxSettings.xhr();y.cors=!!We&&"withCredentials"in We,y.ajax=We=!!We,_.ajaxTransport(function(i){var o,u;if(y.cors||We&&!i.crossDomain)return{send:function(t,e){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)r.setRequestHeader(n,t[n]);o=function(t){return function(){o&&(o=u=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===t?r.abort():"error"===t?"number"!=typeof r.status?e(0,"error"):e(r.status,r.statusText):e(He[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),u=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=u:r.onreadystatechange=function(){4===r.readyState&&E.setTimeout(function(){o&&u()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(t){if(o)throw t}},abort:function(){o&&o()}}}),_.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return _.globalEval(t),t}}}),_.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),_.ajaxTransport("script",function(n){var r,i;if(n.crossDomain)return{send:function(t,e){r=_("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(t){r.remove(),i=null,t&&e("error"===t.type?404:200,t.type)}),T.head.appendChild(r[0])},abort:function(){i&&i()}}});var Be,Ue=[],$e=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ue.pop()||_.expando+"_"+be++;return this[t]=!0,t}}),_.ajaxPrefilter("json jsonp",function(t,e,n){var r,i,o,u=!1!==t.jsonp&&($e.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&$e.test(t.data)&&"data");if(u||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=m(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,u?t[u]=t[u].replace($e,"$1"+r):!1!==t.jsonp&&(t.url+=(we.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return o||_.error(r+" was not called"),o[0]},t.dataTypes[0]="json",i=E[r],E[r]=function(){o=arguments},n.always(function(){void 0===i?_(E).removeProp(r):E[r]=i,t[r]&&(t.jsonpCallback=e.jsonpCallback,Ue.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),y.createHTMLDocument=((Be=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Be.childNodes.length),_.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(y.createHTMLDocument?((r=(e=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,e.head.appendChild(r)):e=T),o=!n&&[],(i=j.exec(t))?[e.createElement(i[1])]:(i=yt([t],e,o),o&&o.length&&_(o).remove(),_.merge([],i.childNodes)));var r,i,o},_.fn.load=function(t,e,n){var r,i,o,u=this,a=t.indexOf(" ");return-1<a&&(r=he(t.slice(a)),t=t.slice(0,a)),m(e)?(n=e,e=void 0):e&&"object"===_typeof(e)&&(i="POST"),0<u.length&&_.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,u.html(r?_("<div>").append(_.parseHTML(t)).find(r):t)}).always(n&&function(t,e){u.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){_.fn[e]=function(t){return this.on(e,t)}}),_.expr.pseudos.animated=function(e){return _.grep(_.timers,function(t){return e===t.elem}).length},_.offset={setOffset:function(t,e,n){var r,i,o,u,a,c,s=_.css(t,"position"),f=_(t),l={};"static"===s&&(t.style.position="relative"),a=f.offset(),o=_.css(t,"top"),c=_.css(t,"left"),i=("absolute"===s||"fixed"===s)&&-1<(o+c).indexOf("auto")?(u=(r=f.position()).top,r.left):(u=parseFloat(o)||0,parseFloat(c)||0),m(e)&&(e=e.call(t,n,_.extend({},a))),null!=e.top&&(l.top=e.top-a.top+u),null!=e.left&&(l.left=e.left-a.left+i),"using"in e?e.using.call(t,l):f.css(l)}},_.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){_.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===_.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=_(t).offset()).top+=_.css(t,"borderTopWidth",!0),i.left+=_.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-_.css(r,"marginTop",!0),left:e.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===_.css(t,"position");)t=t.offsetParent;return t||mt})}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,i){var o="pageYOffset"===i;_.fn[e]=function(t){return B(this,function(t,e,n){var r;if(x(t)?r=t:9===t.nodeType&&(r=t.defaultView),void 0===n)return r?r[i]:t[e];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):t[e]=n},e,t,arguments.length)}}),_.each(["top","left"],function(t,n){_.cssHooks[n]=Ht(y.pixelPosition,function(t,e){if(e)return e=qt(t,n),Ft.test(e)?_(t).position()[n]+"px":e})}),_.each({Height:"height",Width:"width"},function(u,a){_.each({padding:"inner"+u,content:a,"":"outer"+u},function(r,o){_.fn[o]=function(t,e){var n=arguments.length&&(r||"boolean"!=typeof t),i=r||(!0===t||!0===e?"margin":"border");return B(this,function(t,e,n){var r;return x(t)?0===o.indexOf("outer")?t["inner"+u]:t.document.documentElement["client"+u]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+u],r["scroll"+u],t.body["offset"+u],r["offset"+u],r["client"+u])):void 0===n?_.css(t,e,i):_.style(t,e,n,i)},a,n?t:void 0,n)}})}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){_.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}}),_.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),_.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),_.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),m(t))return r=a.call(arguments,2),(i=function(){return t.apply(e||this,r.concat(a.call(arguments)))}).guid=t.guid=t.guid||_.guid++,i},_.holdReady=function(t){t?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=N,_.isFunction=m,_.isWindow=x,_.camelCase=V,_.type=w,_.now=Date.now,_.isNumeric=function(t){var e=_.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return _});var Ge=E.jQuery,Ve=E.$;return _.noConflict=function(t){return E.$===_&&(E.$=Ve),t&&E.jQuery===_&&(E.jQuery=Ge),_},t||(E.jQuery=E.$=_),_}),$(document).ready(function(){alert("hello world")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvbHlmaWxsLmpzIiwianF1ZXJ5LmpzIiwic2FtcGxlLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIl9kZXJlcV8iLCJtb2R1bGUiLCJnbG9iYWwiLCJfYmFiZWxQb2x5ZmlsbCIsImRlZmluZSIsIk8iLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiU3RyaW5nIiwicHJvdG90eXBlIiwicGFkU3RhcnQiLCJwYWRFbmQiLCJzcGxpdCIsImZvckVhY2giLCJBcnJheSIsIkZ1bmN0aW9uIiwiYmluZCIsInRoaXMiLCJzZWxmIiwid2luZG93IiwiMiIsIjMyNyIsIjMyOCIsIlJlZ0V4cCIsImVzY2FwZSIsIjEzMCIsIjIzIiwiMyIsIml0IiwiVHlwZUVycm9yIiwiNCIsImNvZiIsIm1zZyIsIjE4IiwiNSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90byIsInVuZGVmaW5lZCIsIjEyOCIsIjQyIiwiNiIsIkNvbnN0cnVjdG9yIiwibmFtZSIsImZvcmJpZGRlbkZpZWxkIiwiNyIsImlzT2JqZWN0IiwiNTEiLCI4IiwidG9PYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJ0b0xlbmd0aCIsImNvcHlXaXRoaW4iLCJ0YXJnZXQiLCJzdGFydCIsImxlbiIsInRvIiwiZnJvbSIsImVuZCIsImFyZ3VtZW50cyIsImNvdW50IiwiTWF0aCIsIm1pbiIsImluYyIsIjExNCIsIjExOCIsIjExOSIsIjkiLCJhTGVuIiwiaW5kZXgiLCJlbmRQb3MiLCIxMCIsImZvck9mIiwiaXRlciIsIklURVJBVE9SIiwicmVzdWx0IiwicHVzaCIsIjM5IiwiMTEiLCJ0b0lPYmplY3QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCIxMTciLCIxMiIsImN0eCIsIklPYmplY3QiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsImNyZWF0ZSIsImNhbGxiYWNrZm4iLCJ0aGF0IiwidmFsIiwicmVzIiwiMTUiLCIyNSIsIjQ3IiwiMTMiLCJhRnVuY3Rpb24iLCJtZW1vIiwiaXNSaWdodCIsIjE0IiwiaXNBcnJheSIsIlNQRUNJRVMiLCJvcmlnaW5hbCIsIkMiLCJjb25zdHJ1Y3RvciIsIjQ5Iiwic3BlY2llc0NvbnN0cnVjdG9yIiwiMTYiLCJpbnZva2UiLCJhcnJheVNsaWNlIiwic2xpY2UiLCJmYWN0b3JpZXMiLCJmbiIsInBhcnRBcmdzIiwiYm91bmQiLCJhcmdzIiwiY29uY2F0IiwiRiIsImpvaW4iLCJjb25zdHJ1Y3QiLCI0NiIsIjE3IiwiVEFHIiwiQVJHIiwiVCIsIkIiLCJ0cnlHZXQiLCJjYWxsZWUiLCJ0b1N0cmluZyIsIjE5IiwiZFAiLCJyZWRlZmluZUFsbCIsImFuSW5zdGFuY2UiLCIkaXRlckRlZmluZSIsInN0ZXAiLCJzZXRTcGVjaWVzIiwiREVTQ1JJUFRPUlMiLCJmYXN0S2V5IiwidmFsaWRhdGUiLCJTSVpFIiwiZ2V0RW50cnkiLCJlbnRyeSIsIl9pIiwiX2YiLCJrIiwiZ2V0Q29uc3RydWN0b3IiLCJ3cmFwcGVyIiwiTkFNRSIsIkFEREVSIiwiaXRlcmFibGUiLCJfdCIsIl9sIiwiY2xlYXIiLCJkYXRhIiwicCIsImRlbGV0ZSIsIm5leHQiLCJwcmV2IiwidiIsImhhcyIsImdldCIsImRlZiIsInNldFN0cm9uZyIsIml0ZXJhdGVkIiwia2luZCIsIl9rIiwiMTAwIiwiMTI1IiwiMjkiLCI1NSIsIjU3IiwiNjYiLCI3MSIsIjcyIiwiOTMiLCIyMCIsImNsYXNzb2YiLCIyMSIsImdldFdlYWsiLCJhbk9iamVjdCIsImNyZWF0ZUFycmF5TWV0aG9kIiwiJGhhcyIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiaWQiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInN0b3JlIiwic2V0Iiwic3BsaWNlIiwidWZzdG9yZSIsIjQxIiwiMjIiLCIkZXhwb3J0IiwicmVkZWZpbmUiLCJtZXRhIiwiZmFpbHMiLCIkaXRlckRldGVjdCIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkJhc2UiLCJwcm90byIsImZpeE1ldGhvZCIsIktFWSIsImIiLCJlbnRyaWVzIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJORUVEIiwiRyIsIlciLCIxMDEiLCIzMyIsIjM1IiwiNDAiLCI0NSIsIjU2IiwiOTQiLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsIjI0IiwiJGRlZmluZVByb3BlcnR5IiwiY3JlYXRlRGVzYyIsIm9iamVjdCIsIjkyIiwiYyIsImFwcGx5IiwiMjYiLCJnZXRUaW1lIiwiRGF0ZSIsIiR0b0lTT1N0cmluZyIsInRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJOYU4iLCJpc0Zpbml0ZSIsIlJhbmdlRXJyb3IiLCJkIiwieSIsImdldFVUQ0Z1bGxZZWFyIiwibSIsImdldFVUQ01pbGxpc2Vjb25kcyIsImFicyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCIyNyIsInRvUHJpbWl0aXZlIiwiaGludCIsIjEyMCIsIjI4IiwiZGVmaW5lUHJvcGVydHkiLCIzMCIsImRvY3VtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50IiwiMzEiLCIzMiIsImdldEtleXMiLCJnT1BTIiwicElFIiwiZ2V0U3ltYm9scyIsInN5bWJvbHMiLCJpc0VudW0iLCI3OCIsIjgxIiwiODIiLCJoaWRlIiwiUFJPVE9UWVBFIiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIklTX0dMT0JBTCIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJTIiwiZXhwUHJvdG8iLCJVIiwiUiIsIjM0IiwiTUFUQ0giLCJyZSIsImV4ZWMiLCIzNiIsImRlZmluZWQiLCJ3a3MiLCJTWU1CT0wiLCJmbnMiLCJzdHJmbiIsInJ4Zm4iLCJzdHJpbmciLCJhcmciLCIzNyIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiMzgiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsImlzQXJyYXlJdGVyIiwiZ2V0SXRlckZuIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYXRvciIsIml0ZXJGbiIsImRvbmUiLCIxMjkiLCI0OCIsIjUzIiwiX19nIiwiaGFzT3duUHJvcGVydHkiLCI0MyIsImRvY3VtZW50RWxlbWVudCIsIjQ0Iiwic2V0UHJvdG90eXBlT2YiLCI5OSIsInVuIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJJdGVyYXRvcnMiLCI1OCIsIjUwIiwiZmxvb3IiLCJfdHlwZW9mIiwiNTIiLCJpc1JlZ0V4cCIsInJldCIsIjU0IiwiZGVzY3JpcHRvciIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiTElCUkFSWSIsIiRpdGVyQ3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJCVUdHWSIsImtleXMiLCJWQUxVRVMiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwidmFsdWVzIiwiNjAiLCI3OSIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJzYWZlIiwiYXJyIiwiNTkiLCI2MSIsIiRleHBtMSIsImV4cG0xIiwieCIsIjYyIiwic2lnbiIsInBvdyIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwiSW5maW5pdHkiLCI2NSIsIjYzIiwibG9nMXAiLCJsb2ciLCI2NCIsInNjYWxlIiwiaW5Mb3ciLCJpbkhpZ2giLCJvdXRMb3ciLCJvdXRIaWdoIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3Iiwib25GcmVlemUiLCIxMjQiLCI2NyIsIk1hcCIsInNoYXJlZCIsImdldE9yQ3JlYXRlTWV0YWRhdGFNYXAiLCJ0YXJnZXRLZXkiLCJ0YXJnZXRNZXRhZGF0YSIsImtleU1ldGFkYXRhIiwibWFwIiwiTWV0YWRhdGFLZXkiLCJtZXRhZGF0YU1hcCIsIk1ldGFkYXRhVmFsdWUiLCJfIiwiMTAzIiwiMTYwIiwiMjY2IiwiNjgiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicHJvY2VzcyIsIlByb21pc2UiLCJpc05vZGUiLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsImZsdXNoIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwibmV4dFRpY2siLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInJlc29sdmUiLCJwcm9taXNlIiwidGhlbiIsInRhc2siLCIxMTMiLCI2OSIsIlByb21pc2VDYXBhYmlsaXR5IiwicmVqZWN0IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCI3MCIsIiRhc3NpZ24iLCJhc3NpZ24iLCJBIiwiU3ltYm9sIiwiSyIsImoiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsIjEwMiIsIjczIiwiSUU4X0RPTV9ERUZJTkUiLCJBdHRyaWJ1dGVzIiwiZGVmaW5lUHJvcGVydGllcyIsIjc0IiwicmFuZG9tIiwiX19kZWZpbmVTZXR0ZXJfXyIsIjc1IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIjc2IiwiZ09QTiIsIndpbmRvd05hbWVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiNzciLCIka2V5cyIsImhpZGRlbktleXMiLCI4MCIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdFByb3RvIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCI4MyIsIjg0IiwiaXNFbnRyaWVzIiwiODUiLCJSZWZsZWN0Iiwib3duS2V5cyIsIjg2IiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwiJHRyaW0iLCJ0cmltIiwic3RyIiwiY2hhckF0IiwiMTExIiwiMTEyIiwiODciLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIndzIiwiaGV4IiwicmFkaXgiLCJ0ZXN0IiwiODgiLCJwYXRoIiwicGFyZ3MiLCJob2xkZXIiLCI4OSIsIjkwIiwiOTEiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5IiwiYml0bWFwIiwiZW51bWVyYWJsZSIsIlNSQyIsIlRPX1NUUklORyIsIiR0b1N0cmluZyIsIlRQTCIsImluc3BlY3RTb3VyY2UiLCJpc0Z1bmN0aW9uIiwiOTUiLCJyZWdFeHAiLCJyZXBsYWNlIiwicmVwbGFjZXIiLCJwYXJ0IiwiOTYiLCI5NyIsIkNPTExFQ1RJT04iLCJtYXBwaW5nIiwiY2IiLCJuZXh0SXRlbSIsIjk4Iiwib2YiLCJjaGVjayIsImJ1Z2d5IiwiX19wcm90b19fIiwidGFnIiwic3RhdCIsInVpZCIsIlNIQVJFRCIsIjEwNCIsIkQiLCIxMDUiLCJtZXRob2QiLCIxMDYiLCJ0b0ludGVnZXIiLCJwb3MiLCJjaGFyQ29kZUF0IiwiMTE2IiwiMTA3Iiwic2VhcmNoU3RyaW5nIiwiMTA4IiwicXVvdCIsImNyZWF0ZUhUTUwiLCJhdHRyaWJ1dGUiLCJwMSIsInRvTG93ZXJDYXNlIiwiMTA5IiwicmVwZWF0IiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImxlZnQiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsImNlaWwiLCIxMTAiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaHRtbCIsImNlbCIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJPTlJFQURZU1RBVEVDSEFOR0UiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50Iiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJtYXgiLCIxMTUiLCJudW1iZXIiLCJpc05hTiIsInZhbHVlT2YiLCIxMjEiLCIkdHlwZWQiLCIkYnVmZmVyIiwicHJvcGVydHlEZXNjIiwidG9JbmRleCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiVWludDhBcnJheSIsIkFSUkFZX0JVRkZFUiIsIlNIQVJFRF9CVUZGRVIiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXciLCJhcnJheUZvckVhY2giLCJhcnJheUZpbHRlciIsImFycmF5U29tZSIsImFycmF5RXZlcnkiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCJXUk9OR19MRU5HVEgiLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsIm1hcGZuIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIlRBQyIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50Iiwicm91bmQiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIjEyMiIsIjEyMyIsIjE0MSIsIkRBVEFfVklFVyIsIldST05HX0lOREVYIiwiQmFzZUJ1ZmZlciIsIkxOMiIsIkJZVEVfTEVOR1RIIiwiQllURV9PRkZTRVQiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJweCIsIjEyNiIsIndrc0V4dCIsIiRTeW1ib2wiLCIxMjciLCJVU0VfU1lNQk9MIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCIkcmUiLCIxMzEiLCIxMzIiLCIkZXZlcnkiLCIxMzMiLCIxMzQiLCIkZmlsdGVyIiwiMTM1IiwiJGZpbmQiLCJmb3JjZWQiLCIxMzYiLCIxMzciLCIkZm9yRWFjaCIsIlNUUklDVCIsIjEzOCIsImNyZWF0ZVByb3BlcnR5IiwiMTM5IiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiMTQwIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFyZ3VtZW50cyIsIjE0MiIsIjE0MyIsIjE0NCIsIjE0NSIsIjE0NiIsIiRyZWR1Y2UiLCIxNDciLCIxNDgiLCJ1cFRvIiwic2l6ZSIsImNsb25lZCIsIjE0OSIsIiRzb21lIiwiMTUwIiwiJHNvcnQiLCIxNTEiLCIxNTIiLCIxNTMiLCIxNTQiLCJ0b0pTT04iLCJwdiIsIjE1NSIsIlRPX1BSSU1JVElWRSIsIjE1NiIsIkRhdGVQcm90byIsIklOVkFMSURfREFURSIsIjE1NyIsIjE1OCIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIxNTkiLCJGUHJvdG8iLCJuYW1lUkUiLCJtYXRjaCIsInN0cm9uZyIsIjE2MSIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk51bWJlciIsIk1BWF9WQUxVRSIsIjE2MiIsIiRhc2luaCIsImFzaW5oIiwiMTYzIiwiJGF0YW5oIiwiYXRhbmgiLCIxNjQiLCJjYnJ0IiwiMTY1IiwiY2x6MzIiLCJMT0cyRSIsIjE2NiIsImNvc2giLCIxNjciLCIxNjgiLCIxNjkiLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCIxNzAiLCIkaW11bCIsImltdWwiLCJVSU5UMTYiLCJ4biIsInluIiwieGwiLCJ5bCIsIjE3MSIsImxvZzEwIiwiTE9HMTBFIiwiMTcyIiwiMTczIiwibG9nMiIsIjE3NCIsIjE3NSIsInNpbmgiLCJFIiwiMTc2IiwidGFuaCIsIjE3NyIsInRydW5jIiwiMTc4IiwiTlVNQkVSIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiZGlnaXRzIiwiMTc5IiwiMTgwIiwiX2lzRmluaXRlIiwiMTgxIiwiaXNJbnRlZ2VyIiwiMTgyIiwiMTgzIiwiaXNTYWZlSW50ZWdlciIsIjE4NCIsIk1BWF9TQUZFX0lOVEVHRVIiLCIxODUiLCJNSU5fU0FGRV9JTlRFR0VSIiwiMTg2IiwiMTg3IiwiMTg4IiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIjE4OSIsIiRmYWlscyIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiMTkwIiwiMTkxIiwiMTkyIiwiMTkzIiwiMTk0IiwiJGZyZWV6ZSIsIjE5NSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIxOTYiLCIxOTciLCIkZ2V0UHJvdG90eXBlT2YiLCIxOTgiLCIkaXNFeHRlbnNpYmxlIiwiMTk5IiwiJGlzRnJvemVuIiwiMjAwIiwiJGlzU2VhbGVkIiwiMjAxIiwiMjAyIiwiMjAzIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiMjA0IiwiJHNlYWwiLCIyMDUiLCIyMDYiLCIyMDciLCIyMDgiLCIyMDkiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwiUFJPTUlTRSIsIiRQcm9taXNlIiwiZW1wdHkiLCJVU0VfTkFUSVZFIiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJzYW1lQ29uc3RydWN0b3IiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwiY29uc29sZSIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiZXJyb3IiLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJlcnIiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXRjaCIsImNhcGFiaWxpdHkiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIjIxMCIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJMIiwiMjExIiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsIjIxMiIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsIjIxMyIsImRlbGV0ZVByb3BlcnR5IiwiMjE0IiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwiMjE1IiwiMjE2IiwiZ2V0UHJvdG8iLCIyMTciLCJyZWNlaXZlciIsIjIxOCIsIjIxOSIsIjIyMCIsIjIyMSIsIjIyMiIsInNldFByb3RvIiwiMjIzIiwiViIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2MiLCIyMjQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwicmUxIiwicmUyIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiMjI1IiwiZmxhZ3MiLCIyMjYiLCIkbWF0Y2giLCJyZWdleHAiLCIyMjciLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsIjIyOCIsIlNFQVJDSCIsIiRzZWFyY2giLCIyMjkiLCJTUExJVCIsIiRzcGxpdCIsIl9zcGxpdCIsIiRwdXNoIiwiJFNQTElUIiwiTEVOR1RIIiwiTEFTVF9JTkRFWCIsIk5QQ0ciLCJsaW1pdCIsInNlcGFyYXRvcjIiLCJsYXN0SW5kZXgiLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5IiwiMjMwIiwiMjMxIiwiYWRkIiwiMjMyIiwiMjMzIiwiMjM0IiwiMjM1IiwiMjM2IiwiJGF0IiwiY29kZVBvaW50QXQiLCIyMzciLCJjb250ZXh0IiwiRU5EU19XSVRIIiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsIjIzOCIsIjIzOSIsImNvbG9yIiwiMjQwIiwiMjQxIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiMjQyIiwiSU5DTFVERVMiLCIyNDMiLCIyNDQiLCJwb2ludCIsIjI0NSIsInVybCIsIjI0NiIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiMjQ3IiwiMjQ4IiwiMjQ5IiwiU1RBUlRTX1dJVEgiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCIyNTAiLCIyNTEiLCIyNTIiLCIyNTMiLCIyNTQiLCJ3a3NEZWZpbmUiLCJrZXlPZiIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCIyNTUiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluYWwiLCJ2aWV3UyIsInZpZXdUIiwiMjU2IiwiMjU3IiwiaW5pdCIsIjI1OCIsIjI1OSIsIjI2MCIsIjI2MSIsIjI2MiIsIjI2MyIsIjI2NCIsIjI2NSIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJXRUFLX01BUCIsInRtcCIsIiRXZWFrTWFwIiwiZnJlZXplIiwiMjY3IiwiV0VBS19TRVQiLCIyNjgiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0TWFwIiwiMjY5IiwiZmxhdHRlbiIsImRlcHRoQXJnIiwiMjcwIiwiJGluY2x1ZGVzIiwiMjcxIiwiYXNhcCIsIjI3MiIsImlzRXJyb3IiLCIyNzMiLCIyNzQiLCIyNzUiLCIyNzYiLCIyNzciLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCIyNzgiLCJERUdfUEVSX1JBRCIsIlBJIiwiMjc5IiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsIjI4MCIsImZzY2FsZSIsIjI4MSIsImlhZGRoIiwieDAiLCJ4MSIsInkwIiwieTEiLCIkeDAiLCIkeTAiLCIyODIiLCJpbXVsaCIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsIjI4MyIsImlzdWJoIiwiMjg0IiwiMjg1IiwiMjg2IiwiMjg3Iiwic2lnbmJpdCIsIjI4OCIsInVtdWxoIiwiMjg5IiwiX19kZWZpbmVHZXR0ZXJfXyIsImdldHRlciIsIjI5MCIsIjI5MSIsIjI5MiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiMjkzIiwiX19sb29rdXBHZXR0ZXJfXyIsIjI5NCIsIl9fbG9va3VwU2V0dGVyX18iLCIyOTUiLCIkdmFsdWVzIiwiMjk2IiwiT0JTRVJWQUJMRSIsImNsZWFudXBTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJjbGVhbnVwIiwic3Vic2NyaXB0aW9uQ2xvc2VkIiwiX28iLCJjbG9zZVN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsIm9ic2VydmVyIiwic3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbk9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCJjb21wbGV0ZSIsIiRPYnNlcnZhYmxlIiwic3Vic2NyaWJlIiwib2JzZXJ2YWJsZSIsIml0ZW1zIiwiT2JzZXJ2YWJsZSIsIjI5NyIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCIyOTgiLCJ0cnkiLCIyOTkiLCJtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsIjMwMCIsImRlbGV0ZU1ldGFkYXRhIiwiMzAxIiwiU2V0Iiwib3JkaW5hcnlPd25NZXRhZGF0YUtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJvcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm9LZXlzIiwicEtleXMiLCIzMDIiLCJvcmRpbmFyeUhhc093bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRPd25NZXRhZGF0YSIsImdldE1ldGFkYXRhIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsIjMwMyIsImdldE93bk1ldGFkYXRhS2V5cyIsIjMwNCIsImdldE93bk1ldGFkYXRhIiwiMzA1IiwiaGFzTWV0YWRhdGEiLCJvcmRpbmFyeUhhc01ldGFkYXRhIiwiMzA2IiwiaGFzT3duTWV0YWRhdGEiLCIzMDciLCIkbWV0YWRhdGEiLCIzMDgiLCIzMDkiLCIzMTAiLCIzMTEiLCJhdCIsIjMxMiIsImdldEZsYWdzIiwiUmVnRXhwUHJvdG8iLCIkUmVnRXhwU3RyaW5nSXRlcmF0b3IiLCJfciIsIm1hdGNoQWxsIiwicngiLCIzMTMiLCIkcGFkIiwiMzE0IiwiMzE1IiwiMzE2IiwiMzE3IiwiMzE4IiwiMzE5IiwiMzIwIiwiMzIxIiwiMzIyIiwiMzIzIiwiMzI0IiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIjMyNSIsIiR0YXNrIiwiMzI2IiwicGFydGlhbCIsIm5hdmlnYXRvciIsIk1TSUUiLCJ1c2VyQWdlbnQiLCJ0aW1lIiwic2V0SW50ZXJ2YWwiLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsIl9fYXdhaXQiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiYXN5bmMiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicG9wIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJzdG9wIiwicm9vdFJlY29yZCIsImNvbXBsZXRpb24iLCJydmFsIiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhYnJ1cHQiLCJmaW5hbGx5RW50cnkiLCJhZnRlckxvYyIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInN0YXRlIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInRyeUNhdGNoIiwib2JqIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXR1cm4iLCJpbmZvIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiZmFjdG9yeSIsIm5vR2xvYmFsIiwiY2xhc3MydHlwZSIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImRvYyIsInNjcmlwdCIsInRleHQiLCJwYXJlbnROb2RlIiwidG9UeXBlIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJwdXNoU3RhY2siLCJlbGVtcyIsIm1lcmdlIiwicHJldk9iamVjdCIsImNhbGxiYWNrIiwiZWxlbSIsImVxIiwiZXh0ZW5kIiwib3B0aW9ucyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwiaXNSZWFkeSIsIm5vb3AiLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJndWlkIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsInB1c2hfbmF0aXZlIiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwibm9kZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b1NlbGVjdG9yIiwidGVzdENvbnRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJtYXRjaEluZGV4ZXMiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwic3BlY2lmaWVkIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwiPiIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwicm9vdGpRdWVyeSIsInJlYWR5IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJzaWJsaW5nIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJub1ZhbHVlIiwiQ2FsbGJhY2tzIiwiZmxhZyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwic3BlY2lhbCIsIm1pZ2h0VGhyb3ciLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwiYnVsayIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwicGFyc2UiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJjbGVhclF1ZXVlIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJjc3MiLCJzd2FwIiwib2xkIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJzaG93SGlkZSIsInNob3ciLCJib2R5IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJvZmYiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiZnhOb3ciLCJpblByb2dyZXNzIiwib3B0IiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsImZhZGVUbyIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImNsYXNzIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInVuYmluZCIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJhbGVydCJdLCJtYXBwaW5ncyI6IitQQUFBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLElBQUFFLEVBQUEsbUJBQUFDLFNBQUFBLFFBQUEsSUFBQUYsR0FBQUMsRUFBQSxPQUFBQSxFQUFBRixHQUFBLEdBQUEsR0FBQUksRUFBQSxPQUFBQSxFQUFBSixHQUFBLEdBQUEsSUFBQUssRUFBQSxJQUFBQyxNQUFBLHVCQUFBTixFQUFBLEtBQUEsTUFBQUssRUFBQUUsS0FBQSxtQkFBQUYsRUFBQSxJQUFBRyxFQUFBWCxFQUFBRyxHQUFBLENBQUFTLFFBQUEsSUFBQWIsRUFBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsSUFBQUUsRUFBQUQsRUFBQUksR0FBQSxHQUFBTCxHQUFBLE9BQUFJLEVBQUFGLEdBQUFGLElBQUFhLEVBQUFBLEVBQUFDLFFBQUFkLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsT0FBQUQsRUFBQUcsR0FBQVMsUUFBQSxJQUFBLElBQUFMLEVBQUEsbUJBQUFELFNBQUFBLFFBQUFILEVBQUEsRUFBQUEsRUFBQUYsRUFBQWEsT0FBQVgsSUFBQUQsRUFBQUQsRUFBQUUsSUFBQSxPQUFBRCxFQUFBLENBQUEsQ0FBQWEsRUFBQSxDQUFBLFNBQUFDLEVBQUFDLEVBQUFMLElBQ0EsU0FBQU0sR0FTQSxHQU5BRixFQUFBLEtBRUFBLEVBQUEsS0FFQUEsRUFBQSxHQUVBRSxFQUFBQyxlQUNBLE1BQUEsSUFBQVYsTUFBQSxrREFFQVMsRUFBQUMsZ0JBQUEsRUFH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S0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsS0FDQUEsRUFBQSxLQUNBQyxFQUFBTCxRQUFBSSxFQUFBLEtBRUEsQ0FBQXF6QixJQUFBLElBQUFDLElBQUEsSUFBQUUsSUFBQSxJQUFBQyxJQUFBLElBQUFFLElBQUEsSUFBQUcsSUFBQSxJQUFBQyxJQUFBLElBQUFHLElBQUEsSUFBQUUsSUFBQSxJQUFBRyxJQUFBLElBQUEvRSxJQUFBLElBQUFrRixJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUUsSUFBQSxJQUFBQyxJQUFBLElBQUFJLElBQUEsSUFBQUUsSUFBQSxJQUFBRSxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFHLElBQUEsSUFBQUUsSUFBQSxJQUFBRyxJQUFBLElBQUFDLElBQUEsSUFBQUcsSUFBQSxJQUFBamIsSUFBQSxJQUFBc2IsSUFBQSxJQUFBTSxJQUFBLElBQUFHLElBQUEsSUFBQUcsSUFBQSxJQUFBRSxJQUFBLElBQUFHLElBQUEsSUFBQUUsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQU8sSUFBQSxJQUFBUSxJQUFBLElBQUFHLElBQUEsSUFBQUMsSUFBQSxJQUFBRSxJQUFBLElBQUFDLElBQUEsSUFBQUcsSUFBQSxJQUFBRSxJQUFBLElBQUFFLElBQUEsSUFBQVcsSUFBQSxJQUFBQyxJQUFBLElBQUFFLElBQUEsSUFBQUUsSUFBQSxJQUFBQyxJQUFBLElBQUFFLElBQUEsSUFBQUUsSUFBQSxJQUFBRSxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBYSxJQUFBLElBQUFLLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBRSxJQUFBLElBQUFFLElBQUEsSUFBQUMsSUFBQSxJQUFBRSxJQUFBLElBQUFFLElBQUEsSUFBQUUsSUFBQSxJQUFBRSxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBRSxJQUFBLElBQUFFLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBcUQsSUFBQSxJQUFBTSxJQUFBLElBQUFPLElBQUEsSUFBQUcsSUFBQSxJQUFBRSxJQUFBLElBQUFHLElBQUEsSUFBQUMsSUFBQSxJQUFBRSxJQUFBLElBQUFFLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBRSxJQUFBLElBQUFJLElBQUEsSUFBQVUsSUFBQSxJQUFBRSxJQUFBLElBQUFHLElBQUEsSUFBQUssSUFBQSxJQUFBRyxJQUFBLElBQUF4akMsR0FBQSxHQUFBeWtDLElBQUEsSUFBQUMsSUFBQSxJQUFBRSxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUcsSUFBQSxJQUFBTyxJQUFBLElBQUFDLElBQUEsSUFBQUUsSUFBQSxJQUFBQyxJQUFBLElBQUFJLElBQUEsSUFBQUUsSUFBQSxJQUFBQyxJQUFBLElBQUFFLElBQUEsSUFBQUUsSUFBQSxJQUFBSSxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBSSxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQWtDLElBQUEsSUFBQU0sSUFBQSxJQUFBQyxJQUFBLElBQUFFLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJ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QUE3NkUsRUFBQSs5QyxPQUdBKzhCLEdBQUE5NkUsRUFBQSs2RSxFQXdCQSxPQXRCQWg5QixFQUFBaTlCLFdBQUEsU0FBQWg4QixHQVNBLE9BUkFoL0MsRUFBQSs2RSxJQUFBaDlCLElBQ0EvOUMsRUFBQSs2RSxFQUFBRCxJQUdBOTdCLEdBQUFoL0MsRUFBQSs5QyxTQUFBQSxJQUNBLzlDLEVBQUErOUMsT0FBQTg4QixJQUdBOThCLEdBTUFmLElBQ0FoOUMsRUFBQSs5QyxPQUFBLzlDLEVBQUErNkUsRUFBQWg5QixHQU1BQSxJQ3puVUFnOUIsRUFBQWpyRSxVQUFBbWdELE1BQUEsV0FDQWdyQixNQUFBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbl9kZXJlcV8oMzI3KTtcblxuX2RlcmVxXygzMjgpO1xuXG5fZGVyZXFfKDIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7XG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbn0se1wiMlwiOjIsXCIzMjdcIjozMjcsXCIzMjhcIjozMjh9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTMwKTtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMykuUmVnRXhwLmVzY2FwZTtcblxufSx7XCIxMzBcIjoxMzAsXCIyM1wiOjIzfV0sMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbn0se31dLDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGNvZiA9IF9kZXJlcV8oMTgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcblxufSx7XCIxOFwiOjE4fV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSBfZGVyZXFfKDEyOCkoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIF9kZXJlcV8oNDIpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjQyXCI6NDJ9XSw2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG59LHt9XSw3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxufSx7XCI1MVwiOjUxfV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfZGVyZXFfKDExNCk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG5cbn0se1wiMTE0XCI6MTE0LFwiMTE4XCI6MTE4LFwiMTE5XCI6MTE5fV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfZGVyZXFfKDExNCk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxufSx7XCIxMTRcIjoxMTQsXCIxMThcIjoxMTgsXCIxMTlcIjoxMTl9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxufSx7XCIzOVwiOjM5fV0sMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbn0se1wiMTE0XCI6MTE0LFwiMTE3XCI6MTE3LFwiMTE4XCI6MTE4fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIElPYmplY3QgPSBfZGVyZXFfKDQ3KTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBhc2MgPSBfZGVyZXFfKDE1KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcblxufSx7XCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIxNVwiOjE1LFwiMjVcIjoyNSxcIjQ3XCI6NDd9XSwxMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciBJT2JqZWN0ID0gX2RlcmVxXyg0Nyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcblxufSx7XCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIzXCI6MyxcIjQ3XCI6NDd9XSwxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBpc0FycmF5ID0gX2RlcmVxXyg0OSk7XG52YXIgU1BFQ0lFUyA9IF9kZXJlcV8oMTI4KSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjQ5XCI6NDksXCI1MVwiOjUxfV0sMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9kZXJlcV8oMTQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuXG59LHtcIjE0XCI6MTR9XSwxNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGludm9rZSA9IF9kZXJlcV8oNDYpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcblxufSx7XCIzXCI6MyxcIjQ2XCI6NDYsXCI1MVwiOjUxfV0sMTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSBfZGVyZXFfKDE4KTtcbnZhciBUQUcgPSBfZGVyZXFfKDEyOCkoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxufSx7XCIxMjhcIjoxMjgsXCIxOFwiOjE4fV0sMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG59LHt9XSwxOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZFAgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGNyZWF0ZSA9IF9kZXJlcV8oNzEpO1xudmFyIHJlZGVmaW5lQWxsID0gX2RlcmVxXyg5Myk7XG52YXIgY3R4ID0gX2RlcmVxXygyNSk7XG52YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7XG52YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTtcbnZhciAkaXRlckRlZmluZSA9IF9kZXJlcV8oNTUpO1xudmFyIHN0ZXAgPSBfZGVyZXFfKDU3KTtcbnZhciBzZXRTcGVjaWVzID0gX2RlcmVxXygxMDApO1xudmFyIERFU0NSSVBUT1JTID0gX2RlcmVxXygyOSk7XG52YXIgZmFzdEtleSA9IF9kZXJlcV8oNjYpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcblxufSx7XCIxMDBcIjoxMDAsXCIxMjVcIjoxMjUsXCIyNVwiOjI1LFwiMjlcIjoyOSxcIjM5XCI6MzksXCI1NVwiOjU1LFwiNTdcIjo1NyxcIjZcIjo2LFwiNjZcIjo2NixcIjcxXCI6NzEsXCI3MlwiOjcyLFwiOTNcIjo5M31dLDIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgZnJvbSA9IF9kZXJlcV8oMTApO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuXG59LHtcIjEwXCI6MTAsXCIxN1wiOjE3fV0sMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gX2RlcmVxXyg5Myk7XG52YXIgZ2V0V2VhayA9IF9kZXJlcV8oNjYpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7XG52YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IF9kZXJlcV8oMTIpO1xudmFyICRoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciB2YWxpZGF0ZSA9IF9kZXJlcV8oMTI1KTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG5cbn0se1wiMTJcIjoxMixcIjEyNVwiOjEyNSxcIjM5XCI6MzksXCI0MVwiOjQxLFwiNTFcIjo1MSxcIjZcIjo2LFwiNjZcIjo2NixcIjdcIjo3LFwiOTNcIjo5M31dLDIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xudmFyIG1ldGEgPSBfZGVyZXFfKDY2KTtcbnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpO1xudmFyIGFuSW5zdGFuY2UgPSBfZGVyZXFfKDYpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcbnZhciAkaXRlckRldGVjdCA9IF9kZXJlcV8oNTYpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gX2RlcmVxXygxMDEpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gX2RlcmVxXyg0NSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuXG59LHtcIjEwMVwiOjEwMSxcIjMzXCI6MzMsXCIzNVwiOjM1LFwiMzlcIjozOSxcIjQwXCI6NDAsXCI0NVwiOjQ1LFwiNTFcIjo1MSxcIjU2XCI6NTYsXCI2XCI6NixcIjY2XCI6NjYsXCI5M1wiOjkzLFwiOTRcIjo5NH1dLDIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuMCcgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbn0se31dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBfZGVyZXFfKDcyKTtcbnZhciBjcmVhdGVEZXNjID0gX2RlcmVxXyg5Mik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG59LHtcIjcyXCI6NzIsXCI5MlwiOjkyfV0sMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxufSx7XCIzXCI6M31dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcblxufSx7XCIzNVwiOjM1fV0sMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG5cbn0se1wiMTIwXCI6MTIwLFwiN1wiOjd9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG59LHt9XSwyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cbn0se1wiMzVcIjozNX1dLDMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGRvY3VtZW50ID0gX2RlcmVxXyg0MCkuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG59LHtcIjQwXCI6NDAsXCI1MVwiOjUxfV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cbn0se31dLDMyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IF9kZXJlcV8oODEpO1xudmFyIGdPUFMgPSBfZGVyZXFfKDc4KTtcbnZhciBwSUUgPSBfZGVyZXFfKDgyKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG59LHtcIjc4XCI6NzgsXCI4MVwiOjgxLFwiODJcIjo4Mn1dLDMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBjb3JlID0gX2RlcmVxXygyMyk7XG52YXIgaGlkZSA9IF9kZXJlcV8oNDIpO1xudmFyIHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7XG52YXIgY3R4ID0gX2RlcmVxXygyNSk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG59LHtcIjIzXCI6MjMsXCIyNVwiOjI1LFwiNDBcIjo0MCxcIjQyXCI6NDIsXCI5NFwiOjk0fV0sMzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIE1BVENIID0gX2RlcmVxXygxMjgpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuXG59LHtcIjEyOFwiOjEyOH1dLDM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxufSx7fV0sMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSBfZGVyZXFfKDQyKTtcbnZhciByZWRlZmluZSA9IF9kZXJlcV8oOTQpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xudmFyIHdrcyA9IF9kZXJlcV8oMTI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuICB2YXIgZm5zID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pO1xuICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gIHZhciByeGZuID0gZm5zWzFdO1xuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSkge1xuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjI4XCI6MjgsXCIzNVwiOjM1LFwiNDJcIjo0MixcIjk0XCI6OTR9XSwzNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG59LHtcIjdcIjo3fV0sMzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSBfZGVyZXFfKDQ5KTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpO1xudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gX2RlcmVxXygxMjgpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG5cbn0se1wiMTE4XCI6MTE4LFwiMTI4XCI6MTI4LFwiMjVcIjoyNSxcIjQ5XCI6NDksXCI1MVwiOjUxfV0sMzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIGNhbGwgPSBfZGVyZXFfKDUzKTtcbnZhciBpc0FycmF5SXRlciA9IF9kZXJlcV8oNDgpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBnZXRJdGVyRm4gPSBfZGVyZXFfKDEyOSk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG5cbn0se1wiMTE4XCI6MTE4LFwiMTI5XCI6MTI5LFwiMjVcIjoyNSxcIjQ4XCI6NDgsXCI1M1wiOjUzLFwiN1wiOjd9XSw0MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbn0se31dLDQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cbn0se31dLDQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBkUCA9IF9kZXJlcV8oNzIpO1xudmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyOSkgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxufSx7XCIyOVwiOjI5LFwiNzJcIjo3MixcIjkyXCI6OTJ9XSw0MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZG9jdW1lbnQgPSBfZGVyZXFfKDQwKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG59LHtcIjQwXCI6NDB9XSw0NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9ICFfZGVyZXFfKDI5KSAmJiAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9kZXJlcV8oMzApKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxufSx7XCIyOVwiOjI5LFwiMzBcIjozMCxcIjM1XCI6MzV9XSw0NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oOTkpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuXG59LHtcIjUxXCI6NTEsXCI5OVwiOjk5fV0sNDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuXG59LHt9XSw0NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IF9kZXJlcV8oMTgpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG59LHtcIjE4XCI6MTh9XSw0ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG52YXIgSVRFUkFUT1IgPSBfZGVyZXFfKDEyOCkoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiNThcIjo1OH1dLDQ5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gX2RlcmVxXygxOCk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG59LHtcIjE4XCI6MTh9XSw1MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcblxufSx7XCI1MVwiOjUxfV0sNTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbn0se31dLDUyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgY29mID0gX2RlcmVxXygxOCk7XG52YXIgTUFUQ0ggPSBfZGVyZXFfKDEyOCkoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiMThcIjoxOCxcIjUxXCI6NTF9XSw1MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG59LHtcIjdcIjo3fV0sNTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IF9kZXJlcV8oNzEpO1xudmFyIGRlc2NyaXB0b3IgPSBfZGVyZXFfKDkyKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuX2RlcmVxXyg0MikoSXRlcmF0b3JQcm90b3R5cGUsIF9kZXJlcV8oMTI4KSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cbn0se1wiMTAxXCI6MTAxLFwiMTI4XCI6MTI4LFwiNDJcIjo0MixcIjcxXCI6NzEsXCI5MlwiOjkyfV0sNTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG52YXIgJGl0ZXJDcmVhdGUgPSBfZGVyZXFfKDU0KTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xudmFyIElURVJBVE9SID0gX2RlcmVxXygxMjgpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG59LHtcIjEwMVwiOjEwMSxcIjEyOFwiOjEyOCxcIjMzXCI6MzMsXCI0MVwiOjQxLFwiNDJcIjo0MixcIjU0XCI6NTQsXCI1OFwiOjU4LFwiNjBcIjo2MCxcIjc5XCI6NzksXCI5NFwiOjk0fV0sNTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIElURVJBVE9SID0gX2RlcmVxXygxMjgpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cbn0se1wiMTI4XCI6MTI4fV0sNTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG5cbn0se31dLDU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0ge307XG5cbn0se31dLDU5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnZXRLZXlzID0gX2RlcmVxXyg4MSk7XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBlbCkge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBpZiAoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpIHJldHVybiBrZXk7XG59O1xuXG59LHtcIjExN1wiOjExNyxcIjgxXCI6ODF9XSw2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuXG59LHt9XSw2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcblxufSx7fV0sNjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IF9kZXJlcV8oNjUpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcblxufSx7XCI2NVwiOjY1fV0sNjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG5cbn0se31dLDY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcblxufSx7fV0sNjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcblxufSx7fV0sNjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIE1FVEEgPSBfZGVyZXFfKDEyNCkoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGhhcyA9IF9kZXJlcV8oNDEpO1xudmFyIHNldERlc2MgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbn0se1wiMTI0XCI6MTI0LFwiMzVcIjozNSxcIjQxXCI6NDEsXCI1MVwiOjUxLFwiNzJcIjo3Mn1dLDY3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBNYXAgPSBfZGVyZXFfKDE2MCk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChfZGVyZXFfKDI2NikpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG5cbn0se1wiMTAzXCI6MTAzLFwiMTYwXCI6MTYwLFwiMjY2XCI6MjY2LFwiMzNcIjozM31dLDY4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBtYWNyb3Rhc2sgPSBfZGVyZXFfKDExMykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSBfZGVyZXFfKDE4KShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyXG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG5cbn0se1wiMTEzXCI6MTEzLFwiMThcIjoxOCxcIjQwXCI6NDB9XSw2OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuXG59LHtcIjNcIjozfV0sNzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTtcbnZhciBnT1BTID0gX2RlcmVxXyg3OCk7XG52YXIgcElFID0gX2RlcmVxXyg4Mik7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgSU9iamVjdCA9IF9kZXJlcV8oNDcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcblxufSx7XCIxMTlcIjoxMTksXCIzNVwiOjM1LFwiNDdcIjo0NyxcIjc4XCI6NzgsXCI4MVwiOjgxLFwiODJcIjo4Mn1dLDcxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBkUHMgPSBfZGVyZXFfKDczKTtcbnZhciBlbnVtQnVnS2V5cyA9IF9kZXJlcV8oMzEpO1xudmFyIElFX1BST1RPID0gX2RlcmVxXygxMDIpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IF9kZXJlcV8oMzApKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBfZGVyZXFfKDQzKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cbn0se1wiMTAyXCI6MTAyLFwiMzBcIjozMCxcIjMxXCI6MzEsXCI0M1wiOjQzLFwiN1wiOjcsXCI3M1wiOjczfV0sNzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9kZXJlcV8oNDQpO1xudmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSBfZGVyZXFfKDI5KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG59LHtcIjEyMFwiOjEyMCxcIjI5XCI6MjksXCI0NFwiOjQ0LFwiN1wiOjd9XSw3MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZFAgPSBfZGVyZXFfKDcyKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgZ2V0S2V5cyA9IF9kZXJlcV8oODEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjkpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuXG59LHtcIjI5XCI6MjksXCI3XCI6NyxcIjcyXCI6NzIsXCI4MVwiOjgxfV0sNzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKDYwKSB8fCAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgX2RlcmVxXyg0MClbS107XG59KTtcblxufSx7XCIzNVwiOjM1LFwiNDBcIjo0MCxcIjYwXCI6NjB9XSw3NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgcElFID0gX2RlcmVxXyg4Mik7XG52YXIgY3JlYXRlRGVzYyA9IF9kZXJlcV8oOTIpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9kZXJlcV8oNDQpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSBfZGVyZXFfKDI5KSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG5cbn0se1wiMTE3XCI6MTE3LFwiMTIwXCI6MTIwLFwiMjlcIjoyOSxcIjQxXCI6NDEsXCI0NFwiOjQ0LFwiODJcIjo4MixcIjkyXCI6OTJ9XSw3NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG5cbn0se1wiMTE3XCI6MTE3LFwiNzdcIjo3N31dLDc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IF9kZXJlcV8oODApO1xudmFyIGhpZGRlbktleXMgPSBfZGVyZXFfKDMxKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cbn0se1wiMzFcIjozMSxcIjgwXCI6ODB9XSw3ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG59LHt9XSw3OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IF9kZXJlcV8oNDEpO1xudmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpO1xudmFyIElFX1BST1RPID0gX2RlcmVxXygxMDIpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cbn0se1wiMTAyXCI6MTAyLFwiMTE5XCI6MTE5LFwiNDFcIjo0MX1dLDgwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgYXJyYXlJbmRleE9mID0gX2RlcmVxXygxMSkoZmFsc2UpO1xudmFyIElFX1BST1RPID0gX2RlcmVxXygxMDIpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxufSx7XCIxMDJcIjoxMDIsXCIxMVwiOjExLFwiMTE3XCI6MTE3LFwiNDFcIjo0MX1dLDgxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gX2RlcmVxXyg4MCk7XG52YXIgZW51bUJ1Z0tleXMgPSBfZGVyZXFfKDMxKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG5cbn0se1wiMzFcIjozMSxcIjgwXCI6ODB9XSw4MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5leHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxufSx7fV0sODM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGNvcmUgPSBfZGVyZXFfKDIzKTtcbnZhciBmYWlscyA9IF9kZXJlcV8oMzUpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cbn0se1wiMjNcIjoyMyxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sODQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTtcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgaXNFbnVtID0gX2RlcmVxXyg4MikuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxufSx7XCIxMTdcIjoxMTcsXCI4MVwiOjgxLFwiODJcIjo4Mn1dLDg1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gX2RlcmVxXyg3Nyk7XG52YXIgZ09QUyA9IF9kZXJlcV8oNzgpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBSZWZsZWN0ID0gX2RlcmVxXyg0MCkuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcblxufSx7XCI0MFwiOjQwLFwiN1wiOjcsXCI3N1wiOjc3LFwiNzhcIjo3OH1dLDg2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkcGFyc2VGbG9hdCA9IF9kZXJlcV8oNDApLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSBfZGVyZXFfKDExMSkudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQoX2RlcmVxXygxMTIpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG5cbn0se1wiMTExXCI6MTExLFwiMTEyXCI6MTEyLFwiNDBcIjo0MH1dLDg3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkcGFyc2VJbnQgPSBfZGVyZXFfKDQwKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IF9kZXJlcV8oMTExKS50cmltO1xudmFyIHdzID0gX2RlcmVxXygxMTIpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcblxufSx7XCIxMTFcIjoxMTEsXCIxMTJcIjoxMTIsXCI0MFwiOjQwfV0sODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHBhdGggPSBfZGVyZXFfKDg5KTtcbnZhciBpbnZva2UgPSBfZGVyZXFfKDQ2KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLyogLi4ucGFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIHBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgXyA9IHBhdGguXztcbiAgdmFyIGhvbGRlciA9IGZhbHNlO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKChwYXJnc1tpXSA9IGFyZ3VtZW50c1tpKytdKSA9PT0gXykgaG9sZGVyID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGsgPSAwO1xuICAgIHZhciBhcmdzO1xuICAgIGlmICghaG9sZGVyICYmICFhTGVuKSByZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7XG4gICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7XG4gICAgaWYgKGhvbGRlcikgZm9yICg7bGVuZ3RoID4gajsgaisrKSBpZiAoYXJnc1tqXSA9PT0gXykgYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdO1xuICAgIHdoaWxlIChhTGVuID4gaykgYXJncy5wdXNoKGFyZ3VtZW50c1trKytdKTtcbiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbn07XG5cbn0se1wiM1wiOjMsXCI0NlwiOjQ2LFwiODlcIjo4OX1dLDg5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXyg0MCk7XG5cbn0se1wiNDBcIjo0MH1dLDkwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG5cbn0se31dLDkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9kZXJlcV8oNjkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuXG59LHtcIjY5XCI6Njl9XSw5MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG59LHt9XSw5MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG59LHtcIjk0XCI6OTR9XSw5NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgaGlkZSA9IF9kZXJlcV8oNDIpO1xudmFyIGhhcyA9IF9kZXJlcV8oNDEpO1xudmFyIFNSQyA9IF9kZXJlcV8oMTI0KSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxuX2RlcmVxXygyMykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcblxufSx7XCIxMjRcIjoxMjQsXCIyM1wiOjIzLFwiNDBcIjo0MCxcIjQxXCI6NDEsXCI0MlwiOjQyfV0sOTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG5cbn0se31dLDk2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcblxufSx7fV0sOTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIGZvck9mID0gX2RlcmVxXygzOSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuXG59LHtcIjI1XCI6MjUsXCIzXCI6MyxcIjMzXCI6MzMsXCIzOVwiOjM5fV0sOTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBBcnJheShsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkgQVtsZW5ndGhdID0gYXJndW1lbnRzW2xlbmd0aF07XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcblxufSx7XCIzM1wiOjMzfV0sOTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IF9kZXJlcV8oMjUpKEZ1bmN0aW9uLmNhbGwsIF9kZXJlcV8oNzUpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG59LHtcIjI1XCI6MjUsXCI1MVwiOjUxLFwiN1wiOjcsXCI3NVwiOjc1fV0sMTAwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBkUCA9IF9kZXJlcV8oNzIpO1xudmFyIERFU0NSSVBUT1JTID0gX2RlcmVxXygyOSk7XG52YXIgU1BFQ0lFUyA9IF9kZXJlcV8oMTI4KSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjI5XCI6MjksXCI0MFwiOjQwLFwiNzJcIjo3Mn1dLDEwMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZGVmID0gX2RlcmVxXyg3MikuZjtcbnZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciBUQUcgPSBfZGVyZXFfKDEyOCkoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiNDFcIjo0MSxcIjcyXCI6NzJ9XSwxMDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKSgna2V5cycpO1xudmFyIHVpZCA9IF9kZXJlcV8oMTI0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcblxufSx7XCIxMDNcIjoxMDMsXCIxMjRcIjoxMjR9XSwxMDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxufSx7XCI0MFwiOjQwfV0sMTA0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIFNQRUNJRVMgPSBfZGVyZXFfKDEyOCkoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiM1wiOjMsXCI3XCI6N31dLDEwNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG5cbn0se1wiMzVcIjozNX1dLDEwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbn0se1wiMTE2XCI6MTE2LFwiMjhcIjoyOH1dLDEwNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcblxufSx7XCIyOFwiOjI4LFwiNTJcIjo1Mn1dLDEwODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG5cbn0se1wiMjhcIjoyOCxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sMTA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgcmVwZWF0ID0gX2RlcmVxXygxMTApO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG5cbn0se1wiMTEwXCI6MTEwLFwiMTE4XCI6MTE4LFwiMjhcIjoyOH1dLDExMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcblxufSx7XCIxMTZcIjoxMTYsXCIyOFwiOjI4fV0sMTExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgc3BhY2VzID0gX2RlcmVxXygxMTIpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuXG59LHtcIjExMlwiOjExMixcIjI4XCI6MjgsXCIzM1wiOjMzLFwiMzVcIjozNX1dLDExMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG5cbn0se31dLDExMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgY3R4ID0gX2RlcmVxXygyNSk7XG52YXIgaW52b2tlID0gX2RlcmVxXyg0Nik7XG52YXIgaHRtbCA9IF9kZXJlcV8oNDMpO1xudmFyIGNlbCA9IF9kZXJlcV8oMzApO1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChfZGVyZXFfKDE4KShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuXG59LHtcIjE4XCI6MTgsXCIyNVwiOjI1LFwiMzBcIjozMCxcIjQwXCI6NDAsXCI0M1wiOjQzLFwiNDZcIjo0Nn1dLDExNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxufSx7XCIxMTZcIjoxMTZ9XSwxMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG5cbn0se1wiMTE2XCI6MTE2LFwiMTE4XCI6MTE4fV0sMTE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG59LHt9XSwxMTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IF9kZXJlcV8oNDcpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cbn0se1wiMjhcIjoyOCxcIjQ3XCI6NDd9XSwxMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG5cbn0se1wiMTE2XCI6MTE2fV0sMTE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gX2RlcmVxXygyOCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cbn0se1wiMjhcIjoyOH1dLDEyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cbn0se1wiNTFcIjo1MX1dLDEyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5pZiAoX2RlcmVxXygyOSkpIHtcbiAgdmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbiAgdmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xuICB2YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcbiAgdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbiAgdmFyICR0eXBlZCA9IF9kZXJlcV8oMTIzKTtcbiAgdmFyICRidWZmZXIgPSBfZGVyZXFfKDEyMik7XG4gIHZhciBjdHggPSBfZGVyZXFfKDI1KTtcbiAgdmFyIGFuSW5zdGFuY2UgPSBfZGVyZXFfKDYpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gX2RlcmVxXyg5Mik7XG4gIHZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG4gIHZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xuICB2YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xuICB2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG4gIHZhciB0b0luZGV4ID0gX2RlcmVxXygxMTUpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpO1xuICB2YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7XG4gIHZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbiAgdmFyIGNsYXNzb2YgPSBfZGVyZXFfKDE3KTtcbiAgdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG4gIHZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gX2RlcmVxXyg0OCk7XG4gIHZhciBjcmVhdGUgPSBfZGVyZXFfKDcxKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG4gIHZhciBnT1BOID0gX2RlcmVxXyg3NykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IF9kZXJlcV8oMTI5KTtcbiAgdmFyIHVpZCA9IF9kZXJlcV8oMTI0KTtcbiAgdmFyIHdrcyA9IF9kZXJlcV8oMTI4KTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gX2RlcmVxXygxMik7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gX2RlcmVxXygxMSk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfZGVyZXFfKDEwNCk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IF9kZXJlcV8oMTQxKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IF9kZXJlcV8oNTgpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSBfZGVyZXFfKDU2KTtcbiAgdmFyIHNldFNwZWNpZXMgPSBfZGVyZXFfKDEwMCk7XG4gIHZhciBhcnJheUZpbGwgPSBfZGVyZXFfKDkpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gX2RlcmVxXyg4KTtcbiAgdmFyICREUCA9IF9kZXJlcV8oNzIpO1xuICB2YXIgJEdPUEQgPSBfZGVyZXFfKDc1KTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbn0se1wiMTAwXCI6MTAwLFwiMTA0XCI6MTA0LFwiMTFcIjoxMSxcIjExNFwiOjExNCxcIjExNVwiOjExNSxcIjExNlwiOjExNixcIjExOFwiOjExOCxcIjExOVwiOjExOSxcIjEyXCI6MTIsXCIxMjBcIjoxMjAsXCIxMjJcIjoxMjIsXCIxMjNcIjoxMjMsXCIxMjRcIjoxMjQsXCIxMjhcIjoxMjgsXCIxMjlcIjoxMjksXCIxNDFcIjoxNDEsXCIxN1wiOjE3LFwiMjVcIjoyNSxcIjI5XCI6MjksXCIzM1wiOjMzLFwiMzVcIjozNSxcIjQwXCI6NDAsXCI0MVwiOjQxLFwiNDJcIjo0MixcIjQ4XCI6NDgsXCI1MVwiOjUxLFwiNTZcIjo1NixcIjU4XCI6NTgsXCI2XCI6NixcIjYwXCI6NjAsXCI3MVwiOjcxLFwiNzJcIjo3MixcIjc1XCI6NzUsXCI3N1wiOjc3LFwiNzlcIjo3OSxcIjhcIjo4LFwiOVwiOjksXCI5MlwiOjkyLFwiOTNcIjo5M31dLDEyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgREVTQ1JJUFRPUlMgPSBfZGVyZXFfKDI5KTtcbnZhciBMSUJSQVJZID0gX2RlcmVxXyg2MCk7XG52YXIgJHR5cGVkID0gX2RlcmVxXygxMjMpO1xudmFyIGhpZGUgPSBfZGVyZXFfKDQyKTtcbnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpO1xudmFyIHRvSW5kZXggPSBfZGVyZXFfKDExNSk7XG52YXIgZ09QTiA9IF9kZXJlcV8oNzcpLmY7XG52YXIgZFAgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGFycmF5RmlsbCA9IF9kZXJlcV8oOSk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSBfZGVyZXFfKDEwMSk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG5cbn0se1wiMTAxXCI6MTAxLFwiMTE1XCI6MTE1LFwiMTE2XCI6MTE2LFwiMTE4XCI6MTE4LFwiMTIzXCI6MTIzLFwiMjlcIjoyOSxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiNDJcIjo0MixcIjZcIjo2LFwiNjBcIjo2MCxcIjcyXCI6NzIsXCI3N1wiOjc3LFwiOVwiOjksXCI5M1wiOjkzfV0sMTIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG52YXIgdWlkID0gX2RlcmVxXygxMjQpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcblxufSx7XCIxMjRcIjoxMjQsXCI0MFwiOjQwLFwiNDJcIjo0Mn1dLDEyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxufSx7fV0sMTI1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbn0se1wiNTFcIjo1MX1dLDEyNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgY29yZSA9IF9kZXJlcV8oMjMpO1xudmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbnZhciB3a3NFeHQgPSBfZGVyZXFfKDEyNyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBfZGVyZXFfKDcyKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuXG59LHtcIjEyN1wiOjEyNyxcIjIzXCI6MjMsXCI0MFwiOjQwLFwiNjBcIjo2MCxcIjcyXCI6NzJ9XSwxMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuZXhwb3J0cy5mID0gX2RlcmVxXygxMjgpO1xuXG59LHtcIjEyOFwiOjEyOH1dLDEyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgc3RvcmUgPSBfZGVyZXFfKDEwMykoJ3drcycpO1xudmFyIHVpZCA9IF9kZXJlcV8oMTI0KTtcbnZhciBTeW1ib2wgPSBfZGVyZXFfKDQwKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxufSx7XCIxMDNcIjoxMDMsXCIxMjRcIjoxMjQsXCI0MFwiOjQwfV0sMTI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgSVRFUkFUT1IgPSBfZGVyZXFfKDEyOCkoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjMpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiMTdcIjoxNyxcIjIzXCI6MjMsXCI1OFwiOjU4fV0sMTMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHJlID0gX2RlcmVxXyg5NSkoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcblxufSx7XCIzM1wiOjMzLFwiOTVcIjo5NX1dLDEzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IF9kZXJlcV8oOCkgfSk7XG5cbl9kZXJlcV8oNSkoJ2NvcHlXaXRoaW4nKTtcblxufSx7XCIzM1wiOjMzLFwiNVwiOjUsXCI4XCI6OH1dLDEzMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRldmVyeSA9IF9kZXJlcV8oMTIpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogX2RlcmVxXyg5KSB9KTtcblxuX2RlcmVxXyg1KSgnZmlsbCcpO1xuXG59LHtcIjMzXCI6MzMsXCI1XCI6NSxcIjlcIjo5fV0sMTM0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGZpbHRlciA9IF9kZXJlcV8oMTIpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cbn0se1wiMTA1XCI6MTA1LFwiMTJcIjoxMixcIjMzXCI6MzN9XSwxMzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRmaW5kID0gX2RlcmVxXygxMikoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbl9kZXJlcV8oNSkoS0VZKTtcblxufSx7XCIxMlwiOjEyLFwiMzNcIjozMyxcIjVcIjo1fV0sMTM2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGZpbmQgPSBfZGVyZXFfKDEyKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuX2RlcmVxXyg1KShLRVkpO1xuXG59LHtcIjEyXCI6MTIsXCIzM1wiOjMzLFwiNVwiOjV9XSwxMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkZm9yRWFjaCA9IF9kZXJlcV8oMTIpKDApO1xudmFyIFNUUklDVCA9IF9kZXJlcV8oMTA1KShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSBfZGVyZXFfKDI1KTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgY2FsbCA9IF9kZXJlcV8oNTMpO1xudmFyIGlzQXJyYXlJdGVyID0gX2RlcmVxXyg0OCk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfZGVyZXFfKDI0KTtcbnZhciBnZXRJdGVyRm4gPSBfZGVyZXFfKDEyOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9kZXJlcV8oNTYpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG59LHtcIjExOFwiOjExOCxcIjExOVwiOjExOSxcIjEyOVwiOjEyOSxcIjI0XCI6MjQsXCIyNVwiOjI1LFwiMzNcIjozMyxcIjQ4XCI6NDgsXCI1M1wiOjUzLFwiNTZcIjo1Nn1dLDEzOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRpbmRleE9mID0gX2RlcmVxXygxMSkoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIV9kZXJlcV8oMTA1KSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjExXCI6MTEsXCIzM1wiOjMzfV0sMTQwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiBfZGVyZXFfKDQ5KSB9KTtcblxufSx7XCIzM1wiOjMzLFwiNDlcIjo0OX1dLDE0MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IF9kZXJlcV8oNSk7XG52YXIgc3RlcCA9IF9kZXJlcV8oNTcpO1xudmFyIEl0ZXJhdG9ycyA9IF9kZXJlcV8oNTgpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKDU1KShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG59LHtcIjExN1wiOjExNyxcIjVcIjo1LFwiNTVcIjo1NSxcIjU3XCI6NTcsXCI1OFwiOjU4fV0sMTQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoX2RlcmVxXyg0NykgIT0gT2JqZWN0IHx8ICFfZGVyZXFfKDEwNSkoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjExN1wiOjExNyxcIjMzXCI6MzMsXCI0N1wiOjQ3fV0sMTQzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIV9kZXJlcV8oMTA1KSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcblxufSx7XCIxMDVcIjoxMDUsXCIxMTZcIjoxMTYsXCIxMTdcIjoxMTcsXCIxMThcIjoxMTgsXCIzM1wiOjMzfV0sMTQ0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJG1hcCA9IF9kZXJlcV8oMTIpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfZGVyZXFfKDI0KTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG59LHtcIjI0XCI6MjQsXCIzM1wiOjMzLFwiMzVcIjozNX1dLDE0NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRyZWR1Y2UgPSBfZGVyZXFfKDEzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcblxufSx7XCIxMDVcIjoxMDUsXCIxM1wiOjEzLFwiMzNcIjozM31dLDE0NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRyZWR1Y2UgPSBfZGVyZXFfKDEzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEzXCI6MTMsXCIzM1wiOjMzfV0sMTQ4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgaHRtbCA9IF9kZXJlcV8oNDMpO1xudmFyIGNvZiA9IF9kZXJlcV8oMTgpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9kZXJlcV8oMTE0KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcblxufSx7XCIxMTRcIjoxMTQsXCIxMThcIjoxMTgsXCIxOFwiOjE4LFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0M1wiOjQzfV0sMTQ5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHNvbWUgPSBfZGVyZXFfKDEyKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTUwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciBmYWlscyA9IF9kZXJlcV8oMzUpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhX2RlcmVxXygxMDUpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcblxufSx7XCIxMDVcIjoxMDUsXCIxMTlcIjoxMTksXCIzXCI6MyxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sMTUxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTAwKSgnQXJyYXknKTtcblxufSx7XCIxMDBcIjoxMDB9XSwxNTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG5cbn0se1wiMzNcIjozM31dLDE1MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciB0b0lTT1N0cmluZyA9IF9kZXJlcV8oMjYpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuXG59LHtcIjI2XCI6MjYsXCIzM1wiOjMzfV0sMTU0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuXG59LHtcIjExOVwiOjExOSxcIjEyMFwiOjEyMCxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sMTU1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBUT19QUklNSVRJVkUgPSBfZGVyZXFfKDEyOCkoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgX2RlcmVxXyg0MikocHJvdG8sIFRPX1BSSU1JVElWRSwgX2RlcmVxXygyNykpO1xuXG59LHtcIjEyOFwiOjEyOCxcIjI3XCI6MjcsXCI0MlwiOjQyfV0sMTU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIF9kZXJlcV8oOTQpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG5cbn0se1wiOTRcIjo5NH1dLDE1NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiBfZGVyZXFfKDE2KSB9KTtcblxufSx7XCIxNlwiOjE2LFwiMzNcIjozM31dLDE1ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xudmFyIEhBU19JTlNUQU5DRSA9IF9kZXJlcV8oMTI4KSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIF9kZXJlcV8oNzIpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcblxufSx7XCIxMjhcIjoxMjgsXCI1MVwiOjUxLFwiNzJcIjo3MixcIjc5XCI6Nzl9XSwxNTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGRQID0gX2RlcmVxXyg3MikuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IF9kZXJlcV8oMjkpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIyOVwiOjI5LFwiNzJcIjo3Mn1dLDE2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gX2RlcmVxXygxOSk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMikoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuXG59LHtcIjEyNVwiOjEyNSxcIjE5XCI6MTksXCIyMlwiOjIyfV0sMTYxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgbG9nMXAgPSBfZGVyZXFfKDYzKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNjNcIjo2M31dLDE2MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuXG59LHtcIjMzXCI6MzN9XSwxNjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE2NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgc2lnbiA9IF9kZXJlcV8oNjUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNjVcIjo2NX1dLDE2NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwxNjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGV4cG0xID0gX2RlcmVxXyg2MSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG5cbn0se1wiMzNcIjozMyxcIjYxXCI6NjF9XSwxNjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogX2RlcmVxXyg2MikgfSk7XG5cbn0se1wiMzNcIjozMyxcIjYyXCI6NjJ9XSwxNjk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE3MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiMzVcIjozNX1dLDE3MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMTcyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiBfZGVyZXFfKDYzKSB9KTtcblxufSx7XCIzM1wiOjMzLFwiNjNcIjo2M31dLDE3MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMTc0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogX2RlcmVxXyg2NSkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjY1XCI6NjV9XSwxNzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBleHBtMSA9IF9kZXJlcV8oNjEpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiMzVcIjozNSxcIjYxXCI6NjF9XSwxNzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBleHBtMSA9IF9kZXJlcV8oNjEpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNjFcIjo2MX1dLDE3NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE3ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgY29mID0gX2RlcmVxXygxOCk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSBfZGVyZXFfKDQ1KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBmYWlscyA9IF9kZXJlcV8oMzUpO1xudmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mO1xudmFyIGdPUEQgPSBfZGVyZXFfKDc1KS5mO1xudmFyIGRQID0gX2RlcmVxXyg3MikuZjtcbnZhciAkdHJpbSA9IF9kZXJlcV8oMTExKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihfZGVyZXFfKDcxKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBfZGVyZXFfKDI5KSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICBfZGVyZXFfKDk0KShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG5cbn0se1wiMTExXCI6MTExLFwiMTIwXCI6MTIwLFwiMThcIjoxOCxcIjI5XCI6MjksXCIzNVwiOjM1LFwiNDBcIjo0MCxcIjQxXCI6NDEsXCI0NVwiOjQ1LFwiNzFcIjo3MSxcIjcyXCI6NzIsXCI3NVwiOjc1LFwiNzdcIjo3NyxcIjk0XCI6OTR9XSwxNzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuXG59LHtcIjMzXCI6MzN9XSwxODA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgX2lzRmluaXRlID0gX2RlcmVxXyg0MCkuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI0MFwiOjQwfV0sMTgxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogX2RlcmVxXyg1MCkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjUwXCI6NTB9XSwxODI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMTgzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgaXNJbnRlZ2VyID0gX2RlcmVxXyg1MCk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNTBcIjo1MH1dLDE4NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG5cbn0se1wiMzNcIjozM31dLDE4NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcblxufSx7XCIzM1wiOjMzfV0sMTg2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHBhcnNlRmxvYXQgPSBfZGVyZXFfKDg2KTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuXG59LHtcIjMzXCI6MzMsXCI4NlwiOjg2fV0sMTg3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHBhcnNlSW50ID0gX2RlcmVxXyg4Nyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcblxufSx7XCIzM1wiOjMzLFwiODdcIjo4N31dLDE4ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTtcbnZhciBhTnVtYmVyVmFsdWUgPSBfZGVyZXFfKDQpO1xudmFyIHJlcGVhdCA9IF9kZXJlcV8oMTEwKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcblxufSx7XCIxMTBcIjoxMTAsXCIxMTZcIjoxMTYsXCIzM1wiOjMzLFwiMzVcIjozNSxcIjRcIjo0fV0sMTg5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgYU51bWJlclZhbHVlID0gX2RlcmVxXyg0KTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCIzNVwiOjM1LFwiNFwiOjR9XSwxOTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IF9kZXJlcV8oNzApIH0pO1xuXG59LHtcIjMzXCI6MzMsXCI3MFwiOjcwfV0sMTkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IF9kZXJlcV8oNzEpIH0pO1xuXG59LHtcIjMzXCI6MzMsXCI3MVwiOjcxfV0sMTkyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFfZGVyZXFfKDI5KSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogX2RlcmVxXyg3MykgfSk7XG5cbn0se1wiMjlcIjoyOSxcIjMzXCI6MzMsXCI3M1wiOjczfV0sMTkzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygyOSksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiBfZGVyZXFfKDcyKS5mIH0pO1xuXG59LHtcIjI5XCI6MjksXCIzM1wiOjMzLFwiNzJcIjo3Mn1dLDE5NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBtZXRhID0gX2RlcmVxXyg2Nikub25GcmVlemU7XG5cbl9kZXJlcV8oODMpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG59LHtcIjUxXCI6NTEsXCI2NlwiOjY2LFwiODNcIjo4M31dLDE5NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfZGVyZXFfKDc1KS5mO1xuXG5fZGVyZXFfKDgzKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG5cbn0se1wiMTE3XCI6MTE3LFwiNzVcIjo3NSxcIjgzXCI6ODN9XSwxOTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbl9kZXJlcV8oODMpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2RlcmVxXyg3NikuZjtcbn0pO1xuXG59LHtcIjc2XCI6NzYsXCI4M1wiOjgzfV0sMTk3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xuXG5fZGVyZXFfKDgzKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG59LHtcIjExOVwiOjExOSxcIjc5XCI6NzksXCI4M1wiOjgzfV0sMTk4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcblxuX2RlcmVxXyg4MykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG5cbn0se1wiNTFcIjo1MSxcIjgzXCI6ODN9XSwxOTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG5cbl9kZXJlcV8oODMpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxufSx7XCI1MVwiOjUxLFwiODNcIjo4M31dLDIwMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcblxuX2RlcmVxXyg4MykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuXG59LHtcIjUxXCI6NTEsXCI4M1wiOjgzfV0sMjAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiBfZGVyZXFfKDk2KSB9KTtcblxufSx7XCIzM1wiOjMzLFwiOTZcIjo5Nn1dLDIwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciAka2V5cyA9IF9kZXJlcV8oODEpO1xuXG5fZGVyZXFfKDgzKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG59LHtcIjExOVwiOjExOSxcIjgxXCI6ODEsXCI4M1wiOjgzfV0sMjAzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIG1ldGEgPSBfZGVyZXFfKDY2KS5vbkZyZWV6ZTtcblxuX2RlcmVxXyg4MykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG59LHtcIjUxXCI6NTEsXCI2NlwiOjY2LFwiODNcIjo4M31dLDIwNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIG1ldGEgPSBfZGVyZXFfKDY2KS5vbkZyZWV6ZTtcblxuX2RlcmVxXyg4MykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxufSx7XCI1MVwiOjUxLFwiNjZcIjo2NixcIjgzXCI6ODN9XSwyMDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IF9kZXJlcV8oOTkpLnNldCB9KTtcblxufSx7XCIzM1wiOjMzLFwiOTlcIjo5OX1dLDIwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtfZGVyZXFfKDEyOCkoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgX2RlcmVxXyg5NCkoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cblxufSx7XCIxMjhcIjoxMjgsXCIxN1wiOjE3LFwiOTRcIjo5NH1dLDIwNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYXJzZUZsb2F0ID0gX2RlcmVxXyg4Nik7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcblxufSx7XCIzM1wiOjMzLFwiODZcIjo4Nn1dLDIwODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYXJzZUludCA9IF9kZXJlcV8oODcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG5cbn0se1wiMzNcIjozMyxcIjg3XCI6ODd9XSwyMDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBjdHggPSBfZGVyZXFfKDI1KTtcbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciBhbkluc3RhbmNlID0gX2RlcmVxXyg2KTtcbnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9kZXJlcV8oMTA0KTtcbnZhciB0YXNrID0gX2RlcmVxXygxMTMpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSBfZGVyZXFfKDY4KSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gX2RlcmVxXyg2OSk7XG52YXIgcGVyZm9ybSA9IF9kZXJlcV8oOTApO1xudmFyIHByb21pc2VSZXNvbHZlID0gX2RlcmVxXyg5MSk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW19kZXJlcV8oMTI4KSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgc2FtZUNvbnN0cnVjdG9yID0gTElCUkFSWSA/IGZ1bmN0aW9uIChhLCBiKSB7XG4gIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZVxuICByZXR1cm4gYSA9PT0gYiB8fCBhID09PSAkUHJvbWlzZSAmJiBiID09PSBXcmFwcGVyO1xufSA6IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgaWYgKHByb21pc2UuX2ggPT0gMSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2M7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlYWN0aW9uO1xuICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkge1xuICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTtcbiAgICBpZiAocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpIHJldHVybiBmYWxzZTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gX2RlcmVxXyg5MykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBzYW1lQ29uc3RydWN0b3IoJFByb21pc2UsIEMpXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5fZGVyZXFfKDEwMSkoJFByb21pc2UsIFBST01JU0UpO1xuX2RlcmVxXygxMDApKFBST01JU0UpO1xuV3JhcHBlciA9IF9kZXJlcV8oMjMpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZiAoeCBpbnN0YW5jZW9mICRQcm9taXNlICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSkgcmV0dXJuIHg7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIF9kZXJlcV8oNTYpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxufSx7XCIxMDBcIjoxMDAsXCIxMDFcIjoxMDEsXCIxMDRcIjoxMDQsXCIxMTNcIjoxMTMsXCIxMjhcIjoxMjgsXCIxN1wiOjE3LFwiMjNcIjoyMyxcIjI1XCI6MjUsXCIzXCI6MyxcIjMzXCI6MzMsXCIzOVwiOjM5LFwiNDBcIjo0MCxcIjUxXCI6NTEsXCI1NlwiOjU2LFwiNlwiOjYsXCI2MFwiOjYwLFwiNjhcIjo2OCxcIjY5XCI6NjksXCI5MFwiOjkwLFwiOTFcIjo5MSxcIjkzXCI6OTN9XSwyMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIHJBcHBseSA9IChfZGVyZXFfKDQwKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuXG59LHtcIjNcIjozLFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiN1wiOjd9XSwyMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBjcmVhdGUgPSBfZGVyZXFfKDcxKTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgYmluZCA9IF9kZXJlcV8oMTYpO1xudmFyIHJDb25zdHJ1Y3QgPSAoX2RlcmVxXyg0MCkuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG5cbn0se1wiMTZcIjoxNixcIjNcIjozLFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiNTFcIjo1MSxcIjdcIjo3LFwiNzFcIjo3MX1dLDIxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gX2RlcmVxXyg3Mik7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuXG59LHtcIjEyMFwiOjEyMCxcIjMzXCI6MzMsXCIzNVwiOjM1LFwiN1wiOjcsXCI3MlwiOjcyfV0sMjEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGdPUEQgPSBfZGVyZXFfKDc1KS5mO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjdcIjo3LFwiNzVcIjo3NX1dLDIxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbl9kZXJlcV8oNTQpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI1NFwiOjU0LFwiN1wiOjd9XSwyMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiN1wiOjcsXCI3NVwiOjc1fV0sMjE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgZ2V0UHJvdG8gPSBfZGVyZXFfKDc5KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjdcIjo3LFwiNzlcIjo3OX1dLDIxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG5cbn0se1wiMzNcIjozMyxcIjQxXCI6NDEsXCI1MVwiOjUxLFwiN1wiOjcsXCI3NVwiOjc1LFwiNzlcIjo3OX1dLDIxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjdcIjo3fV0sMjIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogX2RlcmVxXyg4NSkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjg1XCI6ODV9XSwyMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiN1wiOjd9XSwyMjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHNldFByb3RvID0gX2RlcmVxXyg5OSk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiOTlcIjo5OX1dLDIyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gX2RlcmVxXyg3Mik7XG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcblxufSx7XCIzM1wiOjMzLFwiNDFcIjo0MSxcIjUxXCI6NTEsXCI3XCI6NyxcIjcyXCI6NzIsXCI3NVwiOjc1LFwiNzlcIjo3OSxcIjkyXCI6OTJ9XSwyMjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gX2RlcmVxXyg0NSk7XG52YXIgZFAgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mO1xudmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7XG52YXIgJGZsYWdzID0gX2RlcmVxXygzNyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKF9kZXJlcV8oMjkpICYmICghQ09SUkVDVF9ORVcgfHwgX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZTJbX2RlcmVxXygxMjgpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICBfZGVyZXFfKDk0KShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxuX2RlcmVxXygxMDApKCdSZWdFeHAnKTtcblxufSx7XCIxMDBcIjoxMDAsXCIxMjhcIjoxMjgsXCIyOVwiOjI5LFwiMzVcIjozNSxcIjM3XCI6MzcsXCI0MFwiOjQwLFwiNDVcIjo0NSxcIjUyXCI6NTIsXCI3MlwiOjcyLFwiNzdcIjo3NyxcIjk0XCI6OTR9XSwyMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKF9kZXJlcV8oMjkpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSBfZGVyZXFfKDcyKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IF9kZXJlcV8oMzcpXG59KTtcblxufSx7XCIyOVwiOjI5LFwiMzdcIjozNyxcIjcyXCI6NzJ9XSwyMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gQEBtYXRjaCBsb2dpY1xuX2RlcmVxXygzNikoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpIHtcbiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTtcblxufSx7XCIzNlwiOjM2fV0sMjI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIEBAcmVwbGFjZSBsb2dpY1xuX2RlcmVxXygzNikoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuXG59LHtcIjM2XCI6MzZ9XSwyMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gQEBzZWFyY2ggbG9naWNcbl9kZXJlcV8oMzYpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcblxufSx7XCIzNlwiOjM2fV0sMjI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIEBAc3BsaXQgbG9naWNcbl9kZXJlcV8oMzYpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7XG4gIHZhciBfc3BsaXQgPSAkc3BsaXQ7XG4gIHZhciAkcHVzaCA9IFtdLnB1c2g7XG4gIHZhciAkU1BMSVQgPSAnc3BsaXQnO1xuICB2YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG4gIHZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgdmFyIE5QQ0cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHVuZGVmaW5lZDsgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuIF9zcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTtcbiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgaWYgKCFOUENHKSBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZykpIHtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0dcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgaWYgKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKSBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKykgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7XG5cbn0se1wiMzZcIjozNixcIjUyXCI6NTJ9XSwyMzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuX2RlcmVxXygyMjUpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciAkZmxhZ3MgPSBfZGVyZXFfKDM3KTtcbnZhciBERVNDUklQVE9SUyA9IF9kZXJlcV8oMjkpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgX2RlcmVxXyg5NCkoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAoX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuXG59LHtcIjIyNVwiOjIyNSxcIjI5XCI6MjksXCIzNVwiOjM1LFwiMzdcIjozNyxcIjdcIjo3LFwiOTRcIjo5NH1dLDIzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gX2RlcmVxXygxOSk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMikoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG5cbn0se1wiMTI1XCI6MTI1LFwiMTlcIjoxOSxcIjIyXCI6MjJ9XSwyMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxuX2RlcmVxXygxMDgpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5fZGVyZXFfKDEwOCkoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbl9kZXJlcV8oMTA4KSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEwOFwiOjEwOH1dLDIzNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5fZGVyZXFfKDEwOCkoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkYXQgPSBfZGVyZXFfKDEwNikoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcblxufSx7XCIxMDZcIjoxMDYsXCIzM1wiOjMzfV0sMjM3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNCkoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG59LHtcIjEwN1wiOjEwNyxcIjExOFwiOjExOCxcIjMzXCI6MzMsXCIzNFwiOjM0fV0sMjM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5fZGVyZXFfKDEwOCkoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbl9kZXJlcV8oMTA4KSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG5cbn0se1wiMTA4XCI6MTA4fV0sMjQwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxuX2RlcmVxXygxMDgpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG5cbn0se1wiMTA4XCI6MTA4fV0sMjQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG59LHtcIjExNFwiOjExNCxcIjMzXCI6MzN9XSwyNDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNCkoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxufSx7XCIxMDdcIjoxMDcsXCIzM1wiOjMzLFwiMzRcIjozNH1dLDI0MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5fZGVyZXFfKDEwOCkoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyNDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IF9kZXJlcV8oMTA2KSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxuX2RlcmVxXyg1NSkoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcblxufSx7XCIxMDZcIjoxMDYsXCI1NVwiOjU1fV0sMjQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5fZGVyZXFfKDEwOCkoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEwOFwiOjEwOH1dLDI0NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG59LHtcIjExN1wiOjExNyxcIjExOFwiOjExOCxcIjMzXCI6MzN9XSwyNDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiBfZGVyZXFfKDExMClcbn0pO1xuXG59LHtcIjExMFwiOjExMCxcIjMzXCI6MzN9XSwyNDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5fZGVyZXFfKDEwOCkoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyNDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM0KShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG59LHtcIjEwN1wiOjEwNyxcIjExOFwiOjExOCxcIjMzXCI6MzMsXCIzNFwiOjM0fV0sMjUwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbl9kZXJlcV8oMTA4KSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEwOFwiOjEwOH1dLDI1MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5fZGVyZXFfKDEwOCkoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyNTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxuX2RlcmVxXygxMDgpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG5cbn0se1wiMTA4XCI6MTA4fV0sMjUzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxuX2RlcmVxXygxMTEpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuXG59LHtcIjExMVwiOjExMX1dLDI1NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgREVTQ1JJUFRPUlMgPSBfZGVyZXFfKDI5KTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciBNRVRBID0gX2RlcmVxXyg2NikuS0VZO1xudmFyICRmYWlscyA9IF9kZXJlcV8oMzUpO1xudmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTtcbnZhciB1aWQgPSBfZGVyZXFfKDEyNCk7XG52YXIgd2tzID0gX2RlcmVxXygxMjgpO1xudmFyIHdrc0V4dCA9IF9kZXJlcV8oMTI3KTtcbnZhciB3a3NEZWZpbmUgPSBfZGVyZXFfKDEyNik7XG52YXIga2V5T2YgPSBfZGVyZXFfKDU5KTtcbnZhciBlbnVtS2V5cyA9IF9kZXJlcV8oMzIpO1xudmFyIGlzQXJyYXkgPSBfZGVyZXFfKDQ5KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApO1xudmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTtcbnZhciBfY3JlYXRlID0gX2RlcmVxXyg3MSk7XG52YXIgZ09QTkV4dCA9IF9kZXJlcV8oNzYpO1xudmFyICRHT1BEID0gX2RlcmVxXyg3NSk7XG52YXIgJERQID0gX2RlcmVxXyg3Mik7XG52YXIgJGtleXMgPSBfZGVyZXFfKDgxKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICBfZGVyZXFfKDc3KS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIF9kZXJlcV8oODIpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIF9kZXJlcV8oNzgpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhX2RlcmVxXyg2MCkpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpIHtcbiAgICBpZiAoaXNTeW1ib2woa2V5KSkgcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpO1xuICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICBpZiAoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmICgkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoJHJlcGxhY2VyKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCBfZGVyZXFfKDQyKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxufSx7XCIxMDFcIjoxMDEsXCIxMDNcIjoxMDMsXCIxMTdcIjoxMTcsXCIxMjBcIjoxMjAsXCIxMjRcIjoxMjQsXCIxMjZcIjoxMjYsXCIxMjdcIjoxMjcsXCIxMjhcIjoxMjgsXCIyOVwiOjI5LFwiMzJcIjozMixcIjMzXCI6MzMsXCIzNVwiOjM1LFwiNDBcIjo0MCxcIjQxXCI6NDEsXCI0MlwiOjQyLFwiNDlcIjo0OSxcIjU5XCI6NTksXCI2MFwiOjYwLFwiNjZcIjo2NixcIjdcIjo3LFwiNzFcIjo3MSxcIjcyXCI6NzIsXCI3NVwiOjc1LFwiNzZcIjo3NixcIjc3XCI6NzcsXCI3OFwiOjc4LFwiODFcIjo4MSxcIjgyXCI6ODIsXCI5MlwiOjkyLFwiOTRcIjo5NH1dLDI1NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICR0eXBlZCA9IF9kZXJlcV8oMTIzKTtcbnZhciBidWZmZXIgPSBfZGVyZXFfKDEyMik7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9kZXJlcV8oMTE0KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIEFycmF5QnVmZmVyID0gX2RlcmVxXyg0MCkuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX2RlcmVxXygxMDQpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluYWwgPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbmFsIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbmFsKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuX2RlcmVxXygxMDApKEFSUkFZX0JVRkZFUik7XG5cbn0se1wiMTAwXCI6MTAwLFwiMTA0XCI6MTA0LFwiMTE0XCI6MTE0LFwiMTE4XCI6MTE4LFwiMTIyXCI6MTIyLFwiMTIzXCI6MTIzLFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiNTFcIjo1MSxcIjdcIjo3fV0sMjU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFfZGVyZXFfKDEyMykuQUJWLCB7XG4gIERhdGFWaWV3OiBfZGVyZXFfKDEyMikuRGF0YVZpZXdcbn0pO1xuXG59LHtcIjEyMlwiOjEyMixcIjEyM1wiOjEyMyxcIjMzXCI6MzN9XSwyNTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuX2RlcmVxXygxMjEpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbn0se1wiMTIxXCI6MTIxfV0sMjU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTIxKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI1OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxufSx7XCIxMjFcIjoxMjF9XSwyNjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuX2RlcmVxXygxMjEpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbn0se1wiMTIxXCI6MTIxfV0sMjY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTIxKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbn0se1wiMTIxXCI6MTIxfV0sMjY1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTIxKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IF9kZXJlcV8oMTIpKDApO1xudmFyIHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7XG52YXIgbWV0YSA9IF9kZXJlcV8oNjYpO1xudmFyIGFzc2lnbiA9IF9kZXJlcV8oNzApO1xudmFyIHdlYWsgPSBfZGVyZXFfKDIxKTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjIpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDc7IH0pKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbn0se1wiMTJcIjoxMixcIjEyNVwiOjEyNSxcIjIxXCI6MjEsXCIyMlwiOjIyLFwiMzVcIjozNSxcIjUxXCI6NTEsXCI2NlwiOjY2LFwiNzBcIjo3MCxcIjk0XCI6OTR9XSwyNjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSBfZGVyZXFfKDIxKTtcbnZhciB2YWxpZGF0ZSA9IF9kZXJlcV8oMTI1KTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbl9kZXJlcV8oMjIpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuXG59LHtcIjEyNVwiOjEyNSxcIjIxXCI6MjEsXCIyMlwiOjIyfV0sMjY4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBfZGVyZXFfKDM4KTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IF9kZXJlcV8oMTUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbl9kZXJlcV8oNSkoJ2ZsYXRNYXAnKTtcblxufSx7XCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIxNVwiOjE1LFwiM1wiOjMsXCIzM1wiOjMzLFwiMzhcIjozOCxcIjVcIjo1fV0sMjY5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBfZGVyZXFfKDM4KTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciB0b0ludGVnZXIgPSBfZGVyZXFfKDExNik7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gX2RlcmVxXygxNSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbl9kZXJlcV8oNSkoJ2ZsYXR0ZW4nKTtcblxufSx7XCIxMTZcIjoxMTYsXCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIxNVwiOjE1LFwiMzNcIjozMyxcIjM4XCI6MzgsXCI1XCI6NX1dLDI3MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGluY2x1ZGVzID0gX2RlcmVxXygxMSkodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5fZGVyZXFfKDUpKCdpbmNsdWRlcycpO1xuXG59LHtcIjExXCI6MTEsXCIzM1wiOjMzLFwiNVwiOjV9XSwyNzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIG1pY3JvdGFzayA9IF9kZXJlcV8oNjgpKCk7XG52YXIgcHJvY2VzcyA9IF9kZXJlcV8oNDApLnByb2Nlc3M7XG52YXIgaXNOb2RlID0gX2RlcmVxXygxOCkocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcblxufSx7XCIxOFwiOjE4LFwiMzNcIjozMyxcIjQwXCI6NDAsXCI2OFwiOjY4fV0sMjcyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgY29mID0gX2RlcmVxXygxOCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG5cbn0se1wiMThcIjoxOCxcIjMzXCI6MzN9XSwyNzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IF9kZXJlcV8oNDApIH0pO1xuXG59LHtcIjMzXCI6MzMsXCI0MFwiOjQwfV0sMjc0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5fZGVyZXFfKDk3KSgnTWFwJyk7XG5cbn0se1wiOTdcIjo5N31dLDI3NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2Zcbl9kZXJlcV8oOTgpKCdNYXAnKTtcblxufSx7XCI5OFwiOjk4fV0sMjc2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywgeyB0b0pTT046IF9kZXJlcV8oMjApKCdNYXAnKSB9KTtcblxufSx7XCIyMFwiOjIwLFwiMzNcIjozM31dLDI3NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXIsIE1hdGgubWF4KGxvd2VyLCB4KSk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyNzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcblxufSx7XCIzM1wiOjMzfV0sMjc5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBzY2FsZSA9IF9kZXJlcV8oNjQpO1xudmFyIGZyb3VuZCA9IF9kZXJlcV8oNjIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI2MlwiOjYyLFwiNjRcIjo2NH1dLDI4MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMjgyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDI4MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcblxufSx7XCIzM1wiOjMzfV0sMjg1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogX2RlcmVxXyg2NCkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjY0XCI6NjR9XSwyODc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDI4OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpO1xudmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gX2RlcmVxXyg3Mik7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbl9kZXJlcV8oMjkpICYmICRleHBvcnQoJGV4cG9ydC5QICsgX2RlcmVxXyg3NCksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcblxufSx7XCIxMTlcIjoxMTksXCIyOVwiOjI5LFwiM1wiOjMsXCIzM1wiOjMzLFwiNzJcIjo3MixcIjc0XCI6NzR9XSwyOTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IF9kZXJlcV8oNzIpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5fZGVyZXFfKDI5KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9kZXJlcV8oNzQpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG5cbn0se1wiMTE5XCI6MTE5LFwiMjlcIjoyOSxcIjNcIjozLFwiMzNcIjozMyxcIjcyXCI6NzIsXCI3NFwiOjc0fV0sMjkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkZW50cmllcyA9IF9kZXJlcV8oODQpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI4NFwiOjg0fV0sMjkyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIG93bktleXMgPSBfZGVyZXFfKDg1KTtcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gX2RlcmVxXygyNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxufSx7XCIxMTdcIjoxMTcsXCIyNFwiOjI0LFwiMzNcIjozMyxcIjc1XCI6NzUsXCI4NVwiOjg1fV0sMjkzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfZGVyZXFfKDc1KS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxuX2RlcmVxXygyOSkgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyBfZGVyZXFfKDc0KSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG5cbn0se1wiMTE5XCI6MTE5LFwiMTIwXCI6MTIwLFwiMjlcIjoyOSxcIjMzXCI6MzMsXCI3NFwiOjc0LFwiNzVcIjo3NSxcIjc5XCI6Nzl9XSwyOTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9kZXJlcV8oNzUpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5fZGVyZXFfKDI5KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9kZXJlcV8oNzQpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcblxufSx7XCIxMTlcIjoxMTksXCIxMjBcIjoxMjAsXCIyOVwiOjI5LFwiMzNcIjozMyxcIjc0XCI6NzQsXCI3NVwiOjc1LFwiNzlcIjo3OX1dLDI5NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHZhbHVlcyA9IF9kZXJlcV8oODQpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiODRcIjo4NH1dLDI5NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIGNvcmUgPSBfZGVyZXFfKDIzKTtcbnZhciBtaWNyb3Rhc2sgPSBfZGVyZXFfKDY4KSgpO1xudmFyIE9CU0VSVkFCTEUgPSBfZGVyZXFfKDEyOCkoJ29ic2VydmFibGUnKTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBhbkluc3RhbmNlID0gX2RlcmVxXyg2KTtcbnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xudmFyIGhpZGUgPSBfZGVyZXFfKDQyKTtcbnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbl9kZXJlcV8oMTAwKSgnT2JzZXJ2YWJsZScpO1xuXG59LHtcIjEwMFwiOjEwMCxcIjEyOFwiOjEyOCxcIjIzXCI6MjMsXCIzXCI6MyxcIjMzXCI6MzMsXCIzOVwiOjM5LFwiNDBcIjo0MCxcIjQyXCI6NDIsXCI2XCI6NixcIjY4XCI6NjgsXCI3XCI6NyxcIjkzXCI6OTN9XSwyOTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGNvcmUgPSBfZGVyZXFfKDIzKTtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfZGVyZXFfKDEwNCk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSBfZGVyZXFfKDkxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG5cbn0se1wiMTA0XCI6MTA0LFwiMjNcIjoyMyxcIjMzXCI6MzMsXCI0MFwiOjQwLFwiOTFcIjo5MX1dLDI5ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9kZXJlcV8oNjkpO1xudmFyIHBlcmZvcm0gPSBfZGVyZXFfKDkwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuXG59LHtcIjMzXCI6MzMsXCI2OVwiOjY5LFwiOTBcIjo5MH1dLDI5OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcblxufSx7XCI2N1wiOjY3LFwiN1wiOjd9XSwzMDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3fV0sMzAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBTZXQgPSBfZGVyZXFfKDIzMSk7XG52YXIgZnJvbSA9IF9kZXJlcV8oMTApO1xudmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcblxufSx7XCIxMFwiOjEwLFwiMjMxXCI6MjMxLFwiNjdcIjo2NyxcIjdcIjo3LFwiNzlcIjo3OX1dLDMwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3LFwiNzlcIjo3OX1dLDMwMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3fV0sMzA0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBtZXRhZGF0YSA9IF9kZXJlcV8oNjcpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcblxufSx7XCI2N1wiOjY3LFwiN1wiOjd9XSwzMDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3LFwiNzlcIjo3OX1dLDMwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3fV0sMzA3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG5cbn0se1wiM1wiOjMsXCI2N1wiOjY3LFwiN1wiOjd9XSwzMDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbl9kZXJlcV8oOTcpKCdTZXQnKTtcblxufSx7XCI5N1wiOjk3fV0sMzA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxuX2RlcmVxXyg5OCkoJ1NldCcpO1xuXG59LHtcIjk4XCI6OTh9XSwzMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogX2RlcmVxXygyMCkoJ1NldCcpIH0pO1xuXG59LHtcIjIwXCI6MjAsXCIzM1wiOjMzfV0sMzExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGF0ID0gX2RlcmVxXygxMDYpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG5cbn0se1wiMTA2XCI6MTA2LFwiMzNcIjozM31dLDMxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBpc1JlZ0V4cCA9IF9kZXJlcV8oNTIpO1xudmFyIGdldEZsYWdzID0gX2RlcmVxXygzNyk7XG52YXIgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHJlZ2V4cCwgc3RyaW5nKSB7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5fZGVyZXFfKDU0KSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuXG59LHtcIjExOFwiOjExOCxcIjI4XCI6MjgsXCIzM1wiOjMzLFwiMzdcIjozNyxcIjUyXCI6NTIsXCI1NFwiOjU0fV0sMzEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYWQgPSBfZGVyZXFfKDEwOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcblxufSx7XCIxMDlcIjoxMDksXCIzM1wiOjMzfV0sMzE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYWQgPSBfZGVyZXFfKDEwOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcblxufSx7XCIxMDlcIjoxMDksXCIzM1wiOjMzfV0sMzE1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbl9kZXJlcV8oMTExKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcblxufSx7XCIxMTFcIjoxMTF9XSwzMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxuX2RlcmVxXygxMTEpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuXG59LHtcIjExMVwiOjExMX1dLDMxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyNikoJ2FzeW5jSXRlcmF0b3InKTtcblxufSx7XCIxMjZcIjoxMjZ9XSwzMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuX2RlcmVxXygxMjYpKCdvYnNlcnZhYmxlJyk7XG5cbn0se1wiMTI2XCI6MTI2fV0sMzE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGdsb2JhbDogX2RlcmVxXyg0MCkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjQwXCI6NDB9XSwzMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5fZGVyZXFfKDk3KSgnV2Vha01hcCcpO1xuXG59LHtcIjk3XCI6OTd9XSwzMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxuX2RlcmVxXyg5OCkoJ1dlYWtNYXAnKTtcblxufSx7XCI5OFwiOjk4fV0sMzIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxuX2RlcmVxXyg5NykoJ1dlYWtTZXQnKTtcblxufSx7XCI5N1wiOjk3fV0sMzIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2Zcbl9kZXJlcV8oOTgpKCdXZWFrU2V0Jyk7XG5cbn0se1wiOThcIjo5OH1dLDMyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGl0ZXJhdG9ycyA9IF9kZXJlcV8oMTQxKTtcbnZhciBnZXRLZXlzID0gX2RlcmVxXyg4MSk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG52YXIgd2tzID0gX2RlcmVxXygxMjgpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG5cbn0se1wiMTI4XCI6MTI4LFwiMTQxXCI6MTQxLFwiNDBcIjo0MCxcIjQyXCI6NDIsXCI1OFwiOjU4LFwiODFcIjo4MSxcIjk0XCI6OTR9XSwzMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkdGFzayA9IF9kZXJlcV8oMTEzKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuXG59LHtcIjExM1wiOjExMyxcIjMzXCI6MzN9XSwzMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBpbnZva2UgPSBfZGVyZXFfKDQ2KTtcbnZhciBwYXJ0aWFsID0gX2RlcmVxXyg4OCk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcbnZhciBNU0lFID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBNU0lFID8gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHJldHVybiBzZXQoaW52b2tlKFxuICAgICAgcGFydGlhbCxcbiAgICAgIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgdHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKVxuICAgICksIHRpbWUpO1xuICB9IDogc2V0O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjQwXCI6NDAsXCI0NlwiOjQ2LFwiODhcIjo4OH1dLDMyNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDI1NCk7XG5fZGVyZXFfKDE5MSk7XG5fZGVyZXFfKDE5Myk7XG5fZGVyZXFfKDE5Mik7XG5fZGVyZXFfKDE5NSk7XG5fZGVyZXFfKDE5Nyk7XG5fZGVyZXFfKDIwMik7XG5fZGVyZXFfKDE5Nik7XG5fZGVyZXFfKDE5NCk7XG5fZGVyZXFfKDIwNCk7XG5fZGVyZXFfKDIwMyk7XG5fZGVyZXFfKDE5OSk7XG5fZGVyZXFfKDIwMCk7XG5fZGVyZXFfKDE5OCk7XG5fZGVyZXFfKDE5MCk7XG5fZGVyZXFfKDIwMSk7XG5fZGVyZXFfKDIwNSk7XG5fZGVyZXFfKDIwNik7XG5fZGVyZXFfKDE1Nyk7XG5fZGVyZXFfKDE1OSk7XG5fZGVyZXFfKDE1OCk7XG5fZGVyZXFfKDIwOCk7XG5fZGVyZXFfKDIwNyk7XG5fZGVyZXFfKDE3OCk7XG5fZGVyZXFfKDE4OCk7XG5fZGVyZXFfKDE4OSk7XG5fZGVyZXFfKDE3OSk7XG5fZGVyZXFfKDE4MCk7XG5fZGVyZXFfKDE4MSk7XG5fZGVyZXFfKDE4Mik7XG5fZGVyZXFfKDE4Myk7XG5fZGVyZXFfKDE4NCk7XG5fZGVyZXFfKDE4NSk7XG5fZGVyZXFfKDE4Nik7XG5fZGVyZXFfKDE4Nyk7XG5fZGVyZXFfKDE2MSk7XG5fZGVyZXFfKDE2Mik7XG5fZGVyZXFfKDE2Myk7XG5fZGVyZXFfKDE2NCk7XG5fZGVyZXFfKDE2NSk7XG5fZGVyZXFfKDE2Nik7XG5fZGVyZXFfKDE2Nyk7XG5fZGVyZXFfKDE2OCk7XG5fZGVyZXFfKDE2OSk7XG5fZGVyZXFfKDE3MCk7XG5fZGVyZXFfKDE3MSk7XG5fZGVyZXFfKDE3Mik7XG5fZGVyZXFfKDE3Myk7XG5fZGVyZXFfKDE3NCk7XG5fZGVyZXFfKDE3NSk7XG5fZGVyZXFfKDE3Nik7XG5fZGVyZXFfKDE3Nyk7XG5fZGVyZXFfKDI0MSk7XG5fZGVyZXFfKDI0Nik7XG5fZGVyZXFfKDI1Myk7XG5fZGVyZXFfKDI0NCk7XG5fZGVyZXFfKDIzNik7XG5fZGVyZXFfKDIzNyk7XG5fZGVyZXFfKDI0Mik7XG5fZGVyZXFfKDI0Nyk7XG5fZGVyZXFfKDI0OSk7XG5fZGVyZXFfKDIzMik7XG5fZGVyZXFfKDIzMyk7XG5fZGVyZXFfKDIzNCk7XG5fZGVyZXFfKDIzNSk7XG5fZGVyZXFfKDIzOCk7XG5fZGVyZXFfKDIzOSk7XG5fZGVyZXFfKDI0MCk7XG5fZGVyZXFfKDI0Myk7XG5fZGVyZXFfKDI0NSk7XG5fZGVyZXFfKDI0OCk7XG5fZGVyZXFfKDI1MCk7XG5fZGVyZXFfKDI1MSk7XG5fZGVyZXFfKDI1Mik7XG5fZGVyZXFfKDE1Mik7XG5fZGVyZXFfKDE1NCk7XG5fZGVyZXFfKDE1Myk7XG5fZGVyZXFfKDE1Nik7XG5fZGVyZXFfKDE1NSk7XG5fZGVyZXFfKDE0MCk7XG5fZGVyZXFfKDEzOCk7XG5fZGVyZXFfKDE0NSk7XG5fZGVyZXFfKDE0Mik7XG5fZGVyZXFfKDE0OCk7XG5fZGVyZXFfKDE1MCk7XG5fZGVyZXFfKDEzNyk7XG5fZGVyZXFfKDE0NCk7XG5fZGVyZXFfKDEzNCk7XG5fZGVyZXFfKDE0OSk7XG5fZGVyZXFfKDEzMik7XG5fZGVyZXFfKDE0Nyk7XG5fZGVyZXFfKDE0Nik7XG5fZGVyZXFfKDEzOSk7XG5fZGVyZXFfKDE0Myk7XG5fZGVyZXFfKDEzMSk7XG5fZGVyZXFfKDEzMyk7XG5fZGVyZXFfKDEzNik7XG5fZGVyZXFfKDEzNSk7XG5fZGVyZXFfKDE1MSk7XG5fZGVyZXFfKDE0MSk7XG5fZGVyZXFfKDIyNCk7XG5fZGVyZXFfKDIzMCk7XG5fZGVyZXFfKDIyNSk7XG5fZGVyZXFfKDIyNik7XG5fZGVyZXFfKDIyNyk7XG5fZGVyZXFfKDIyOCk7XG5fZGVyZXFfKDIyOSk7XG5fZGVyZXFfKDIwOSk7XG5fZGVyZXFfKDE2MCk7XG5fZGVyZXFfKDIzMSk7XG5fZGVyZXFfKDI2Nik7XG5fZGVyZXFfKDI2Nyk7XG5fZGVyZXFfKDI1NSk7XG5fZGVyZXFfKDI1Nik7XG5fZGVyZXFfKDI2MSk7XG5fZGVyZXFfKDI2NCk7XG5fZGVyZXFfKDI2NSk7XG5fZGVyZXFfKDI1OSk7XG5fZGVyZXFfKDI2Mik7XG5fZGVyZXFfKDI2MCk7XG5fZGVyZXFfKDI2Myk7XG5fZGVyZXFfKDI1Nyk7XG5fZGVyZXFfKDI1OCk7XG5fZGVyZXFfKDIxMCk7XG5fZGVyZXFfKDIxMSk7XG5fZGVyZXFfKDIxMik7XG5fZGVyZXFfKDIxMyk7XG5fZGVyZXFfKDIxNCk7XG5fZGVyZXFfKDIxNyk7XG5fZGVyZXFfKDIxNSk7XG5fZGVyZXFfKDIxNik7XG5fZGVyZXFfKDIxOCk7XG5fZGVyZXFfKDIxOSk7XG5fZGVyZXFfKDIyMCk7XG5fZGVyZXFfKDIyMSk7XG5fZGVyZXFfKDIyMyk7XG5fZGVyZXFfKDIyMik7XG5fZGVyZXFfKDI3MCk7XG5fZGVyZXFfKDI2OCk7XG5fZGVyZXFfKDI2OSk7XG5fZGVyZXFfKDMxMSk7XG5fZGVyZXFfKDMxNCk7XG5fZGVyZXFfKDMxMyk7XG5fZGVyZXFfKDMxNSk7XG5fZGVyZXFfKDMxNik7XG5fZGVyZXFfKDMxMik7XG5fZGVyZXFfKDMxNyk7XG5fZGVyZXFfKDMxOCk7XG5fZGVyZXFfKDI5Mik7XG5fZGVyZXFfKDI5NSk7XG5fZGVyZXFfKDI5MSk7XG5fZGVyZXFfKDI4OSk7XG5fZGVyZXFfKDI5MCk7XG5fZGVyZXFfKDI5Myk7XG5fZGVyZXFfKDI5NCk7XG5fZGVyZXFfKDI3Nik7XG5fZGVyZXFfKDMxMCk7XG5fZGVyZXFfKDI3NSk7XG5fZGVyZXFfKDMwOSk7XG5fZGVyZXFfKDMyMSk7XG5fZGVyZXFfKDMyMyk7XG5fZGVyZXFfKDI3NCk7XG5fZGVyZXFfKDMwOCk7XG5fZGVyZXFfKDMyMCk7XG5fZGVyZXFfKDMyMik7XG5fZGVyZXFfKDI3Myk7XG5fZGVyZXFfKDMxOSk7XG5fZGVyZXFfKDI3Mik7XG5fZGVyZXFfKDI3Nyk7XG5fZGVyZXFfKDI3OCk7XG5fZGVyZXFfKDI3OSk7XG5fZGVyZXFfKDI4MCk7XG5fZGVyZXFfKDI4MSk7XG5fZGVyZXFfKDI4Myk7XG5fZGVyZXFfKDI4Mik7XG5fZGVyZXFfKDI4NCk7XG5fZGVyZXFfKDI4NSk7XG5fZGVyZXFfKDI4Nik7XG5fZGVyZXFfKDI4OCk7XG5fZGVyZXFfKDI4Nyk7XG5fZGVyZXFfKDI5Nyk7XG5fZGVyZXFfKDI5OCk7XG5fZGVyZXFfKDI5OSk7XG5fZGVyZXFfKDMwMCk7XG5fZGVyZXFfKDMwMik7XG5fZGVyZXFfKDMwMSk7XG5fZGVyZXFfKDMwNCk7XG5fZGVyZXFfKDMwMyk7XG5fZGVyZXFfKDMwNSk7XG5fZGVyZXFfKDMwNik7XG5fZGVyZXFfKDMwNyk7XG5fZGVyZXFfKDI3MSk7XG5fZGVyZXFfKDI5Nik7XG5fZGVyZXFfKDMyNik7XG5fZGVyZXFfKDMyNSk7XG5fZGVyZXFfKDMyNCk7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjMpO1xuXG59LHtcIjEzMVwiOjEzMSxcIjEzMlwiOjEzMixcIjEzM1wiOjEzMyxcIjEzNFwiOjEzNCxcIjEzNVwiOjEzNSxcIjEzNlwiOjEzNixcIjEzN1wiOjEzNyxcIjEzOFwiOjEzOCxcIjEzOVwiOjEzOSxcIjE0MFwiOjE0MCxcIjE0MVwiOjE0MSxcIjE0MlwiOjE0MixcIjE0M1wiOjE0MyxcIjE0NFwiOjE0NCxcIjE0NVwiOjE0NSxcIjE0NlwiOjE0NixcIjE0N1wiOjE0NyxcIjE0OFwiOjE0OCxcIjE0OVwiOjE0OSxcIjE1MFwiOjE1MCxcIjE1MVwiOjE1MSxcIjE1MlwiOjE1MixcIjE1M1wiOjE1MyxcIjE1NFwiOjE1NCxcIjE1NVwiOjE1NSxcIjE1NlwiOjE1NixcIjE1N1wiOjE1NyxcIjE1OFwiOjE1OCxcIjE1OVwiOjE1OSxcIjE2MFwiOjE2MCxcIjE2MVwiOjE2MSxcIjE2MlwiOjE2MixcIjE2M1wiOjE2MyxcIjE2NFwiOjE2NCxcIjE2NVwiOjE2NSxcIjE2NlwiOjE2NixcIjE2N1wiOjE2NyxcIjE2OFwiOjE2OCxcIjE2OVwiOjE2OSxcIjE3MFwiOjE3MCxcIjE3MVwiOjE3MSxcIjE3MlwiOjE3MixcIjE3M1wiOjE3MyxcIjE3NFwiOjE3NCxcIjE3NVwiOjE3NSxcIjE3NlwiOjE3NixcIjE3N1wiOjE3NyxcIjE3OFwiOjE3OCxcIjE3OVwiOjE3OSxcIjE4MFwiOjE4MCxcIjE4MVwiOjE4MSxcIjE4MlwiOjE4MixcIjE4M1wiOjE4MyxcIjE4NFwiOjE4NCxcIjE4NVwiOjE4NSxcIjE4NlwiOjE4NixcIjE4N1wiOjE4NyxcIjE4OFwiOjE4OCxcIjE4OVwiOjE4OSxcIjE5MFwiOjE5MCxcIjE5MVwiOjE5MSxcIjE5MlwiOjE5MixcIjE5M1wiOjE5MyxcIjE5NFwiOjE5NCxcIjE5NVwiOjE5NSxcIjE5NlwiOjE5NixcIjE5N1wiOjE5NyxcIjE5OFwiOjE5OCxcIjE5OVwiOjE5OSxcIjIwMFwiOjIwMCxcIjIwMVwiOjIwMSxcIjIwMlwiOjIwMixcIjIwM1wiOjIwMyxcIjIwNFwiOjIwNCxcIjIwNVwiOjIwNSxcIjIwNlwiOjIwNixcIjIwN1wiOjIwNyxcIjIwOFwiOjIwOCxcIjIwOVwiOjIwOSxcIjIxMFwiOjIxMCxcIjIxMVwiOjIxMSxcIjIxMlwiOjIxMixcIjIxM1wiOjIxMyxcIjIxNFwiOjIxNCxcIjIxNVwiOjIxNSxcIjIxNlwiOjIxNixcIjIxN1wiOjIxNyxcIjIxOFwiOjIxOCxcIjIxOVwiOjIxOSxcIjIyMFwiOjIyMCxcIjIyMVwiOjIyMSxcIjIyMlwiOjIyMixcIjIyM1wiOjIyMyxcIjIyNFwiOjIyNCxcIjIyNVwiOjIyNSxcIjIyNlwiOjIyNixcIjIyN1wiOjIyNyxcIjIyOFwiOjIyOCxcIjIyOVwiOjIyOSxcIjIzXCI6MjMsXCIyMzBcIjoyMzAsXCIyMzFcIjoyMzEsXCIyMzJcIjoyMzIsXCIyMzNcIjoyMzMsXCIyMzRcIjoyMzQsXCIyMzVcIjoyMzUsXCIyMzZcIjoyMzYsXCIyMzdcIjoyMzcsXCIyMzhcIjoyMzgsXCIyMzlcIjoyMzksXCIyNDBcIjoyNDAsXCIyNDFcIjoyNDEsXCIyNDJcIjoyNDIsXCIyNDNcIjoyNDMsXCIyNDRcIjoyNDQsXCIyNDVcIjoyNDUsXCIyNDZcIjoyNDYsXCIyNDdcIjoyNDcsXCIyNDhcIjoyNDgsXCIyNDlcIjoyNDksXCIyNTBcIjoyNTAsXCIyNTFcIjoyNTEsXCIyNTJcIjoyNTIsXCIyNTNcIjoyNTMsXCIyNTRcIjoyNTQsXCIyNTVcIjoyNTUsXCIyNTZcIjoyNTYsXCIyNTdcIjoyNTcsXCIyNThcIjoyNTgsXCIyNTlcIjoyNTksXCIyNjBcIjoyNjAsXCIyNjFcIjoyNjEsXCIyNjJcIjoyNjIsXCIyNjNcIjoyNjMsXCIyNjRcIjoyNjQsXCIyNjVcIjoyNjUsXCIyNjZcIjoyNjYsXCIyNjdcIjoyNjcsXCIyNjhcIjoyNjgsXCIyNjlcIjoyNjksXCIyNzBcIjoyNzAsXCIyNzFcIjoyNzEsXCIyNzJcIjoyNzIsXCIyNzNcIjoyNzMsXCIyNzRcIjoyNzQsXCIyNzVcIjoyNzUsXCIyNzZcIjoyNzYsXCIyNzdcIjoyNzcsXCIyNzhcIjoyNzgsXCIyNzlcIjoyNzksXCIyODBcIjoyODAsXCIyODFcIjoyODEsXCIyODJcIjoyODIsXCIyODNcIjoyODMsXCIyODRcIjoyODQsXCIyODVcIjoyODUsXCIyODZcIjoyODYsXCIyODdcIjoyODcsXCIyODhcIjoyODgsXCIyODlcIjoyODksXCIyOTBcIjoyOTAsXCIyOTFcIjoyOTEsXCIyOTJcIjoyOTIsXCIyOTNcIjoyOTMsXCIyOTRcIjoyOTQsXCIyOTVcIjoyOTUsXCIyOTZcIjoyOTYsXCIyOTdcIjoyOTcsXCIyOThcIjoyOTgsXCIyOTlcIjoyOTksXCIzMDBcIjozMDAsXCIzMDFcIjozMDEsXCIzMDJcIjozMDIsXCIzMDNcIjozMDMsXCIzMDRcIjozMDQsXCIzMDVcIjozMDUsXCIzMDZcIjozMDYsXCIzMDdcIjozMDcsXCIzMDhcIjozMDgsXCIzMDlcIjozMDksXCIzMTBcIjozMTAsXCIzMTFcIjozMTEsXCIzMTJcIjozMTIsXCIzMTNcIjozMTMsXCIzMTRcIjozMTQsXCIzMTVcIjozMTUsXCIzMTZcIjozMTYsXCIzMTdcIjozMTcsXCIzMThcIjozMTgsXCIzMTlcIjozMTksXCIzMjBcIjozMjAsXCIzMjFcIjozMjEsXCIzMjJcIjozMjIsXCIzMjNcIjozMjMsXCIzMjRcIjozMjQsXCIzMjVcIjozMjUsXCIzMjZcIjozMjZ9XSwzMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxufSx7fV19LHt9LFsxXSk7XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuMy4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOC0wMS0yMFQxNzoyNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jLCBub2RlICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cdFx0XHRcdGlmICggbm9kZVsgaSBdICkge1xuXHRcdFx0XHRcdHNjcmlwdFsgaSBdID0gbm9kZVsgaSBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy4zLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgQXJyYXkuaXNBcnJheSggc3JjICkgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvNjEyNVxuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdERPTUV2YWwoIGNvZGUgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuM1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDgtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0ZGlzYWJsZWRBbmNlc3RvciA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiAoXCJmb3JtXCIgaW4gZWxlbSB8fCBcImxhYmVsXCIgaW4gZWxlbSk7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IWNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuXHRcdFx0XHQvLyBxU0EgbG9va3Mgb3V0c2lkZSBFbGVtZW50IGNvbnRleHQsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnRcblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgd29ya2Fyb3VuZCB0ZWNobmlxdWVcblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBuZXdTZWxlY3RvciApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRkaXNhYmxlZEFuY2VzdG9yKCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKGogPSBtYXRjaEluZGV4ZXNbaV0pIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFtqXSA9ICEobWF0Y2hlc1tqXSA9IHNlZWRbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0Ly8gZG9jdW1lbnRFbGVtZW50IGlzIHZlcmlmaWVkIGZvciBjYXNlcyB3aGVyZSBpdCBkb2Vzbid0IHlldCBleGlzdFxuXHQvLyAoc3VjaCBhcyBsb2FkaW5nIGlmcmFtZXMgaW4gSUUgLSAjNDgzMylcblx0dmFyIGRvY3VtZW50RWxlbWVudCA9IGVsZW0gJiYgKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cdHJldHVybiBkb2N1bWVudEVsZW1lbnQgPyBkb2N1bWVudEVsZW1lbnQubm9kZU5hbWUgIT09IFwiSFRNTFwiIDogZmFsc2U7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKHNlbCArIFwiXCIpLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fCAob3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIChvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbaV0pID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbdGVtcF0gPSAhKHJlc3VsdHNbdGVtcF0gPSBlbGVtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1swXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlW1wiIFwiXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KGNoZWNrQ29udGV4dCA9IGNvbnRleHQpLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gc2V0TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISh1bm1hdGNoZWRbaV0gfHwgc2V0TWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFtpXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFtpXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZSggc2VsZWN0b3IsIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoIChzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpICkgJiAxO1xufSk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwiaWZyYW1lXCIgKSApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuICAgICAgICAvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcbiAgICAgICAgLy8gZG9uJ3Qgc3VwcG9ydCBpdC5cbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG4gICAgICAgICAgICBlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYywgbm9kZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSBkaXYub2Zmc2V0V2lkdGggPT09IDM2IHx8IFwiYWJzb2x1dGVcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcHJvcGVydHkgbWFwcGVkIGFsb25nIHdoYXQgalF1ZXJ5LmNzc1Byb3BzIHN1Z2dlc3RzIG9yIHRvXG4vLyBhIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eS5cbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciByZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXTtcblx0aWYgKCAhcmV0ICkge1xuXHRcdHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xuXHR9XG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cdFx0KSApO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94O1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0dmFsdWVJc0JvcmRlckJveCA9IHZhbHVlSXNCb3JkZXJCb3ggJiZcblx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdICk7XG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdGlmICggdmFsID09PSBcImF1dG9cIiB8fFxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkge1xuXG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdO1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHByb3ZpZGUgYm9yZGVyLWJveCB2YWx1ZXNcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gdHJ1ZTtcblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYm94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpID09PSBzdHlsZXMucG9zaXRpb24gKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBEYXRlLm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIlxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcbiAgYWxlcnQoJ2hlbGxvIHdvcmxkJyk7XG59KTsiXX0=
